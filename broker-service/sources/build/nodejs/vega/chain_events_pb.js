// source: vega/chain_events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vega.BuiltinAssetDeposit', null, global);
goog.exportSymbol('proto.vega.BuiltinAssetEvent', null, global);
goog.exportSymbol('proto.vega.BuiltinAssetEvent.ActionCase', null, global);
goog.exportSymbol('proto.vega.BuiltinAssetWithdrawal', null, global);
goog.exportSymbol('proto.vega.ERC20AssetDelist', null, global);
goog.exportSymbol('proto.vega.ERC20AssetLimitsUpdated', null, global);
goog.exportSymbol('proto.vega.ERC20AssetList', null, global);
goog.exportSymbol('proto.vega.ERC20Deposit', null, global);
goog.exportSymbol('proto.vega.ERC20Event', null, global);
goog.exportSymbol('proto.vega.ERC20Event.ActionCase', null, global);
goog.exportSymbol('proto.vega.ERC20MultiSigEvent', null, global);
goog.exportSymbol('proto.vega.ERC20MultiSigEvent.ActionCase', null, global);
goog.exportSymbol('proto.vega.ERC20SignerAdded', null, global);
goog.exportSymbol('proto.vega.ERC20SignerRemoved', null, global);
goog.exportSymbol('proto.vega.ERC20ThresholdSet', null, global);
goog.exportSymbol('proto.vega.ERC20Withdrawal', null, global);
goog.exportSymbol('proto.vega.StakeDeposited', null, global);
goog.exportSymbol('proto.vega.StakeRemoved', null, global);
goog.exportSymbol('proto.vega.StakeTotalSupply', null, global);
goog.exportSymbol('proto.vega.StakingEvent', null, global);
goog.exportSymbol('proto.vega.StakingEvent.ActionCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.BuiltinAssetDeposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.BuiltinAssetDeposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.BuiltinAssetDeposit.displayName = 'proto.vega.BuiltinAssetDeposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.BuiltinAssetWithdrawal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.BuiltinAssetWithdrawal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.BuiltinAssetWithdrawal.displayName = 'proto.vega.BuiltinAssetWithdrawal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.BuiltinAssetEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.vega.BuiltinAssetEvent.oneofGroups_);
};
goog.inherits(proto.vega.BuiltinAssetEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.BuiltinAssetEvent.displayName = 'proto.vega.BuiltinAssetEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20AssetList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ERC20AssetList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20AssetList.displayName = 'proto.vega.ERC20AssetList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20AssetDelist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ERC20AssetDelist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20AssetDelist.displayName = 'proto.vega.ERC20AssetDelist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20AssetLimitsUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ERC20AssetLimitsUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20AssetLimitsUpdated.displayName = 'proto.vega.ERC20AssetLimitsUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20Deposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ERC20Deposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20Deposit.displayName = 'proto.vega.ERC20Deposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20Withdrawal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ERC20Withdrawal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20Withdrawal.displayName = 'proto.vega.ERC20Withdrawal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.vega.ERC20Event.oneofGroups_);
};
goog.inherits(proto.vega.ERC20Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20Event.displayName = 'proto.vega.ERC20Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20SignerAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ERC20SignerAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20SignerAdded.displayName = 'proto.vega.ERC20SignerAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20SignerRemoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ERC20SignerRemoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20SignerRemoved.displayName = 'proto.vega.ERC20SignerRemoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20ThresholdSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ERC20ThresholdSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20ThresholdSet.displayName = 'proto.vega.ERC20ThresholdSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ERC20MultiSigEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.vega.ERC20MultiSigEvent.oneofGroups_);
};
goog.inherits(proto.vega.ERC20MultiSigEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ERC20MultiSigEvent.displayName = 'proto.vega.ERC20MultiSigEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.StakingEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.vega.StakingEvent.oneofGroups_);
};
goog.inherits(proto.vega.StakingEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.StakingEvent.displayName = 'proto.vega.StakingEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.StakeDeposited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.StakeDeposited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.StakeDeposited.displayName = 'proto.vega.StakeDeposited';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.StakeRemoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.StakeRemoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.StakeRemoved.displayName = 'proto.vega.StakeRemoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.StakeTotalSupply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.StakeTotalSupply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.StakeTotalSupply.displayName = 'proto.vega.StakeTotalSupply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.BuiltinAssetDeposit.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.BuiltinAssetDeposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.BuiltinAssetDeposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.BuiltinAssetDeposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    vegaAssetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partyId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.BuiltinAssetDeposit}
 */
proto.vega.BuiltinAssetDeposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.BuiltinAssetDeposit;
  return proto.vega.BuiltinAssetDeposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.BuiltinAssetDeposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.BuiltinAssetDeposit}
 */
proto.vega.BuiltinAssetDeposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartyId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.BuiltinAssetDeposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.BuiltinAssetDeposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.BuiltinAssetDeposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.BuiltinAssetDeposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVegaAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartyId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string vega_asset_id = 1;
 * @return {string}
 */
proto.vega.BuiltinAssetDeposit.prototype.getVegaAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.BuiltinAssetDeposit} returns this
 */
proto.vega.BuiltinAssetDeposit.prototype.setVegaAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string party_id = 2;
 * @return {string}
 */
proto.vega.BuiltinAssetDeposit.prototype.getPartyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.BuiltinAssetDeposit} returns this
 */
proto.vega.BuiltinAssetDeposit.prototype.setPartyId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.vega.BuiltinAssetDeposit.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.BuiltinAssetDeposit} returns this
 */
proto.vega.BuiltinAssetDeposit.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.BuiltinAssetWithdrawal.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.BuiltinAssetWithdrawal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.BuiltinAssetWithdrawal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.BuiltinAssetWithdrawal.toObject = function(includeInstance, msg) {
  var f, obj = {
    vegaAssetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partyId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.BuiltinAssetWithdrawal}
 */
proto.vega.BuiltinAssetWithdrawal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.BuiltinAssetWithdrawal;
  return proto.vega.BuiltinAssetWithdrawal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.BuiltinAssetWithdrawal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.BuiltinAssetWithdrawal}
 */
proto.vega.BuiltinAssetWithdrawal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartyId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.BuiltinAssetWithdrawal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.BuiltinAssetWithdrawal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.BuiltinAssetWithdrawal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.BuiltinAssetWithdrawal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVegaAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartyId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string vega_asset_id = 1;
 * @return {string}
 */
proto.vega.BuiltinAssetWithdrawal.prototype.getVegaAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.BuiltinAssetWithdrawal} returns this
 */
proto.vega.BuiltinAssetWithdrawal.prototype.setVegaAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string party_id = 2;
 * @return {string}
 */
proto.vega.BuiltinAssetWithdrawal.prototype.getPartyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.BuiltinAssetWithdrawal} returns this
 */
proto.vega.BuiltinAssetWithdrawal.prototype.setPartyId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.vega.BuiltinAssetWithdrawal.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.BuiltinAssetWithdrawal} returns this
 */
proto.vega.BuiltinAssetWithdrawal.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.BuiltinAssetEvent.oneofGroups_ = [[1001,1002]];

/**
 * @enum {number}
 */
proto.vega.BuiltinAssetEvent.ActionCase = {
  ACTION_NOT_SET: 0,
  DEPOSIT: 1001,
  WITHDRAWAL: 1002
};

/**
 * @return {proto.vega.BuiltinAssetEvent.ActionCase}
 */
proto.vega.BuiltinAssetEvent.prototype.getActionCase = function() {
  return /** @type {proto.vega.BuiltinAssetEvent.ActionCase} */(jspb.Message.computeOneofCase(this, proto.vega.BuiltinAssetEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.BuiltinAssetEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.BuiltinAssetEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.BuiltinAssetEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.BuiltinAssetEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    deposit: (f = msg.getDeposit()) && proto.vega.BuiltinAssetDeposit.toObject(includeInstance, f),
    withdrawal: (f = msg.getWithdrawal()) && proto.vega.BuiltinAssetWithdrawal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.BuiltinAssetEvent}
 */
proto.vega.BuiltinAssetEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.BuiltinAssetEvent;
  return proto.vega.BuiltinAssetEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.BuiltinAssetEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.BuiltinAssetEvent}
 */
proto.vega.BuiltinAssetEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1001:
      var value = new proto.vega.BuiltinAssetDeposit;
      reader.readMessage(value,proto.vega.BuiltinAssetDeposit.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    case 1002:
      var value = new proto.vega.BuiltinAssetWithdrawal;
      reader.readMessage(value,proto.vega.BuiltinAssetWithdrawal.deserializeBinaryFromReader);
      msg.setWithdrawal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.BuiltinAssetEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.BuiltinAssetEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.BuiltinAssetEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.BuiltinAssetEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.vega.BuiltinAssetDeposit.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawal();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.vega.BuiltinAssetWithdrawal.serializeBinaryToWriter
    );
  }
};


/**
 * optional BuiltinAssetDeposit deposit = 1001;
 * @return {?proto.vega.BuiltinAssetDeposit}
 */
proto.vega.BuiltinAssetEvent.prototype.getDeposit = function() {
  return /** @type{?proto.vega.BuiltinAssetDeposit} */ (
    jspb.Message.getWrapperField(this, proto.vega.BuiltinAssetDeposit, 1001));
};


/**
 * @param {?proto.vega.BuiltinAssetDeposit|undefined} value
 * @return {!proto.vega.BuiltinAssetEvent} returns this
*/
proto.vega.BuiltinAssetEvent.prototype.setDeposit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1001, proto.vega.BuiltinAssetEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.BuiltinAssetEvent} returns this
 */
proto.vega.BuiltinAssetEvent.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.BuiltinAssetEvent.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 1001) != null;
};


/**
 * optional BuiltinAssetWithdrawal withdrawal = 1002;
 * @return {?proto.vega.BuiltinAssetWithdrawal}
 */
proto.vega.BuiltinAssetEvent.prototype.getWithdrawal = function() {
  return /** @type{?proto.vega.BuiltinAssetWithdrawal} */ (
    jspb.Message.getWrapperField(this, proto.vega.BuiltinAssetWithdrawal, 1002));
};


/**
 * @param {?proto.vega.BuiltinAssetWithdrawal|undefined} value
 * @return {!proto.vega.BuiltinAssetEvent} returns this
*/
proto.vega.BuiltinAssetEvent.prototype.setWithdrawal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1002, proto.vega.BuiltinAssetEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.BuiltinAssetEvent} returns this
 */
proto.vega.BuiltinAssetEvent.prototype.clearWithdrawal = function() {
  return this.setWithdrawal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.BuiltinAssetEvent.prototype.hasWithdrawal = function() {
  return jspb.Message.getField(this, 1002) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20AssetList.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20AssetList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20AssetList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20AssetList.toObject = function(includeInstance, msg) {
  var f, obj = {
    vegaAssetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetSource: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20AssetList}
 */
proto.vega.ERC20AssetList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20AssetList;
  return proto.vega.ERC20AssetList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20AssetList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20AssetList}
 */
proto.vega.ERC20AssetList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20AssetList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20AssetList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20AssetList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20AssetList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVegaAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string vega_asset_id = 1;
 * @return {string}
 */
proto.vega.ERC20AssetList.prototype.getVegaAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20AssetList} returns this
 */
proto.vega.ERC20AssetList.prototype.setVegaAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset_source = 2;
 * @return {string}
 */
proto.vega.ERC20AssetList.prototype.getAssetSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20AssetList} returns this
 */
proto.vega.ERC20AssetList.prototype.setAssetSource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20AssetDelist.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20AssetDelist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20AssetDelist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20AssetDelist.toObject = function(includeInstance, msg) {
  var f, obj = {
    vegaAssetId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20AssetDelist}
 */
proto.vega.ERC20AssetDelist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20AssetDelist;
  return proto.vega.ERC20AssetDelist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20AssetDelist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20AssetDelist}
 */
proto.vega.ERC20AssetDelist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20AssetDelist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20AssetDelist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20AssetDelist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20AssetDelist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVegaAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string vega_asset_id = 1;
 * @return {string}
 */
proto.vega.ERC20AssetDelist.prototype.getVegaAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20AssetDelist} returns this
 */
proto.vega.ERC20AssetDelist.prototype.setVegaAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20AssetLimitsUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20AssetLimitsUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20AssetLimitsUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    vegaAssetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceEthereumAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lifetimeLimits: jspb.Message.getFieldWithDefault(msg, 3, ""),
    withdrawThreshold: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20AssetLimitsUpdated}
 */
proto.vega.ERC20AssetLimitsUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20AssetLimitsUpdated;
  return proto.vega.ERC20AssetLimitsUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20AssetLimitsUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20AssetLimitsUpdated}
 */
proto.vega.ERC20AssetLimitsUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceEthereumAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLifetimeLimits(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWithdrawThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20AssetLimitsUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20AssetLimitsUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20AssetLimitsUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVegaAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceEthereumAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLifetimeLimits();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWithdrawThreshold();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string vega_asset_id = 1;
 * @return {string}
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.getVegaAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20AssetLimitsUpdated} returns this
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.setVegaAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source_ethereum_address = 2;
 * @return {string}
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.getSourceEthereumAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20AssetLimitsUpdated} returns this
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.setSourceEthereumAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string lifetime_limits = 3;
 * @return {string}
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.getLifetimeLimits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20AssetLimitsUpdated} returns this
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.setLifetimeLimits = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string withdraw_threshold = 4;
 * @return {string}
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.getWithdrawThreshold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20AssetLimitsUpdated} returns this
 */
proto.vega.ERC20AssetLimitsUpdated.prototype.setWithdrawThreshold = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20Deposit.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20Deposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20Deposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20Deposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    vegaAssetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceEthereumAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetPartyId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20Deposit}
 */
proto.vega.ERC20Deposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20Deposit;
  return proto.vega.ERC20Deposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20Deposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20Deposit}
 */
proto.vega.ERC20Deposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceEthereumAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetPartyId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20Deposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20Deposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20Deposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20Deposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVegaAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceEthereumAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetPartyId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string vega_asset_id = 1;
 * @return {string}
 */
proto.vega.ERC20Deposit.prototype.getVegaAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20Deposit} returns this
 */
proto.vega.ERC20Deposit.prototype.setVegaAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source_ethereum_address = 2;
 * @return {string}
 */
proto.vega.ERC20Deposit.prototype.getSourceEthereumAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20Deposit} returns this
 */
proto.vega.ERC20Deposit.prototype.setSourceEthereumAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string target_party_id = 3;
 * @return {string}
 */
proto.vega.ERC20Deposit.prototype.getTargetPartyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20Deposit} returns this
 */
proto.vega.ERC20Deposit.prototype.setTargetPartyId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.vega.ERC20Deposit.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20Deposit} returns this
 */
proto.vega.ERC20Deposit.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20Withdrawal.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20Withdrawal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20Withdrawal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20Withdrawal.toObject = function(includeInstance, msg) {
  var f, obj = {
    vegaAssetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetEthereumAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    referenceNonce: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20Withdrawal}
 */
proto.vega.ERC20Withdrawal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20Withdrawal;
  return proto.vega.ERC20Withdrawal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20Withdrawal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20Withdrawal}
 */
proto.vega.ERC20Withdrawal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetEthereumAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20Withdrawal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20Withdrawal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20Withdrawal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20Withdrawal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVegaAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetEthereumAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReferenceNonce();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string vega_asset_id = 1;
 * @return {string}
 */
proto.vega.ERC20Withdrawal.prototype.getVegaAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20Withdrawal} returns this
 */
proto.vega.ERC20Withdrawal.prototype.setVegaAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string target_ethereum_address = 2;
 * @return {string}
 */
proto.vega.ERC20Withdrawal.prototype.getTargetEthereumAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20Withdrawal} returns this
 */
proto.vega.ERC20Withdrawal.prototype.setTargetEthereumAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reference_nonce = 3;
 * @return {string}
 */
proto.vega.ERC20Withdrawal.prototype.getReferenceNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20Withdrawal} returns this
 */
proto.vega.ERC20Withdrawal.prototype.setReferenceNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.ERC20Event.oneofGroups_ = [[1001,1002,1003,1004,1005,1006,1007]];

/**
 * @enum {number}
 */
proto.vega.ERC20Event.ActionCase = {
  ACTION_NOT_SET: 0,
  ASSET_LIST: 1001,
  ASSET_DELIST: 1002,
  DEPOSIT: 1003,
  WITHDRAWAL: 1004,
  ASSET_LIMITS_UPDATED: 1005,
  BRIDGE_STOPPED: 1006,
  BRIDGE_RESUMED: 1007
};

/**
 * @return {proto.vega.ERC20Event.ActionCase}
 */
proto.vega.ERC20Event.prototype.getActionCase = function() {
  return /** @type {proto.vega.ERC20Event.ActionCase} */(jspb.Message.computeOneofCase(this, proto.vega.ERC20Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20Event.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block: jspb.Message.getFieldWithDefault(msg, 2, 0),
    assetList: (f = msg.getAssetList()) && proto.vega.ERC20AssetList.toObject(includeInstance, f),
    assetDelist: (f = msg.getAssetDelist()) && proto.vega.ERC20AssetDelist.toObject(includeInstance, f),
    deposit: (f = msg.getDeposit()) && proto.vega.ERC20Deposit.toObject(includeInstance, f),
    withdrawal: (f = msg.getWithdrawal()) && proto.vega.ERC20Withdrawal.toObject(includeInstance, f),
    assetLimitsUpdated: (f = msg.getAssetLimitsUpdated()) && proto.vega.ERC20AssetLimitsUpdated.toObject(includeInstance, f),
    bridgeStopped: jspb.Message.getBooleanFieldWithDefault(msg, 1006, false),
    bridgeResumed: jspb.Message.getBooleanFieldWithDefault(msg, 1007, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20Event}
 */
proto.vega.ERC20Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20Event;
  return proto.vega.ERC20Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20Event}
 */
proto.vega.ERC20Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlock(value);
      break;
    case 1001:
      var value = new proto.vega.ERC20AssetList;
      reader.readMessage(value,proto.vega.ERC20AssetList.deserializeBinaryFromReader);
      msg.setAssetList(value);
      break;
    case 1002:
      var value = new proto.vega.ERC20AssetDelist;
      reader.readMessage(value,proto.vega.ERC20AssetDelist.deserializeBinaryFromReader);
      msg.setAssetDelist(value);
      break;
    case 1003:
      var value = new proto.vega.ERC20Deposit;
      reader.readMessage(value,proto.vega.ERC20Deposit.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    case 1004:
      var value = new proto.vega.ERC20Withdrawal;
      reader.readMessage(value,proto.vega.ERC20Withdrawal.deserializeBinaryFromReader);
      msg.setWithdrawal(value);
      break;
    case 1005:
      var value = new proto.vega.ERC20AssetLimitsUpdated;
      reader.readMessage(value,proto.vega.ERC20AssetLimitsUpdated.deserializeBinaryFromReader);
      msg.setAssetLimitsUpdated(value);
      break;
    case 1006:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBridgeStopped(value);
      break;
    case 1007:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBridgeResumed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAssetList();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.vega.ERC20AssetList.serializeBinaryToWriter
    );
  }
  f = message.getAssetDelist();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.vega.ERC20AssetDelist.serializeBinaryToWriter
    );
  }
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      1003,
      f,
      proto.vega.ERC20Deposit.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawal();
  if (f != null) {
    writer.writeMessage(
      1004,
      f,
      proto.vega.ERC20Withdrawal.serializeBinaryToWriter
    );
  }
  f = message.getAssetLimitsUpdated();
  if (f != null) {
    writer.writeMessage(
      1005,
      f,
      proto.vega.ERC20AssetLimitsUpdated.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1006));
  if (f != null) {
    writer.writeBool(
      1006,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1007));
  if (f != null) {
    writer.writeBool(
      1007,
      f
    );
  }
};


/**
 * optional uint64 index = 1;
 * @return {number}
 */
proto.vega.ERC20Event.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 block = 2;
 * @return {number}
 */
proto.vega.ERC20Event.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.setBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ERC20AssetList asset_list = 1001;
 * @return {?proto.vega.ERC20AssetList}
 */
proto.vega.ERC20Event.prototype.getAssetList = function() {
  return /** @type{?proto.vega.ERC20AssetList} */ (
    jspb.Message.getWrapperField(this, proto.vega.ERC20AssetList, 1001));
};


/**
 * @param {?proto.vega.ERC20AssetList|undefined} value
 * @return {!proto.vega.ERC20Event} returns this
*/
proto.vega.ERC20Event.prototype.setAssetList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1001, proto.vega.ERC20Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.clearAssetList = function() {
  return this.setAssetList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.hasAssetList = function() {
  return jspb.Message.getField(this, 1001) != null;
};


/**
 * optional ERC20AssetDelist asset_delist = 1002;
 * @return {?proto.vega.ERC20AssetDelist}
 */
proto.vega.ERC20Event.prototype.getAssetDelist = function() {
  return /** @type{?proto.vega.ERC20AssetDelist} */ (
    jspb.Message.getWrapperField(this, proto.vega.ERC20AssetDelist, 1002));
};


/**
 * @param {?proto.vega.ERC20AssetDelist|undefined} value
 * @return {!proto.vega.ERC20Event} returns this
*/
proto.vega.ERC20Event.prototype.setAssetDelist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1002, proto.vega.ERC20Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.clearAssetDelist = function() {
  return this.setAssetDelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.hasAssetDelist = function() {
  return jspb.Message.getField(this, 1002) != null;
};


/**
 * optional ERC20Deposit deposit = 1003;
 * @return {?proto.vega.ERC20Deposit}
 */
proto.vega.ERC20Event.prototype.getDeposit = function() {
  return /** @type{?proto.vega.ERC20Deposit} */ (
    jspb.Message.getWrapperField(this, proto.vega.ERC20Deposit, 1003));
};


/**
 * @param {?proto.vega.ERC20Deposit|undefined} value
 * @return {!proto.vega.ERC20Event} returns this
*/
proto.vega.ERC20Event.prototype.setDeposit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1003, proto.vega.ERC20Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 1003) != null;
};


/**
 * optional ERC20Withdrawal withdrawal = 1004;
 * @return {?proto.vega.ERC20Withdrawal}
 */
proto.vega.ERC20Event.prototype.getWithdrawal = function() {
  return /** @type{?proto.vega.ERC20Withdrawal} */ (
    jspb.Message.getWrapperField(this, proto.vega.ERC20Withdrawal, 1004));
};


/**
 * @param {?proto.vega.ERC20Withdrawal|undefined} value
 * @return {!proto.vega.ERC20Event} returns this
*/
proto.vega.ERC20Event.prototype.setWithdrawal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1004, proto.vega.ERC20Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.clearWithdrawal = function() {
  return this.setWithdrawal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.hasWithdrawal = function() {
  return jspb.Message.getField(this, 1004) != null;
};


/**
 * optional ERC20AssetLimitsUpdated asset_limits_updated = 1005;
 * @return {?proto.vega.ERC20AssetLimitsUpdated}
 */
proto.vega.ERC20Event.prototype.getAssetLimitsUpdated = function() {
  return /** @type{?proto.vega.ERC20AssetLimitsUpdated} */ (
    jspb.Message.getWrapperField(this, proto.vega.ERC20AssetLimitsUpdated, 1005));
};


/**
 * @param {?proto.vega.ERC20AssetLimitsUpdated|undefined} value
 * @return {!proto.vega.ERC20Event} returns this
*/
proto.vega.ERC20Event.prototype.setAssetLimitsUpdated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1005, proto.vega.ERC20Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.clearAssetLimitsUpdated = function() {
  return this.setAssetLimitsUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.hasAssetLimitsUpdated = function() {
  return jspb.Message.getField(this, 1005) != null;
};


/**
 * optional bool bridge_stopped = 1006;
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.getBridgeStopped = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1006, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.setBridgeStopped = function(value) {
  return jspb.Message.setOneofField(this, 1006, proto.vega.ERC20Event.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.clearBridgeStopped = function() {
  return jspb.Message.setOneofField(this, 1006, proto.vega.ERC20Event.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.hasBridgeStopped = function() {
  return jspb.Message.getField(this, 1006) != null;
};


/**
 * optional bool bridge_resumed = 1007;
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.getBridgeResumed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1007, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.setBridgeResumed = function(value) {
  return jspb.Message.setOneofField(this, 1007, proto.vega.ERC20Event.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vega.ERC20Event} returns this
 */
proto.vega.ERC20Event.prototype.clearBridgeResumed = function() {
  return jspb.Message.setOneofField(this, 1007, proto.vega.ERC20Event.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20Event.prototype.hasBridgeResumed = function() {
  return jspb.Message.getField(this, 1007) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20SignerAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20SignerAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20SignerAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20SignerAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    newSigner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blockTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20SignerAdded}
 */
proto.vega.ERC20SignerAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20SignerAdded;
  return proto.vega.ERC20SignerAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20SignerAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20SignerAdded}
 */
proto.vega.ERC20SignerAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewSigner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20SignerAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20SignerAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20SignerAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20SignerAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewSigner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlockTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string new_signer = 1;
 * @return {string}
 */
proto.vega.ERC20SignerAdded.prototype.getNewSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20SignerAdded} returns this
 */
proto.vega.ERC20SignerAdded.prototype.setNewSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.vega.ERC20SignerAdded.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20SignerAdded} returns this
 */
proto.vega.ERC20SignerAdded.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 block_time = 3;
 * @return {number}
 */
proto.vega.ERC20SignerAdded.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ERC20SignerAdded} returns this
 */
proto.vega.ERC20SignerAdded.prototype.setBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20SignerRemoved.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20SignerRemoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20SignerRemoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20SignerRemoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldSigner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blockTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20SignerRemoved}
 */
proto.vega.ERC20SignerRemoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20SignerRemoved;
  return proto.vega.ERC20SignerRemoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20SignerRemoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20SignerRemoved}
 */
proto.vega.ERC20SignerRemoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldSigner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20SignerRemoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20SignerRemoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20SignerRemoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20SignerRemoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldSigner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlockTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string old_signer = 1;
 * @return {string}
 */
proto.vega.ERC20SignerRemoved.prototype.getOldSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20SignerRemoved} returns this
 */
proto.vega.ERC20SignerRemoved.prototype.setOldSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.vega.ERC20SignerRemoved.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20SignerRemoved} returns this
 */
proto.vega.ERC20SignerRemoved.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 block_time = 3;
 * @return {number}
 */
proto.vega.ERC20SignerRemoved.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ERC20SignerRemoved} returns this
 */
proto.vega.ERC20SignerRemoved.prototype.setBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20ThresholdSet.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20ThresholdSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20ThresholdSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20ThresholdSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    newThreshold: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blockTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20ThresholdSet}
 */
proto.vega.ERC20ThresholdSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20ThresholdSet;
  return proto.vega.ERC20ThresholdSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20ThresholdSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20ThresholdSet}
 */
proto.vega.ERC20ThresholdSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewThreshold(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20ThresholdSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20ThresholdSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20ThresholdSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20ThresholdSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewThreshold();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlockTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional uint32 new_threshold = 1;
 * @return {number}
 */
proto.vega.ERC20ThresholdSet.prototype.getNewThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ERC20ThresholdSet} returns this
 */
proto.vega.ERC20ThresholdSet.prototype.setNewThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.vega.ERC20ThresholdSet.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ERC20ThresholdSet} returns this
 */
proto.vega.ERC20ThresholdSet.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 block_time = 3;
 * @return {number}
 */
proto.vega.ERC20ThresholdSet.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ERC20ThresholdSet} returns this
 */
proto.vega.ERC20ThresholdSet.prototype.setBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.ERC20MultiSigEvent.oneofGroups_ = [[1001,1002,1003]];

/**
 * @enum {number}
 */
proto.vega.ERC20MultiSigEvent.ActionCase = {
  ACTION_NOT_SET: 0,
  SIGNER_ADDED: 1001,
  SIGNER_REMOVED: 1002,
  THRESHOLD_SET: 1003
};

/**
 * @return {proto.vega.ERC20MultiSigEvent.ActionCase}
 */
proto.vega.ERC20MultiSigEvent.prototype.getActionCase = function() {
  return /** @type {proto.vega.ERC20MultiSigEvent.ActionCase} */(jspb.Message.computeOneofCase(this, proto.vega.ERC20MultiSigEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ERC20MultiSigEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ERC20MultiSigEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ERC20MultiSigEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20MultiSigEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block: jspb.Message.getFieldWithDefault(msg, 2, 0),
    signerAdded: (f = msg.getSignerAdded()) && proto.vega.ERC20SignerAdded.toObject(includeInstance, f),
    signerRemoved: (f = msg.getSignerRemoved()) && proto.vega.ERC20SignerRemoved.toObject(includeInstance, f),
    thresholdSet: (f = msg.getThresholdSet()) && proto.vega.ERC20ThresholdSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ERC20MultiSigEvent}
 */
proto.vega.ERC20MultiSigEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ERC20MultiSigEvent;
  return proto.vega.ERC20MultiSigEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ERC20MultiSigEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ERC20MultiSigEvent}
 */
proto.vega.ERC20MultiSigEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlock(value);
      break;
    case 1001:
      var value = new proto.vega.ERC20SignerAdded;
      reader.readMessage(value,proto.vega.ERC20SignerAdded.deserializeBinaryFromReader);
      msg.setSignerAdded(value);
      break;
    case 1002:
      var value = new proto.vega.ERC20SignerRemoved;
      reader.readMessage(value,proto.vega.ERC20SignerRemoved.deserializeBinaryFromReader);
      msg.setSignerRemoved(value);
      break;
    case 1003:
      var value = new proto.vega.ERC20ThresholdSet;
      reader.readMessage(value,proto.vega.ERC20ThresholdSet.deserializeBinaryFromReader);
      msg.setThresholdSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ERC20MultiSigEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ERC20MultiSigEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ERC20MultiSigEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ERC20MultiSigEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSignerAdded();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.vega.ERC20SignerAdded.serializeBinaryToWriter
    );
  }
  f = message.getSignerRemoved();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.vega.ERC20SignerRemoved.serializeBinaryToWriter
    );
  }
  f = message.getThresholdSet();
  if (f != null) {
    writer.writeMessage(
      1003,
      f,
      proto.vega.ERC20ThresholdSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 index = 1;
 * @return {number}
 */
proto.vega.ERC20MultiSigEvent.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ERC20MultiSigEvent} returns this
 */
proto.vega.ERC20MultiSigEvent.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 block = 2;
 * @return {number}
 */
proto.vega.ERC20MultiSigEvent.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ERC20MultiSigEvent} returns this
 */
proto.vega.ERC20MultiSigEvent.prototype.setBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ERC20SignerAdded signer_added = 1001;
 * @return {?proto.vega.ERC20SignerAdded}
 */
proto.vega.ERC20MultiSigEvent.prototype.getSignerAdded = function() {
  return /** @type{?proto.vega.ERC20SignerAdded} */ (
    jspb.Message.getWrapperField(this, proto.vega.ERC20SignerAdded, 1001));
};


/**
 * @param {?proto.vega.ERC20SignerAdded|undefined} value
 * @return {!proto.vega.ERC20MultiSigEvent} returns this
*/
proto.vega.ERC20MultiSigEvent.prototype.setSignerAdded = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1001, proto.vega.ERC20MultiSigEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ERC20MultiSigEvent} returns this
 */
proto.vega.ERC20MultiSigEvent.prototype.clearSignerAdded = function() {
  return this.setSignerAdded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20MultiSigEvent.prototype.hasSignerAdded = function() {
  return jspb.Message.getField(this, 1001) != null;
};


/**
 * optional ERC20SignerRemoved signer_removed = 1002;
 * @return {?proto.vega.ERC20SignerRemoved}
 */
proto.vega.ERC20MultiSigEvent.prototype.getSignerRemoved = function() {
  return /** @type{?proto.vega.ERC20SignerRemoved} */ (
    jspb.Message.getWrapperField(this, proto.vega.ERC20SignerRemoved, 1002));
};


/**
 * @param {?proto.vega.ERC20SignerRemoved|undefined} value
 * @return {!proto.vega.ERC20MultiSigEvent} returns this
*/
proto.vega.ERC20MultiSigEvent.prototype.setSignerRemoved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1002, proto.vega.ERC20MultiSigEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ERC20MultiSigEvent} returns this
 */
proto.vega.ERC20MultiSigEvent.prototype.clearSignerRemoved = function() {
  return this.setSignerRemoved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20MultiSigEvent.prototype.hasSignerRemoved = function() {
  return jspb.Message.getField(this, 1002) != null;
};


/**
 * optional ERC20ThresholdSet threshold_set = 1003;
 * @return {?proto.vega.ERC20ThresholdSet}
 */
proto.vega.ERC20MultiSigEvent.prototype.getThresholdSet = function() {
  return /** @type{?proto.vega.ERC20ThresholdSet} */ (
    jspb.Message.getWrapperField(this, proto.vega.ERC20ThresholdSet, 1003));
};


/**
 * @param {?proto.vega.ERC20ThresholdSet|undefined} value
 * @return {!proto.vega.ERC20MultiSigEvent} returns this
*/
proto.vega.ERC20MultiSigEvent.prototype.setThresholdSet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1003, proto.vega.ERC20MultiSigEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ERC20MultiSigEvent} returns this
 */
proto.vega.ERC20MultiSigEvent.prototype.clearThresholdSet = function() {
  return this.setThresholdSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ERC20MultiSigEvent.prototype.hasThresholdSet = function() {
  return jspb.Message.getField(this, 1003) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.StakingEvent.oneofGroups_ = [[1001,1002,1003]];

/**
 * @enum {number}
 */
proto.vega.StakingEvent.ActionCase = {
  ACTION_NOT_SET: 0,
  STAKE_DEPOSITED: 1001,
  STAKE_REMOVED: 1002,
  TOTAL_SUPPLY: 1003
};

/**
 * @return {proto.vega.StakingEvent.ActionCase}
 */
proto.vega.StakingEvent.prototype.getActionCase = function() {
  return /** @type {proto.vega.StakingEvent.ActionCase} */(jspb.Message.computeOneofCase(this, proto.vega.StakingEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.StakingEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.StakingEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.StakingEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.StakingEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stakeDeposited: (f = msg.getStakeDeposited()) && proto.vega.StakeDeposited.toObject(includeInstance, f),
    stakeRemoved: (f = msg.getStakeRemoved()) && proto.vega.StakeRemoved.toObject(includeInstance, f),
    totalSupply: (f = msg.getTotalSupply()) && proto.vega.StakeTotalSupply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.StakingEvent}
 */
proto.vega.StakingEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.StakingEvent;
  return proto.vega.StakingEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.StakingEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.StakingEvent}
 */
proto.vega.StakingEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlock(value);
      break;
    case 1001:
      var value = new proto.vega.StakeDeposited;
      reader.readMessage(value,proto.vega.StakeDeposited.deserializeBinaryFromReader);
      msg.setStakeDeposited(value);
      break;
    case 1002:
      var value = new proto.vega.StakeRemoved;
      reader.readMessage(value,proto.vega.StakeRemoved.deserializeBinaryFromReader);
      msg.setStakeRemoved(value);
      break;
    case 1003:
      var value = new proto.vega.StakeTotalSupply;
      reader.readMessage(value,proto.vega.StakeTotalSupply.deserializeBinaryFromReader);
      msg.setTotalSupply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.StakingEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.StakingEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.StakingEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.StakingEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStakeDeposited();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.vega.StakeDeposited.serializeBinaryToWriter
    );
  }
  f = message.getStakeRemoved();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.vega.StakeRemoved.serializeBinaryToWriter
    );
  }
  f = message.getTotalSupply();
  if (f != null) {
    writer.writeMessage(
      1003,
      f,
      proto.vega.StakeTotalSupply.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 index = 1;
 * @return {number}
 */
proto.vega.StakingEvent.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.StakingEvent} returns this
 */
proto.vega.StakingEvent.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 block = 2;
 * @return {number}
 */
proto.vega.StakingEvent.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.StakingEvent} returns this
 */
proto.vega.StakingEvent.prototype.setBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional StakeDeposited stake_deposited = 1001;
 * @return {?proto.vega.StakeDeposited}
 */
proto.vega.StakingEvent.prototype.getStakeDeposited = function() {
  return /** @type{?proto.vega.StakeDeposited} */ (
    jspb.Message.getWrapperField(this, proto.vega.StakeDeposited, 1001));
};


/**
 * @param {?proto.vega.StakeDeposited|undefined} value
 * @return {!proto.vega.StakingEvent} returns this
*/
proto.vega.StakingEvent.prototype.setStakeDeposited = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1001, proto.vega.StakingEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.StakingEvent} returns this
 */
proto.vega.StakingEvent.prototype.clearStakeDeposited = function() {
  return this.setStakeDeposited(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.StakingEvent.prototype.hasStakeDeposited = function() {
  return jspb.Message.getField(this, 1001) != null;
};


/**
 * optional StakeRemoved stake_removed = 1002;
 * @return {?proto.vega.StakeRemoved}
 */
proto.vega.StakingEvent.prototype.getStakeRemoved = function() {
  return /** @type{?proto.vega.StakeRemoved} */ (
    jspb.Message.getWrapperField(this, proto.vega.StakeRemoved, 1002));
};


/**
 * @param {?proto.vega.StakeRemoved|undefined} value
 * @return {!proto.vega.StakingEvent} returns this
*/
proto.vega.StakingEvent.prototype.setStakeRemoved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1002, proto.vega.StakingEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.StakingEvent} returns this
 */
proto.vega.StakingEvent.prototype.clearStakeRemoved = function() {
  return this.setStakeRemoved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.StakingEvent.prototype.hasStakeRemoved = function() {
  return jspb.Message.getField(this, 1002) != null;
};


/**
 * optional StakeTotalSupply total_supply = 1003;
 * @return {?proto.vega.StakeTotalSupply}
 */
proto.vega.StakingEvent.prototype.getTotalSupply = function() {
  return /** @type{?proto.vega.StakeTotalSupply} */ (
    jspb.Message.getWrapperField(this, proto.vega.StakeTotalSupply, 1003));
};


/**
 * @param {?proto.vega.StakeTotalSupply|undefined} value
 * @return {!proto.vega.StakingEvent} returns this
*/
proto.vega.StakingEvent.prototype.setTotalSupply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1003, proto.vega.StakingEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.StakingEvent} returns this
 */
proto.vega.StakingEvent.prototype.clearTotalSupply = function() {
  return this.setTotalSupply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.StakingEvent.prototype.hasTotalSupply = function() {
  return jspb.Message.getField(this, 1003) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.StakeDeposited.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.StakeDeposited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.StakeDeposited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.StakeDeposited.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethereumAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vegaPublicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    blockTime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.StakeDeposited}
 */
proto.vega.StakeDeposited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.StakeDeposited;
  return proto.vega.StakeDeposited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.StakeDeposited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.StakeDeposited}
 */
proto.vega.StakeDeposited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthereumAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.StakeDeposited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.StakeDeposited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.StakeDeposited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.StakeDeposited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEthereumAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVegaPublicKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBlockTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string ethereum_address = 1;
 * @return {string}
 */
proto.vega.StakeDeposited.prototype.getEthereumAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.StakeDeposited} returns this
 */
proto.vega.StakeDeposited.prototype.setEthereumAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vega_public_key = 2;
 * @return {string}
 */
proto.vega.StakeDeposited.prototype.getVegaPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.StakeDeposited} returns this
 */
proto.vega.StakeDeposited.prototype.setVegaPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.vega.StakeDeposited.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.StakeDeposited} returns this
 */
proto.vega.StakeDeposited.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 block_time = 4;
 * @return {number}
 */
proto.vega.StakeDeposited.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.StakeDeposited} returns this
 */
proto.vega.StakeDeposited.prototype.setBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.StakeRemoved.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.StakeRemoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.StakeRemoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.StakeRemoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethereumAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vegaPublicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    blockTime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.StakeRemoved}
 */
proto.vega.StakeRemoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.StakeRemoved;
  return proto.vega.StakeRemoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.StakeRemoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.StakeRemoved}
 */
proto.vega.StakeRemoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthereumAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.StakeRemoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.StakeRemoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.StakeRemoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.StakeRemoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEthereumAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVegaPublicKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBlockTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string ethereum_address = 1;
 * @return {string}
 */
proto.vega.StakeRemoved.prototype.getEthereumAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.StakeRemoved} returns this
 */
proto.vega.StakeRemoved.prototype.setEthereumAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vega_public_key = 2;
 * @return {string}
 */
proto.vega.StakeRemoved.prototype.getVegaPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.StakeRemoved} returns this
 */
proto.vega.StakeRemoved.prototype.setVegaPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.vega.StakeRemoved.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.StakeRemoved} returns this
 */
proto.vega.StakeRemoved.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 block_time = 4;
 * @return {number}
 */
proto.vega.StakeRemoved.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.StakeRemoved} returns this
 */
proto.vega.StakeRemoved.prototype.setBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.StakeTotalSupply.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.StakeTotalSupply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.StakeTotalSupply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.StakeTotalSupply.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalSupply: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.StakeTotalSupply}
 */
proto.vega.StakeTotalSupply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.StakeTotalSupply;
  return proto.vega.StakeTotalSupply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.StakeTotalSupply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.StakeTotalSupply}
 */
proto.vega.StakeTotalSupply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalSupply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.StakeTotalSupply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.StakeTotalSupply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.StakeTotalSupply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.StakeTotalSupply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalSupply();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string token_address = 1;
 * @return {string}
 */
proto.vega.StakeTotalSupply.prototype.getTokenAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.StakeTotalSupply} returns this
 */
proto.vega.StakeTotalSupply.prototype.setTokenAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string total_supply = 2;
 * @return {string}
 */
proto.vega.StakeTotalSupply.prototype.getTotalSupply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.StakeTotalSupply} returns this
 */
proto.vega.StakeTotalSupply.prototype.setTotalSupply = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.vega);
