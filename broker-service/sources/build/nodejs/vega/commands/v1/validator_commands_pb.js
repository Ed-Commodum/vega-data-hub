// source: vega/commands/v1/validator_commands.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vega_vega_pb = require('../../../vega/vega_pb.js');
goog.object.extend(proto, vega_vega_pb);
var vega_chain_events_pb = require('../../../vega/chain_events_pb.js');
goog.object.extend(proto, vega_chain_events_pb);
var vega_commands_v1_signature_pb = require('../../../vega/commands/v1/signature_pb.js');
goog.object.extend(proto, vega_commands_v1_signature_pb);
goog.exportSymbol('proto.vega.commands.v1.AnnounceNode', null, global);
goog.exportSymbol('proto.vega.commands.v1.ChainEvent', null, global);
goog.exportSymbol('proto.vega.commands.v1.ChainEvent.EventCase', null, global);
goog.exportSymbol('proto.vega.commands.v1.EthereumKeyRotateSubmission', null, global);
goog.exportSymbol('proto.vega.commands.v1.IssueSignatures', null, global);
goog.exportSymbol('proto.vega.commands.v1.KeyRotateSubmission', null, global);
goog.exportSymbol('proto.vega.commands.v1.NodeSignature', null, global);
goog.exportSymbol('proto.vega.commands.v1.NodeSignatureKind', null, global);
goog.exportSymbol('proto.vega.commands.v1.NodeVote', null, global);
goog.exportSymbol('proto.vega.commands.v1.NodeVote.Type', null, global);
goog.exportSymbol('proto.vega.commands.v1.ProtocolUpgradeProposal', null, global);
goog.exportSymbol('proto.vega.commands.v1.StateVariableProposal', null, global);
goog.exportSymbol('proto.vega.commands.v1.ValidatorHeartbeat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.ValidatorHeartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.ValidatorHeartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.ValidatorHeartbeat.displayName = 'proto.vega.commands.v1.ValidatorHeartbeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.AnnounceNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.AnnounceNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.AnnounceNode.displayName = 'proto.vega.commands.v1.AnnounceNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.NodeVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.NodeVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.NodeVote.displayName = 'proto.vega.commands.v1.NodeVote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.NodeSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.NodeSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.NodeSignature.displayName = 'proto.vega.commands.v1.NodeSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.ChainEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.vega.commands.v1.ChainEvent.oneofGroups_);
};
goog.inherits(proto.vega.commands.v1.ChainEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.ChainEvent.displayName = 'proto.vega.commands.v1.ChainEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.KeyRotateSubmission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.KeyRotateSubmission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.KeyRotateSubmission.displayName = 'proto.vega.commands.v1.KeyRotateSubmission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.EthereumKeyRotateSubmission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.EthereumKeyRotateSubmission.displayName = 'proto.vega.commands.v1.EthereumKeyRotateSubmission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.StateVariableProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.StateVariableProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.StateVariableProposal.displayName = 'proto.vega.commands.v1.StateVariableProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.ProtocolUpgradeProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.ProtocolUpgradeProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.ProtocolUpgradeProposal.displayName = 'proto.vega.commands.v1.ProtocolUpgradeProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.commands.v1.IssueSignatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.commands.v1.IssueSignatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.commands.v1.IssueSignatures.displayName = 'proto.vega.commands.v1.IssueSignatures';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.ValidatorHeartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.ValidatorHeartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.ValidatorHeartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ethereumSignature: (f = msg.getEthereumSignature()) && vega_commands_v1_signature_pb.Signature.toObject(includeInstance, f),
    vegaSignature: (f = msg.getVegaSignature()) && vega_commands_v1_signature_pb.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.ValidatorHeartbeat}
 */
proto.vega.commands.v1.ValidatorHeartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.ValidatorHeartbeat;
  return proto.vega.commands.v1.ValidatorHeartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.ValidatorHeartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.ValidatorHeartbeat}
 */
proto.vega.commands.v1.ValidatorHeartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = new vega_commands_v1_signature_pb.Signature;
      reader.readMessage(value,vega_commands_v1_signature_pb.Signature.deserializeBinaryFromReader);
      msg.setEthereumSignature(value);
      break;
    case 3:
      var value = new vega_commands_v1_signature_pb.Signature;
      reader.readMessage(value,vega_commands_v1_signature_pb.Signature.deserializeBinaryFromReader);
      msg.setVegaSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.ValidatorHeartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.ValidatorHeartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.ValidatorHeartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEthereumSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vega_commands_v1_signature_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getVegaSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vega_commands_v1_signature_pb.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.ValidatorHeartbeat} returns this
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Signature ethereum_signature = 2;
 * @return {?proto.vega.commands.v1.Signature}
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.getEthereumSignature = function() {
  return /** @type{?proto.vega.commands.v1.Signature} */ (
    jspb.Message.getWrapperField(this, vega_commands_v1_signature_pb.Signature, 2));
};


/**
 * @param {?proto.vega.commands.v1.Signature|undefined} value
 * @return {!proto.vega.commands.v1.ValidatorHeartbeat} returns this
*/
proto.vega.commands.v1.ValidatorHeartbeat.prototype.setEthereumSignature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.ValidatorHeartbeat} returns this
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.clearEthereumSignature = function() {
  return this.setEthereumSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.hasEthereumSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Signature vega_signature = 3;
 * @return {?proto.vega.commands.v1.Signature}
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.getVegaSignature = function() {
  return /** @type{?proto.vega.commands.v1.Signature} */ (
    jspb.Message.getWrapperField(this, vega_commands_v1_signature_pb.Signature, 3));
};


/**
 * @param {?proto.vega.commands.v1.Signature|undefined} value
 * @return {!proto.vega.commands.v1.ValidatorHeartbeat} returns this
*/
proto.vega.commands.v1.ValidatorHeartbeat.prototype.setVegaSignature = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.ValidatorHeartbeat} returns this
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.clearVegaSignature = function() {
  return this.setVegaSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.ValidatorHeartbeat.prototype.hasVegaSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.AnnounceNode.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.AnnounceNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.AnnounceNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.AnnounceNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    vegaPubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ethereumAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chainPubKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    infoUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    country: jspb.Message.getFieldWithDefault(msg, 5, ""),
    id: jspb.Message.getFieldWithDefault(msg, 6, ""),
    name: jspb.Message.getFieldWithDefault(msg, 7, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    vegaPubKeyIndex: jspb.Message.getFieldWithDefault(msg, 9, 0),
    fromEpoch: jspb.Message.getFieldWithDefault(msg, 10, 0),
    ethereumSignature: (f = msg.getEthereumSignature()) && vega_commands_v1_signature_pb.Signature.toObject(includeInstance, f),
    vegaSignature: (f = msg.getVegaSignature()) && vega_commands_v1_signature_pb.Signature.toObject(includeInstance, f),
    submitterAddress: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.AnnounceNode}
 */
proto.vega.commands.v1.AnnounceNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.AnnounceNode;
  return proto.vega.commands.v1.AnnounceNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.AnnounceNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.AnnounceNode}
 */
proto.vega.commands.v1.AnnounceNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaPubKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthereumAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainPubKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVegaPubKeyIndex(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromEpoch(value);
      break;
    case 11:
      var value = new vega_commands_v1_signature_pb.Signature;
      reader.readMessage(value,vega_commands_v1_signature_pb.Signature.deserializeBinaryFromReader);
      msg.setEthereumSignature(value);
      break;
    case 12:
      var value = new vega_commands_v1_signature_pb.Signature;
      reader.readMessage(value,vega_commands_v1_signature_pb.Signature.deserializeBinaryFromReader);
      msg.setVegaSignature(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubmitterAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.AnnounceNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.AnnounceNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.AnnounceNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.AnnounceNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVegaPubKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEthereumAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChainPubKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInfoUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getVegaPubKeyIndex();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getFromEpoch();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getEthereumSignature();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      vega_commands_v1_signature_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getVegaSignature();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      vega_commands_v1_signature_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getSubmitterAddress();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string vega_pub_key = 1;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getVegaPubKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setVegaPubKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ethereum_address = 2;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getEthereumAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setEthereumAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string chain_pub_key = 3;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getChainPubKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setChainPubKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string info_url = 4;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getInfoUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setInfoUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string country = 5;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string id = 6;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string avatar_url = 8;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setAvatarUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 vega_pub_key_index = 9;
 * @return {number}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getVegaPubKeyIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setVegaPubKeyIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 from_epoch = 10;
 * @return {number}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getFromEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setFromEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional Signature ethereum_signature = 11;
 * @return {?proto.vega.commands.v1.Signature}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getEthereumSignature = function() {
  return /** @type{?proto.vega.commands.v1.Signature} */ (
    jspb.Message.getWrapperField(this, vega_commands_v1_signature_pb.Signature, 11));
};


/**
 * @param {?proto.vega.commands.v1.Signature|undefined} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
*/
proto.vega.commands.v1.AnnounceNode.prototype.setEthereumSignature = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.clearEthereumSignature = function() {
  return this.setEthereumSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.AnnounceNode.prototype.hasEthereumSignature = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Signature vega_signature = 12;
 * @return {?proto.vega.commands.v1.Signature}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getVegaSignature = function() {
  return /** @type{?proto.vega.commands.v1.Signature} */ (
    jspb.Message.getWrapperField(this, vega_commands_v1_signature_pb.Signature, 12));
};


/**
 * @param {?proto.vega.commands.v1.Signature|undefined} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
*/
proto.vega.commands.v1.AnnounceNode.prototype.setVegaSignature = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.clearVegaSignature = function() {
  return this.setVegaSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.AnnounceNode.prototype.hasVegaSignature = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string submitter_address = 13;
 * @return {string}
 */
proto.vega.commands.v1.AnnounceNode.prototype.getSubmitterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.AnnounceNode} returns this
 */
proto.vega.commands.v1.AnnounceNode.prototype.setSubmitterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.NodeVote.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.NodeVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.NodeVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.NodeVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.NodeVote}
 */
proto.vega.commands.v1.NodeVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.NodeVote;
  return proto.vega.commands.v1.NodeVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.NodeVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.NodeVote}
 */
proto.vega.commands.v1.NodeVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReference(value);
      break;
    case 3:
      var value = /** @type {!proto.vega.commands.v1.NodeVote.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.NodeVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.NodeVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.NodeVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.NodeVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vega.commands.v1.NodeVote.Type = {
  TYPE_UNSPECIFIED: 0,
  TYPE_STAKE_DEPOSITED: 1,
  TYPE_STAKE_REMOVED: 2,
  TYPE_FUNDS_DEPOSITED: 3,
  TYPE_SIGNER_ADDED: 4,
  TYPE_SIGNER_REMOVED: 5,
  TYPE_BRIDGE_STOPPED: 6,
  TYPE_BRIDGE_RESUMED: 7,
  TYPE_ASSET_LISTED: 8,
  TYPE_LIMITS_UPDATED: 9,
  TYPE_STAKE_TOTAL_SUPPLY: 10,
  TYPE_SIGNER_THRESHOLD_SET: 11,
  TYPE_GOVERNANCE_VALIDATE_ASSET: 12
};

/**
 * optional string reference = 2;
 * @return {string}
 */
proto.vega.commands.v1.NodeVote.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.NodeVote} returns this
 */
proto.vega.commands.v1.NodeVote.prototype.setReference = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.vega.commands.v1.NodeVote.Type}
 */
proto.vega.commands.v1.NodeVote.prototype.getType = function() {
  return /** @type {!proto.vega.commands.v1.NodeVote.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.vega.commands.v1.NodeVote.Type} value
 * @return {!proto.vega.commands.v1.NodeVote} returns this
 */
proto.vega.commands.v1.NodeVote.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.NodeSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.NodeSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.NodeSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.NodeSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sig: msg.getSig_asB64(),
    kind: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.NodeSignature}
 */
proto.vega.commands.v1.NodeSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.NodeSignature;
  return proto.vega.commands.v1.NodeSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.NodeSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.NodeSignature}
 */
proto.vega.commands.v1.NodeSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 3:
      var value = /** @type {!proto.vega.commands.v1.NodeSignatureKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.NodeSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.NodeSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.NodeSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.NodeSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.commands.v1.NodeSignature.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.NodeSignature} returns this
 */
proto.vega.commands.v1.NodeSignature.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.vega.commands.v1.NodeSignature.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sig = 2;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.vega.commands.v1.NodeSignature.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.NodeSignature.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.commands.v1.NodeSignature} returns this
 */
proto.vega.commands.v1.NodeSignature.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional NodeSignatureKind kind = 3;
 * @return {!proto.vega.commands.v1.NodeSignatureKind}
 */
proto.vega.commands.v1.NodeSignature.prototype.getKind = function() {
  return /** @type {!proto.vega.commands.v1.NodeSignatureKind} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.vega.commands.v1.NodeSignatureKind} value
 * @return {!proto.vega.commands.v1.NodeSignature} returns this
 */
proto.vega.commands.v1.NodeSignature.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.commands.v1.ChainEvent.oneofGroups_ = [[1001,1002,1005,1006]];

/**
 * @enum {number}
 */
proto.vega.commands.v1.ChainEvent.EventCase = {
  EVENT_NOT_SET: 0,
  BUILTIN: 1001,
  ERC20: 1002,
  STAKING_EVENT: 1005,
  ERC20_MULTISIG: 1006
};

/**
 * @return {proto.vega.commands.v1.ChainEvent.EventCase}
 */
proto.vega.commands.v1.ChainEvent.prototype.getEventCase = function() {
  return /** @type {proto.vega.commands.v1.ChainEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.vega.commands.v1.ChainEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.ChainEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.ChainEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.ChainEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.ChainEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    txId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    builtin: (f = msg.getBuiltin()) && vega_chain_events_pb.BuiltinAssetEvent.toObject(includeInstance, f),
    erc20: (f = msg.getErc20()) && vega_chain_events_pb.ERC20Event.toObject(includeInstance, f),
    stakingEvent: (f = msg.getStakingEvent()) && vega_chain_events_pb.StakingEvent.toObject(includeInstance, f),
    erc20Multisig: (f = msg.getErc20Multisig()) && vega_chain_events_pb.ERC20MultiSigEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.ChainEvent}
 */
proto.vega.commands.v1.ChainEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.ChainEvent;
  return proto.vega.commands.v1.ChainEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.ChainEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.ChainEvent}
 */
proto.vega.commands.v1.ChainEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 1001:
      var value = new vega_chain_events_pb.BuiltinAssetEvent;
      reader.readMessage(value,vega_chain_events_pb.BuiltinAssetEvent.deserializeBinaryFromReader);
      msg.setBuiltin(value);
      break;
    case 1002:
      var value = new vega_chain_events_pb.ERC20Event;
      reader.readMessage(value,vega_chain_events_pb.ERC20Event.deserializeBinaryFromReader);
      msg.setErc20(value);
      break;
    case 1005:
      var value = new vega_chain_events_pb.StakingEvent;
      reader.readMessage(value,vega_chain_events_pb.StakingEvent.deserializeBinaryFromReader);
      msg.setStakingEvent(value);
      break;
    case 1006:
      var value = new vega_chain_events_pb.ERC20MultiSigEvent;
      reader.readMessage(value,vega_chain_events_pb.ERC20MultiSigEvent.deserializeBinaryFromReader);
      msg.setErc20Multisig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.ChainEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.ChainEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.ChainEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.ChainEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBuiltin();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      vega_chain_events_pb.BuiltinAssetEvent.serializeBinaryToWriter
    );
  }
  f = message.getErc20();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      vega_chain_events_pb.ERC20Event.serializeBinaryToWriter
    );
  }
  f = message.getStakingEvent();
  if (f != null) {
    writer.writeMessage(
      1005,
      f,
      vega_chain_events_pb.StakingEvent.serializeBinaryToWriter
    );
  }
  f = message.getErc20Multisig();
  if (f != null) {
    writer.writeMessage(
      1006,
      f,
      vega_chain_events_pb.ERC20MultiSigEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tx_id = 1;
 * @return {string}
 */
proto.vega.commands.v1.ChainEvent.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
 */
proto.vega.commands.v1.ChainEvent.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.vega.commands.v1.ChainEvent.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
 */
proto.vega.commands.v1.ChainEvent.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional vega.BuiltinAssetEvent builtin = 1001;
 * @return {?proto.vega.BuiltinAssetEvent}
 */
proto.vega.commands.v1.ChainEvent.prototype.getBuiltin = function() {
  return /** @type{?proto.vega.BuiltinAssetEvent} */ (
    jspb.Message.getWrapperField(this, vega_chain_events_pb.BuiltinAssetEvent, 1001));
};


/**
 * @param {?proto.vega.BuiltinAssetEvent|undefined} value
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
*/
proto.vega.commands.v1.ChainEvent.prototype.setBuiltin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1001, proto.vega.commands.v1.ChainEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
 */
proto.vega.commands.v1.ChainEvent.prototype.clearBuiltin = function() {
  return this.setBuiltin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.ChainEvent.prototype.hasBuiltin = function() {
  return jspb.Message.getField(this, 1001) != null;
};


/**
 * optional vega.ERC20Event erc20 = 1002;
 * @return {?proto.vega.ERC20Event}
 */
proto.vega.commands.v1.ChainEvent.prototype.getErc20 = function() {
  return /** @type{?proto.vega.ERC20Event} */ (
    jspb.Message.getWrapperField(this, vega_chain_events_pb.ERC20Event, 1002));
};


/**
 * @param {?proto.vega.ERC20Event|undefined} value
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
*/
proto.vega.commands.v1.ChainEvent.prototype.setErc20 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1002, proto.vega.commands.v1.ChainEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
 */
proto.vega.commands.v1.ChainEvent.prototype.clearErc20 = function() {
  return this.setErc20(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.ChainEvent.prototype.hasErc20 = function() {
  return jspb.Message.getField(this, 1002) != null;
};


/**
 * optional vega.StakingEvent staking_event = 1005;
 * @return {?proto.vega.StakingEvent}
 */
proto.vega.commands.v1.ChainEvent.prototype.getStakingEvent = function() {
  return /** @type{?proto.vega.StakingEvent} */ (
    jspb.Message.getWrapperField(this, vega_chain_events_pb.StakingEvent, 1005));
};


/**
 * @param {?proto.vega.StakingEvent|undefined} value
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
*/
proto.vega.commands.v1.ChainEvent.prototype.setStakingEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1005, proto.vega.commands.v1.ChainEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
 */
proto.vega.commands.v1.ChainEvent.prototype.clearStakingEvent = function() {
  return this.setStakingEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.ChainEvent.prototype.hasStakingEvent = function() {
  return jspb.Message.getField(this, 1005) != null;
};


/**
 * optional vega.ERC20MultiSigEvent erc20_multisig = 1006;
 * @return {?proto.vega.ERC20MultiSigEvent}
 */
proto.vega.commands.v1.ChainEvent.prototype.getErc20Multisig = function() {
  return /** @type{?proto.vega.ERC20MultiSigEvent} */ (
    jspb.Message.getWrapperField(this, vega_chain_events_pb.ERC20MultiSigEvent, 1006));
};


/**
 * @param {?proto.vega.ERC20MultiSigEvent|undefined} value
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
*/
proto.vega.commands.v1.ChainEvent.prototype.setErc20Multisig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1006, proto.vega.commands.v1.ChainEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.ChainEvent} returns this
 */
proto.vega.commands.v1.ChainEvent.prototype.clearErc20Multisig = function() {
  return this.setErc20Multisig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.ChainEvent.prototype.hasErc20Multisig = function() {
  return jspb.Message.getField(this, 1006) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.KeyRotateSubmission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.KeyRotateSubmission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.KeyRotateSubmission.toObject = function(includeInstance, msg) {
  var f, obj = {
    newPubKeyIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetBlock: jspb.Message.getFieldWithDefault(msg, 2, 0),
    newPubKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    currentPubKeyHash: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.KeyRotateSubmission}
 */
proto.vega.commands.v1.KeyRotateSubmission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.KeyRotateSubmission;
  return proto.vega.commands.v1.KeyRotateSubmission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.KeyRotateSubmission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.KeyRotateSubmission}
 */
proto.vega.commands.v1.KeyRotateSubmission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewPubKeyIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTargetBlock(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPubKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentPubKeyHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.KeyRotateSubmission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.KeyRotateSubmission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.KeyRotateSubmission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewPubKeyIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTargetBlock();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNewPubKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCurrentPubKeyHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 new_pub_key_index = 1;
 * @return {number}
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.getNewPubKeyIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.commands.v1.KeyRotateSubmission} returns this
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.setNewPubKeyIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 target_block = 2;
 * @return {number}
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.getTargetBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.commands.v1.KeyRotateSubmission} returns this
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.setTargetBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string new_pub_key = 3;
 * @return {string}
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.getNewPubKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.KeyRotateSubmission} returns this
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.setNewPubKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string current_pub_key_hash = 4;
 * @return {string}
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.getCurrentPubKeyHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.KeyRotateSubmission} returns this
 */
proto.vega.commands.v1.KeyRotateSubmission.prototype.setCurrentPubKeyHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.EthereumKeyRotateSubmission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.EthereumKeyRotateSubmission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetBlock: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    currentAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    submitterAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ethereumSignature: (f = msg.getEthereumSignature()) && vega_commands_v1_signature_pb.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.EthereumKeyRotateSubmission}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.EthereumKeyRotateSubmission;
  return proto.vega.commands.v1.EthereumKeyRotateSubmission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.EthereumKeyRotateSubmission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.EthereumKeyRotateSubmission}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTargetBlock(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubmitterAddress(value);
      break;
    case 5:
      var value = new vega_commands_v1_signature_pb.Signature;
      reader.readMessage(value,vega_commands_v1_signature_pb.Signature.deserializeBinaryFromReader);
      msg.setEthereumSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.EthereumKeyRotateSubmission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.EthereumKeyRotateSubmission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetBlock();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNewAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurrentAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubmitterAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEthereumSignature();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      vega_commands_v1_signature_pb.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 target_block = 1;
 * @return {number}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.getTargetBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.commands.v1.EthereumKeyRotateSubmission} returns this
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.setTargetBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string new_address = 2;
 * @return {string}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.getNewAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.EthereumKeyRotateSubmission} returns this
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.setNewAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string current_address = 3;
 * @return {string}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.getCurrentAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.EthereumKeyRotateSubmission} returns this
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.setCurrentAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string submitter_address = 4;
 * @return {string}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.getSubmitterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.EthereumKeyRotateSubmission} returns this
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.setSubmitterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Signature ethereum_signature = 5;
 * @return {?proto.vega.commands.v1.Signature}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.getEthereumSignature = function() {
  return /** @type{?proto.vega.commands.v1.Signature} */ (
    jspb.Message.getWrapperField(this, vega_commands_v1_signature_pb.Signature, 5));
};


/**
 * @param {?proto.vega.commands.v1.Signature|undefined} value
 * @return {!proto.vega.commands.v1.EthereumKeyRotateSubmission} returns this
*/
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.setEthereumSignature = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.EthereumKeyRotateSubmission} returns this
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.clearEthereumSignature = function() {
  return this.setEthereumSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.EthereumKeyRotateSubmission.prototype.hasEthereumSignature = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.StateVariableProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.StateVariableProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.StateVariableProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.StateVariableProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && vega_vega_pb.StateValueProposal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.StateVariableProposal}
 */
proto.vega.commands.v1.StateVariableProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.StateVariableProposal;
  return proto.vega.commands.v1.StateVariableProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.StateVariableProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.StateVariableProposal}
 */
proto.vega.commands.v1.StateVariableProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vega_vega_pb.StateValueProposal;
      reader.readMessage(value,vega_vega_pb.StateValueProposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.StateVariableProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.StateVariableProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.StateVariableProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.StateVariableProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vega_vega_pb.StateValueProposal.serializeBinaryToWriter
    );
  }
};


/**
 * optional vega.StateValueProposal proposal = 1;
 * @return {?proto.vega.StateValueProposal}
 */
proto.vega.commands.v1.StateVariableProposal.prototype.getProposal = function() {
  return /** @type{?proto.vega.StateValueProposal} */ (
    jspb.Message.getWrapperField(this, vega_vega_pb.StateValueProposal, 1));
};


/**
 * @param {?proto.vega.StateValueProposal|undefined} value
 * @return {!proto.vega.commands.v1.StateVariableProposal} returns this
*/
proto.vega.commands.v1.StateVariableProposal.prototype.setProposal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.commands.v1.StateVariableProposal} returns this
 */
proto.vega.commands.v1.StateVariableProposal.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.commands.v1.StateVariableProposal.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.ProtocolUpgradeProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.ProtocolUpgradeProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    upgradeBlockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vegaReleaseTag: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.ProtocolUpgradeProposal}
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.ProtocolUpgradeProposal;
  return proto.vega.commands.v1.ProtocolUpgradeProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.ProtocolUpgradeProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.ProtocolUpgradeProposal}
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpgradeBlockHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVegaReleaseTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.ProtocolUpgradeProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.ProtocolUpgradeProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpgradeBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVegaReleaseTag();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 upgrade_block_height = 1;
 * @return {number}
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.prototype.getUpgradeBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.commands.v1.ProtocolUpgradeProposal} returns this
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.prototype.setUpgradeBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string vega_release_tag = 2;
 * @return {string}
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.prototype.getVegaReleaseTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.ProtocolUpgradeProposal} returns this
 */
proto.vega.commands.v1.ProtocolUpgradeProposal.prototype.setVegaReleaseTag = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.commands.v1.IssueSignatures.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.commands.v1.IssueSignatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.commands.v1.IssueSignatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.IssueSignatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    submitter: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    validatorNodeId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.commands.v1.IssueSignatures}
 */
proto.vega.commands.v1.IssueSignatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.commands.v1.IssueSignatures;
  return proto.vega.commands.v1.IssueSignatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.commands.v1.IssueSignatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.commands.v1.IssueSignatures}
 */
proto.vega.commands.v1.IssueSignatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubmitter(value);
      break;
    case 2:
      var value = /** @type {!proto.vega.commands.v1.NodeSignatureKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.commands.v1.IssueSignatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.commands.v1.IssueSignatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.commands.v1.IssueSignatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.commands.v1.IssueSignatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmitter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getValidatorNodeId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string submitter = 1;
 * @return {string}
 */
proto.vega.commands.v1.IssueSignatures.prototype.getSubmitter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.IssueSignatures} returns this
 */
proto.vega.commands.v1.IssueSignatures.prototype.setSubmitter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NodeSignatureKind kind = 2;
 * @return {!proto.vega.commands.v1.NodeSignatureKind}
 */
proto.vega.commands.v1.IssueSignatures.prototype.getKind = function() {
  return /** @type {!proto.vega.commands.v1.NodeSignatureKind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.vega.commands.v1.NodeSignatureKind} value
 * @return {!proto.vega.commands.v1.IssueSignatures} returns this
 */
proto.vega.commands.v1.IssueSignatures.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string validator_node_id = 3;
 * @return {string}
 */
proto.vega.commands.v1.IssueSignatures.prototype.getValidatorNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.commands.v1.IssueSignatures} returns this
 */
proto.vega.commands.v1.IssueSignatures.prototype.setValidatorNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.vega.commands.v1.NodeSignatureKind = {
  NODE_SIGNATURE_KIND_UNSPECIFIED: 0,
  NODE_SIGNATURE_KIND_ASSET_NEW: 1,
  NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL: 2,
  NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED: 3,
  NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED: 4,
  NODE_SIGNATURE_KIND_ASSET_UPDATE: 5
};

goog.object.extend(exports, proto.vega.commands.v1);
