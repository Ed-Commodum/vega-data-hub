// source: vega/data_source.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vega_data_v1_spec_pb = require('../vega/data/v1/spec_pb.js');
goog.object.extend(proto, vega_data_v1_spec_pb);
var vega_data_v1_data_pb = require('../vega/data/v1/data_pb.js');
goog.object.extend(proto, vega_data_v1_data_pb);
goog.exportSymbol('proto.vega.DataSourceDefinition', null, global);
goog.exportSymbol('proto.vega.DataSourceDefinition.SourceTypeCase', null, global);
goog.exportSymbol('proto.vega.DataSourceDefinitionExternal', null, global);
goog.exportSymbol('proto.vega.DataSourceDefinitionExternal.SourceTypeCase', null, global);
goog.exportSymbol('proto.vega.DataSourceDefinitionInternal', null, global);
goog.exportSymbol('proto.vega.DataSourceDefinitionInternal.SourceTypeCase', null, global);
goog.exportSymbol('proto.vega.DataSourceSpec', null, global);
goog.exportSymbol('proto.vega.DataSourceSpec.Status', null, global);
goog.exportSymbol('proto.vega.DataSourceSpecConfiguration', null, global);
goog.exportSymbol('proto.vega.DataSourceSpecConfigurationTime', null, global);
goog.exportSymbol('proto.vega.ExternalDataSourceSpec', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.DataSourceDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.DataSourceDefinition.oneofGroups_);
};
goog.inherits(proto.vega.DataSourceDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.DataSourceDefinition.displayName = 'proto.vega.DataSourceDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.DataSourceSpecConfigurationTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.DataSourceSpecConfigurationTime.repeatedFields_, null);
};
goog.inherits(proto.vega.DataSourceSpecConfigurationTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.DataSourceSpecConfigurationTime.displayName = 'proto.vega.DataSourceSpecConfigurationTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.DataSourceDefinitionInternal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.DataSourceDefinitionInternal.oneofGroups_);
};
goog.inherits(proto.vega.DataSourceDefinitionInternal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.DataSourceDefinitionInternal.displayName = 'proto.vega.DataSourceDefinitionInternal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.DataSourceDefinitionExternal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.DataSourceDefinitionExternal.oneofGroups_);
};
goog.inherits(proto.vega.DataSourceDefinitionExternal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.DataSourceDefinitionExternal.displayName = 'proto.vega.DataSourceDefinitionExternal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.DataSourceSpecConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.DataSourceSpecConfiguration.repeatedFields_, null);
};
goog.inherits(proto.vega.DataSourceSpecConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.DataSourceSpecConfiguration.displayName = 'proto.vega.DataSourceSpecConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.DataSourceSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.DataSourceSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.DataSourceSpec.displayName = 'proto.vega.DataSourceSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ExternalDataSourceSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ExternalDataSourceSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ExternalDataSourceSpec.displayName = 'proto.vega.ExternalDataSourceSpec';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.DataSourceDefinition.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.vega.DataSourceDefinition.SourceTypeCase = {
  SOURCE_TYPE_NOT_SET: 0,
  INTERNAL: 1,
  EXTERNAL: 2
};

/**
 * @return {proto.vega.DataSourceDefinition.SourceTypeCase}
 */
proto.vega.DataSourceDefinition.prototype.getSourceTypeCase = function() {
  return /** @type {proto.vega.DataSourceDefinition.SourceTypeCase} */(jspb.Message.computeOneofCase(this, proto.vega.DataSourceDefinition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.DataSourceDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.DataSourceDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.DataSourceDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    internal: (f = msg.getInternal()) && proto.vega.DataSourceDefinitionInternal.toObject(includeInstance, f),
    external: (f = msg.getExternal()) && proto.vega.DataSourceDefinitionExternal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.DataSourceDefinition}
 */
proto.vega.DataSourceDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.DataSourceDefinition;
  return proto.vega.DataSourceDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.DataSourceDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.DataSourceDefinition}
 */
proto.vega.DataSourceDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.DataSourceDefinitionInternal;
      reader.readMessage(value,proto.vega.DataSourceDefinitionInternal.deserializeBinaryFromReader);
      msg.setInternal(value);
      break;
    case 2:
      var value = new proto.vega.DataSourceDefinitionExternal;
      reader.readMessage(value,proto.vega.DataSourceDefinitionExternal.deserializeBinaryFromReader);
      msg.setExternal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.DataSourceDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.DataSourceDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.DataSourceDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInternal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.DataSourceDefinitionInternal.serializeBinaryToWriter
    );
  }
  f = message.getExternal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vega.DataSourceDefinitionExternal.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataSourceDefinitionInternal internal = 1;
 * @return {?proto.vega.DataSourceDefinitionInternal}
 */
proto.vega.DataSourceDefinition.prototype.getInternal = function() {
  return /** @type{?proto.vega.DataSourceDefinitionInternal} */ (
    jspb.Message.getWrapperField(this, proto.vega.DataSourceDefinitionInternal, 1));
};


/**
 * @param {?proto.vega.DataSourceDefinitionInternal|undefined} value
 * @return {!proto.vega.DataSourceDefinition} returns this
*/
proto.vega.DataSourceDefinition.prototype.setInternal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.vega.DataSourceDefinition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.DataSourceDefinition} returns this
 */
proto.vega.DataSourceDefinition.prototype.clearInternal = function() {
  return this.setInternal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.DataSourceDefinition.prototype.hasInternal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataSourceDefinitionExternal external = 2;
 * @return {?proto.vega.DataSourceDefinitionExternal}
 */
proto.vega.DataSourceDefinition.prototype.getExternal = function() {
  return /** @type{?proto.vega.DataSourceDefinitionExternal} */ (
    jspb.Message.getWrapperField(this, proto.vega.DataSourceDefinitionExternal, 2));
};


/**
 * @param {?proto.vega.DataSourceDefinitionExternal|undefined} value
 * @return {!proto.vega.DataSourceDefinition} returns this
*/
proto.vega.DataSourceDefinition.prototype.setExternal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.vega.DataSourceDefinition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.DataSourceDefinition} returns this
 */
proto.vega.DataSourceDefinition.prototype.clearExternal = function() {
  return this.setExternal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.DataSourceDefinition.prototype.hasExternal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.DataSourceSpecConfigurationTime.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.DataSourceSpecConfigurationTime.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.DataSourceSpecConfigurationTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.DataSourceSpecConfigurationTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceSpecConfigurationTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    vega_data_v1_spec_pb.Condition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.DataSourceSpecConfigurationTime}
 */
proto.vega.DataSourceSpecConfigurationTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.DataSourceSpecConfigurationTime;
  return proto.vega.DataSourceSpecConfigurationTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.DataSourceSpecConfigurationTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.DataSourceSpecConfigurationTime}
 */
proto.vega.DataSourceSpecConfigurationTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vega_data_v1_spec_pb.Condition;
      reader.readMessage(value,vega_data_v1_spec_pb.Condition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.DataSourceSpecConfigurationTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.DataSourceSpecConfigurationTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.DataSourceSpecConfigurationTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceSpecConfigurationTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vega_data_v1_spec_pb.Condition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated data.v1.Condition conditions = 1;
 * @return {!Array<!proto.vega.data.v1.Condition>}
 */
proto.vega.DataSourceSpecConfigurationTime.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.vega.data.v1.Condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, vega_data_v1_spec_pb.Condition, 1));
};


/**
 * @param {!Array<!proto.vega.data.v1.Condition>} value
 * @return {!proto.vega.DataSourceSpecConfigurationTime} returns this
*/
proto.vega.DataSourceSpecConfigurationTime.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.data.v1.Condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.data.v1.Condition}
 */
proto.vega.DataSourceSpecConfigurationTime.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.data.v1.Condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.DataSourceSpecConfigurationTime} returns this
 */
proto.vega.DataSourceSpecConfigurationTime.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.DataSourceDefinitionInternal.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.vega.DataSourceDefinitionInternal.SourceTypeCase = {
  SOURCE_TYPE_NOT_SET: 0,
  TIME: 1
};

/**
 * @return {proto.vega.DataSourceDefinitionInternal.SourceTypeCase}
 */
proto.vega.DataSourceDefinitionInternal.prototype.getSourceTypeCase = function() {
  return /** @type {proto.vega.DataSourceDefinitionInternal.SourceTypeCase} */(jspb.Message.computeOneofCase(this, proto.vega.DataSourceDefinitionInternal.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.DataSourceDefinitionInternal.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.DataSourceDefinitionInternal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.DataSourceDefinitionInternal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceDefinitionInternal.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && proto.vega.DataSourceSpecConfigurationTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.DataSourceDefinitionInternal}
 */
proto.vega.DataSourceDefinitionInternal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.DataSourceDefinitionInternal;
  return proto.vega.DataSourceDefinitionInternal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.DataSourceDefinitionInternal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.DataSourceDefinitionInternal}
 */
proto.vega.DataSourceDefinitionInternal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.DataSourceSpecConfigurationTime;
      reader.readMessage(value,proto.vega.DataSourceSpecConfigurationTime.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.DataSourceDefinitionInternal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.DataSourceDefinitionInternal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.DataSourceDefinitionInternal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceDefinitionInternal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.DataSourceSpecConfigurationTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataSourceSpecConfigurationTime time = 1;
 * @return {?proto.vega.DataSourceSpecConfigurationTime}
 */
proto.vega.DataSourceDefinitionInternal.prototype.getTime = function() {
  return /** @type{?proto.vega.DataSourceSpecConfigurationTime} */ (
    jspb.Message.getWrapperField(this, proto.vega.DataSourceSpecConfigurationTime, 1));
};


/**
 * @param {?proto.vega.DataSourceSpecConfigurationTime|undefined} value
 * @return {!proto.vega.DataSourceDefinitionInternal} returns this
*/
proto.vega.DataSourceDefinitionInternal.prototype.setTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.vega.DataSourceDefinitionInternal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.DataSourceDefinitionInternal} returns this
 */
proto.vega.DataSourceDefinitionInternal.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.DataSourceDefinitionInternal.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.DataSourceDefinitionExternal.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.vega.DataSourceDefinitionExternal.SourceTypeCase = {
  SOURCE_TYPE_NOT_SET: 0,
  ORACLE: 1
};

/**
 * @return {proto.vega.DataSourceDefinitionExternal.SourceTypeCase}
 */
proto.vega.DataSourceDefinitionExternal.prototype.getSourceTypeCase = function() {
  return /** @type {proto.vega.DataSourceDefinitionExternal.SourceTypeCase} */(jspb.Message.computeOneofCase(this, proto.vega.DataSourceDefinitionExternal.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.DataSourceDefinitionExternal.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.DataSourceDefinitionExternal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.DataSourceDefinitionExternal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceDefinitionExternal.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracle: (f = msg.getOracle()) && proto.vega.DataSourceSpecConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.DataSourceDefinitionExternal}
 */
proto.vega.DataSourceDefinitionExternal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.DataSourceDefinitionExternal;
  return proto.vega.DataSourceDefinitionExternal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.DataSourceDefinitionExternal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.DataSourceDefinitionExternal}
 */
proto.vega.DataSourceDefinitionExternal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.DataSourceSpecConfiguration;
      reader.readMessage(value,proto.vega.DataSourceSpecConfiguration.deserializeBinaryFromReader);
      msg.setOracle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.DataSourceDefinitionExternal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.DataSourceDefinitionExternal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.DataSourceDefinitionExternal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceDefinitionExternal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.DataSourceSpecConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataSourceSpecConfiguration oracle = 1;
 * @return {?proto.vega.DataSourceSpecConfiguration}
 */
proto.vega.DataSourceDefinitionExternal.prototype.getOracle = function() {
  return /** @type{?proto.vega.DataSourceSpecConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.DataSourceSpecConfiguration, 1));
};


/**
 * @param {?proto.vega.DataSourceSpecConfiguration|undefined} value
 * @return {!proto.vega.DataSourceDefinitionExternal} returns this
*/
proto.vega.DataSourceDefinitionExternal.prototype.setOracle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.vega.DataSourceDefinitionExternal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.DataSourceDefinitionExternal} returns this
 */
proto.vega.DataSourceDefinitionExternal.prototype.clearOracle = function() {
  return this.setOracle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.DataSourceDefinitionExternal.prototype.hasOracle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.DataSourceSpecConfiguration.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.DataSourceSpecConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.DataSourceSpecConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.DataSourceSpecConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceSpecConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    vega_data_v1_data_pb.Signer.toObject, includeInstance),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    vega_data_v1_spec_pb.Filter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.DataSourceSpecConfiguration}
 */
proto.vega.DataSourceSpecConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.DataSourceSpecConfiguration;
  return proto.vega.DataSourceSpecConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.DataSourceSpecConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.DataSourceSpecConfiguration}
 */
proto.vega.DataSourceSpecConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vega_data_v1_data_pb.Signer;
      reader.readMessage(value,vega_data_v1_data_pb.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    case 2:
      var value = new vega_data_v1_spec_pb.Filter;
      reader.readMessage(value,vega_data_v1_spec_pb.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.DataSourceSpecConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.DataSourceSpecConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.DataSourceSpecConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceSpecConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vega_data_v1_data_pb.Signer.serializeBinaryToWriter
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      vega_data_v1_spec_pb.Filter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated data.v1.Signer signers = 1;
 * @return {!Array<!proto.vega.data.v1.Signer>}
 */
proto.vega.DataSourceSpecConfiguration.prototype.getSignersList = function() {
  return /** @type{!Array<!proto.vega.data.v1.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, vega_data_v1_data_pb.Signer, 1));
};


/**
 * @param {!Array<!proto.vega.data.v1.Signer>} value
 * @return {!proto.vega.DataSourceSpecConfiguration} returns this
*/
proto.vega.DataSourceSpecConfiguration.prototype.setSignersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.data.v1.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.data.v1.Signer}
 */
proto.vega.DataSourceSpecConfiguration.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.data.v1.Signer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.DataSourceSpecConfiguration} returns this
 */
proto.vega.DataSourceSpecConfiguration.prototype.clearSignersList = function() {
  return this.setSignersList([]);
};


/**
 * repeated data.v1.Filter filters = 2;
 * @return {!Array<!proto.vega.data.v1.Filter>}
 */
proto.vega.DataSourceSpecConfiguration.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.vega.data.v1.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, vega_data_v1_spec_pb.Filter, 2));
};


/**
 * @param {!Array<!proto.vega.data.v1.Filter>} value
 * @return {!proto.vega.DataSourceSpecConfiguration} returns this
*/
proto.vega.DataSourceSpecConfiguration.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vega.data.v1.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.data.v1.Filter}
 */
proto.vega.DataSourceSpecConfiguration.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vega.data.v1.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.DataSourceSpecConfiguration} returns this
 */
proto.vega.DataSourceSpecConfiguration.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.DataSourceSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.DataSourceSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.DataSourceSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: (f = msg.getData()) && proto.vega.DataSourceDefinition.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.DataSourceSpec}
 */
proto.vega.DataSourceSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.DataSourceSpec;
  return proto.vega.DataSourceSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.DataSourceSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.DataSourceSpec}
 */
proto.vega.DataSourceSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = new proto.vega.DataSourceDefinition;
      reader.readMessage(value,proto.vega.DataSourceDefinition.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {!proto.vega.DataSourceSpec.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.DataSourceSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.DataSourceSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.DataSourceSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vega.DataSourceDefinition.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vega.DataSourceSpec.Status = {
  STATUS_UNSPECIFIED: 0,
  STATUS_ACTIVE: 1,
  STATUS_DEACTIVATED: 2
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.DataSourceSpec.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.DataSourceSpec} returns this
 */
proto.vega.DataSourceSpec.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 created_at = 2;
 * @return {number}
 */
proto.vega.DataSourceSpec.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.DataSourceSpec} returns this
 */
proto.vega.DataSourceSpec.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 updated_at = 3;
 * @return {number}
 */
proto.vega.DataSourceSpec.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.DataSourceSpec} returns this
 */
proto.vega.DataSourceSpec.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional DataSourceDefinition data = 4;
 * @return {?proto.vega.DataSourceDefinition}
 */
proto.vega.DataSourceSpec.prototype.getData = function() {
  return /** @type{?proto.vega.DataSourceDefinition} */ (
    jspb.Message.getWrapperField(this, proto.vega.DataSourceDefinition, 4));
};


/**
 * @param {?proto.vega.DataSourceDefinition|undefined} value
 * @return {!proto.vega.DataSourceSpec} returns this
*/
proto.vega.DataSourceSpec.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.DataSourceSpec} returns this
 */
proto.vega.DataSourceSpec.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.DataSourceSpec.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Status status = 5;
 * @return {!proto.vega.DataSourceSpec.Status}
 */
proto.vega.DataSourceSpec.prototype.getStatus = function() {
  return /** @type {!proto.vega.DataSourceSpec.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.vega.DataSourceSpec.Status} value
 * @return {!proto.vega.DataSourceSpec} returns this
 */
proto.vega.DataSourceSpec.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ExternalDataSourceSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ExternalDataSourceSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ExternalDataSourceSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ExternalDataSourceSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.vega.DataSourceSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ExternalDataSourceSpec}
 */
proto.vega.ExternalDataSourceSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ExternalDataSourceSpec;
  return proto.vega.ExternalDataSourceSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ExternalDataSourceSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ExternalDataSourceSpec}
 */
proto.vega.ExternalDataSourceSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.DataSourceSpec;
      reader.readMessage(value,proto.vega.DataSourceSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ExternalDataSourceSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ExternalDataSourceSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ExternalDataSourceSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ExternalDataSourceSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.DataSourceSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataSourceSpec spec = 1;
 * @return {?proto.vega.DataSourceSpec}
 */
proto.vega.ExternalDataSourceSpec.prototype.getSpec = function() {
  return /** @type{?proto.vega.DataSourceSpec} */ (
    jspb.Message.getWrapperField(this, proto.vega.DataSourceSpec, 1));
};


/**
 * @param {?proto.vega.DataSourceSpec|undefined} value
 * @return {!proto.vega.ExternalDataSourceSpec} returns this
*/
proto.vega.ExternalDataSourceSpec.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ExternalDataSourceSpec} returns this
 */
proto.vega.ExternalDataSourceSpec.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ExternalDataSourceSpec.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.vega);
