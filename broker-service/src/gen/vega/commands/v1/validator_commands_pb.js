// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/commands/v1/validator_commands.proto (package vega.commands.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Signature } from "./signature_pb.js";
import { BuiltinAssetEvent, ERC20Event, ERC20MultiSigEvent, StakingEvent } from "../../chain_events_pb.js";
import { StateValueProposal } from "../../vega_pb.js";

/**
 * The kind of signature created by a node, for example, allow-listing a new asset, withdrawal etc
 *
 * @generated from enum vega.commands.v1.NodeSignatureKind
 */
export const NodeSignatureKind = proto3.makeEnum(
  "vega.commands.v1.NodeSignatureKind",
  [
    {no: 0, name: "NODE_SIGNATURE_KIND_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "NODE_SIGNATURE_KIND_ASSET_NEW", localName: "ASSET_NEW"},
    {no: 2, name: "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL", localName: "ASSET_WITHDRAWAL"},
    {no: 3, name: "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED", localName: "ERC20_MULTISIG_SIGNER_ADDED"},
    {no: 4, name: "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED", localName: "ERC20_MULTISIG_SIGNER_REMOVED"},
    {no: 5, name: "NODE_SIGNATURE_KIND_ASSET_UPDATE", localName: "ASSET_UPDATE"},
  ],
);

/**
 * A message from a validator signalling they are still online and validating blocks
 * or ready to validate blocks when they are still a pending validator
 *
 * @generated from message vega.commands.v1.ValidatorHeartbeat
 */
export const ValidatorHeartbeat = proto3.makeMessageType(
  "vega.commands.v1.ValidatorHeartbeat",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ethereum_signature", kind: "message", T: Signature },
    { no: 3, name: "vega_signature", kind: "message", T: Signature },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Used to announce a node as a new pending validator
 *
 * @generated from message vega.commands.v1.AnnounceNode
 */
export const AnnounceNode = proto3.makeMessageType(
  "vega.commands.v1.AnnounceNode",
  () => [
    { no: 1, name: "vega_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ethereum_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chain_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "info_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vega_pub_key_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "from_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "ethereum_signature", kind: "message", T: Signature },
    { no: 12, name: "vega_signature", kind: "message", T: Signature },
    { no: 13, name: "submitter_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Used when a node votes for validating that a given resource exists or is valid,
 * for example, an ERC20 deposit is valid and exists on ethereum
 *
 * @generated from message vega.commands.v1.NodeVote
 */
export const NodeVote = proto3.makeMessageType(
  "vega.commands.v1.NodeVote",
  () => [
    { no: 2, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(NodeVote_Type) },
  ],
);

/**
 * @generated from enum vega.commands.v1.NodeVote.Type
 */
export const NodeVote_Type = proto3.makeEnum(
  "vega.commands.v1.NodeVote.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_STAKE_DEPOSITED", localName: "STAKE_DEPOSITED"},
    {no: 2, name: "TYPE_STAKE_REMOVED", localName: "STAKE_REMOVED"},
    {no: 3, name: "TYPE_FUNDS_DEPOSITED", localName: "FUNDS_DEPOSITED"},
    {no: 4, name: "TYPE_SIGNER_ADDED", localName: "SIGNER_ADDED"},
    {no: 5, name: "TYPE_SIGNER_REMOVED", localName: "SIGNER_REMOVED"},
    {no: 6, name: "TYPE_BRIDGE_STOPPED", localName: "BRIDGE_STOPPED"},
    {no: 7, name: "TYPE_BRIDGE_RESUMED", localName: "BRIDGE_RESUMED"},
    {no: 8, name: "TYPE_ASSET_LISTED", localName: "ASSET_LISTED"},
    {no: 9, name: "TYPE_LIMITS_UPDATED", localName: "LIMITS_UPDATED"},
    {no: 10, name: "TYPE_STAKE_TOTAL_SUPPLY", localName: "STAKE_TOTAL_SUPPLY"},
    {no: 11, name: "TYPE_SIGNER_THRESHOLD_SET", localName: "SIGNER_THRESHOLD_SET"},
    {no: 12, name: "TYPE_GOVERNANCE_VALIDATE_ASSET", localName: "GOVERNANCE_VALIDATE_ASSET"},
  ],
);

/**
 * Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network
 *
 * @generated from message vega.commands.v1.NodeSignature
 */
export const NodeSignature = proto3.makeMessageType(
  "vega.commands.v1.NodeSignature",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "kind", kind: "enum", T: proto3.getEnumType(NodeSignatureKind) },
  ],
);

/**
 * An event forwarded to the Vega network to provide information on events happening on other networks
 *
 * @generated from message vega.commands.v1.ChainEvent
 */
export const ChainEvent = proto3.makeMessageType(
  "vega.commands.v1.ChainEvent",
  () => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 1001, name: "builtin", kind: "message", T: BuiltinAssetEvent, oneof: "event" },
    { no: 1002, name: "erc20", kind: "message", T: ERC20Event, oneof: "event" },
    { no: 1005, name: "staking_event", kind: "message", T: StakingEvent, oneof: "event" },
    { no: 1006, name: "erc20_multisig", kind: "message", T: ERC20MultiSigEvent, oneof: "event" },
  ],
);

/**
 * A transaction to allow a validator to rotate their Vega keys
 *
 * @generated from message vega.commands.v1.KeyRotateSubmission
 */
export const KeyRotateSubmission = proto3.makeMessageType(
  "vega.commands.v1.KeyRotateSubmission",
  () => [
    { no: 1, name: "new_pub_key_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "target_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "new_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "current_pub_key_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A transaction to allow a validator to rotate their ethereum keys
 *
 * @generated from message vega.commands.v1.EthereumKeyRotateSubmission
 */
export const EthereumKeyRotateSubmission = proto3.makeMessageType(
  "vega.commands.v1.EthereumKeyRotateSubmission",
  () => [
    { no: 1, name: "target_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "new_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "current_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "submitter_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ethereum_signature", kind: "message", T: Signature },
  ],
);

/**
 * A transaction for a validator to submit a floating point value
 *
 * @generated from message vega.commands.v1.StateVariableProposal
 */
export const StateVariableProposal = proto3.makeMessageType(
  "vega.commands.v1.StateVariableProposal",
  () => [
    { no: 1, name: "proposal", kind: "message", T: StateValueProposal },
  ],
);

/**
 * A transaction for a validator to suggest a protocol upgrade
 *
 * @generated from message vega.commands.v1.ProtocolUpgradeProposal
 */
export const ProtocolUpgradeProposal = proto3.makeMessageType(
  "vega.commands.v1.ProtocolUpgradeProposal",
  () => [
    { no: 1, name: "upgrade_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vega_release_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

