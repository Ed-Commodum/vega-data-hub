// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/commands/v1/transaction.proto (package vega.commands.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { BatchMarketInstructions, CancelTransfer, DelegateSubmission, IssueSignatures, LiquidityProvisionAmendment, LiquidityProvisionCancellation, LiquidityProvisionSubmission, OrderAmendment, OrderCancellation, OrderSubmission, ProposalSubmission, Transfer, UndelegateSubmission, VoteSubmission, WithdrawSubmission } from "./commands_pb.js";
import { AnnounceNode, ChainEvent, EthereumKeyRotateSubmission, KeyRotateSubmission, NodeSignature, NodeVote, ProtocolUpgradeProposal, StateVariableProposal, ValidatorHeartbeat } from "./validator_commands_pb.js";
import { OracleDataSubmission } from "./data_pb.js";
import { Signature } from "./signature_pb.js";

/**
 * The current supported version of the transaction inside the network.
 *
 * @generated from enum vega.commands.v1.TxVersion
 */
export const TxVersion = proto3.makeEnum(
  "vega.commands.v1.TxVersion",
  [
    {no: 0, name: "TX_VERSION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 2, name: "TX_VERSION_V2", localName: "V2"},
    {no: 3, name: "TX_VERSION_V3", localName: "V3"},
  ],
);

/**
 * @generated from message vega.commands.v1.InputData
 */
export const InputData = proto3.makeMessageType(
  "vega.commands.v1.InputData",
  () => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 1001, name: "order_submission", kind: "message", T: OrderSubmission, oneof: "command" },
    { no: 1002, name: "order_cancellation", kind: "message", T: OrderCancellation, oneof: "command" },
    { no: 1003, name: "order_amendment", kind: "message", T: OrderAmendment, oneof: "command" },
    { no: 1004, name: "withdraw_submission", kind: "message", T: WithdrawSubmission, oneof: "command" },
    { no: 1005, name: "proposal_submission", kind: "message", T: ProposalSubmission, oneof: "command" },
    { no: 1006, name: "vote_submission", kind: "message", T: VoteSubmission, oneof: "command" },
    { no: 1007, name: "liquidity_provision_submission", kind: "message", T: LiquidityProvisionSubmission, oneof: "command" },
    { no: 1008, name: "delegate_submission", kind: "message", T: DelegateSubmission, oneof: "command" },
    { no: 1009, name: "undelegate_submission", kind: "message", T: UndelegateSubmission, oneof: "command" },
    { no: 1010, name: "liquidity_provision_cancellation", kind: "message", T: LiquidityProvisionCancellation, oneof: "command" },
    { no: 1011, name: "liquidity_provision_amendment", kind: "message", T: LiquidityProvisionAmendment, oneof: "command" },
    { no: 1012, name: "transfer", kind: "message", T: Transfer, oneof: "command" },
    { no: 1013, name: "cancel_transfer", kind: "message", T: CancelTransfer, oneof: "command" },
    { no: 1014, name: "announce_node", kind: "message", T: AnnounceNode, oneof: "command" },
    { no: 1015, name: "batch_market_instructions", kind: "message", T: BatchMarketInstructions, oneof: "command" },
    { no: 2002, name: "node_vote", kind: "message", T: NodeVote, oneof: "command" },
    { no: 2003, name: "node_signature", kind: "message", T: NodeSignature, oneof: "command" },
    { no: 2004, name: "chain_event", kind: "message", T: ChainEvent, oneof: "command" },
    { no: 2005, name: "key_rotate_submission", kind: "message", T: KeyRotateSubmission, oneof: "command" },
    { no: 2006, name: "state_variable_proposal", kind: "message", T: StateVariableProposal, oneof: "command" },
    { no: 2007, name: "validator_heartbeat", kind: "message", T: ValidatorHeartbeat, oneof: "command" },
    { no: 2008, name: "ethereum_key_rotate_submission", kind: "message", T: EthereumKeyRotateSubmission, oneof: "command" },
    { no: 2009, name: "protocol_upgrade_proposal", kind: "message", T: ProtocolUpgradeProposal, oneof: "command" },
    { no: 2010, name: "issue_signatures", kind: "message", T: IssueSignatures, oneof: "command" },
    { no: 3001, name: "oracle_data_submission", kind: "message", T: OracleDataSubmission, oneof: "command" },
  ],
);

/**
 * Represents a transaction to be sent to Vega.
 *
 * @generated from message vega.commands.v1.Transaction
 */
export const Transaction = proto3.makeMessageType(
  "vega.commands.v1.Transaction",
  () => [
    { no: 1, name: "input_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "signature", kind: "message", T: Signature },
    { no: 1001, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "from" },
    { no: 1002, name: "pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "from" },
    { no: 2000, name: "version", kind: "enum", T: proto3.getEnumType(TxVersion) },
    { no: 3000, name: "pow", kind: "message", T: ProofOfWork },
  ],
);

/**
 * Components needed for the network to verify proof-of-work
 *
 * @generated from message vega.commands.v1.ProofOfWork
 */
export const ProofOfWork = proto3.makeMessageType(
  "vega.commands.v1.ProofOfWork",
  () => [
    { no: 1, name: "tid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

