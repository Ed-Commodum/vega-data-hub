// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/commands/v1/commands.proto (package vega.commands.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { AccountType, DispatchStrategy, LiquidityOrder, Order_TimeInForce, Order_Type, PeggedOrder, PeggedReference, Side, WithdrawExt } from "../../vega_pb.js";
import { ProposalRationale, ProposalTerms, Vote_Value } from "../../governance_pb.js";
import { NodeSignatureKind } from "./validator_commands_pb.js";

/**
 * A batch of order instructions.
 * This command accepts only the following batches of commands
 * and will be processed in the following order:
 * - OrderCancellation
 * - OrderAmendment
 * - OrderSubmission
 * The total amount of commands in the batch across all three lists of
 * instructions is restricted by the following network parameter:
 * "spam.protection.max.batchSize"
 *
 * @generated from message vega.commands.v1.BatchMarketInstructions
 */
export const BatchMarketInstructions = proto3.makeMessageType(
  "vega.commands.v1.BatchMarketInstructions",
  () => [
    { no: 1, name: "cancellations", kind: "message", T: OrderCancellation, repeated: true },
    { no: 2, name: "amendments", kind: "message", T: OrderAmendment, repeated: true },
    { no: 3, name: "submissions", kind: "message", T: OrderSubmission, repeated: true },
  ],
);

/**
 * An order submission is a request to submit or create a new order on Vega
 *
 * @generated from message vega.commands.v1.OrderSubmission
 */
export const OrderSubmission = proto3.makeMessageType(
  "vega.commands.v1.OrderSubmission",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "side", kind: "enum", T: proto3.getEnumType(Side) },
    { no: 5, name: "time_in_force", kind: "enum", T: proto3.getEnumType(Order_TimeInForce) },
    { no: 6, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "type", kind: "enum", T: proto3.getEnumType(Order_Type) },
    { no: 8, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "pegged_order", kind: "message", T: PeggedOrder },
    { no: 10, name: "post_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "reduce_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * An order cancellation is a request to cancel an existing order on Vega
 *
 * @generated from message vega.commands.v1.OrderCancellation
 */
export const OrderCancellation = proto3.makeMessageType(
  "vega.commands.v1.OrderCancellation",
  () => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * An order amendment is a request to amend or update an existing order on Vega
 *
 * The `orderID`, `partyID` and `marketID` fields are used for looking up the order only and cannot be amended by this command
 *
 * @generated from message vega.commands.v1.OrderAmendment
 */
export const OrderAmendment = proto3.makeMessageType(
  "vega.commands.v1.OrderAmendment",
  () => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "size_delta", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 6, name: "time_in_force", kind: "enum", T: proto3.getEnumType(Order_TimeInForce) },
    { no: 7, name: "pegged_offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "pegged_reference", kind: "enum", T: proto3.getEnumType(PeggedReference) },
  ],
);

/**
 * A liquidity provision submitted for a given market
 *
 * @generated from message vega.commands.v1.LiquidityProvisionSubmission
 */
export const LiquidityProvisionSubmission = proto3.makeMessageType(
  "vega.commands.v1.LiquidityProvisionSubmission",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commitment_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sells", kind: "message", T: LiquidityOrder, repeated: true },
    { no: 5, name: "buys", kind: "message", T: LiquidityOrder, repeated: true },
    { no: 6, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Cancel a liquidity provision request
 *
 * @generated from message vega.commands.v1.LiquidityProvisionCancellation
 */
export const LiquidityProvisionCancellation = proto3.makeMessageType(
  "vega.commands.v1.LiquidityProvisionCancellation",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Amend a liquidity provision request
 *
 * @generated from message vega.commands.v1.LiquidityProvisionAmendment
 */
export const LiquidityProvisionAmendment = proto3.makeMessageType(
  "vega.commands.v1.LiquidityProvisionAmendment",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commitment_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sells", kind: "message", T: LiquidityOrder, repeated: true },
    { no: 5, name: "buys", kind: "message", T: LiquidityOrder, repeated: true },
    { no: 6, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the submission request to withdraw funds for a party on Vega
 *
 * @generated from message vega.commands.v1.WithdrawSubmission
 */
export const WithdrawSubmission = proto3.makeMessageType(
  "vega.commands.v1.WithdrawSubmission",
  () => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ext", kind: "message", T: WithdrawExt },
  ],
);

/**
 * A command to submit a new proposal for the
 * Vega network governance
 *
 * @generated from message vega.commands.v1.ProposalSubmission
 */
export const ProposalSubmission = proto3.makeMessageType(
  "vega.commands.v1.ProposalSubmission",
  () => [
    { no: 1, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "terms", kind: "message", T: ProposalTerms },
    { no: 3, name: "rationale", kind: "message", T: ProposalRationale },
  ],
);

/**
 * A command to submit a new vote for a governance
 * proposal.
 *
 * @generated from message vega.commands.v1.VoteSubmission
 */
export const VoteSubmission = proto3.makeMessageType(
  "vega.commands.v1.VoteSubmission",
  () => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "enum", T: proto3.getEnumType(Vote_Value) },
  ],
);

/**
 * A command to submit an instruction to delegate some stake to a node
 *
 * @generated from message vega.commands.v1.DelegateSubmission
 */
export const DelegateSubmission = proto3.makeMessageType(
  "vega.commands.v1.DelegateSubmission",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.commands.v1.UndelegateSubmission
 */
export const UndelegateSubmission = proto3.makeMessageType(
  "vega.commands.v1.UndelegateSubmission",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "method", kind: "enum", T: proto3.getEnumType(UndelegateSubmission_Method) },
  ],
);

/**
 * @generated from enum vega.commands.v1.UndelegateSubmission.Method
 */
export const UndelegateSubmission_Method = proto3.makeEnum(
  "vega.commands.v1.UndelegateSubmission.Method",
  [
    {no: 0, name: "METHOD_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "METHOD_NOW", localName: "NOW"},
    {no: 2, name: "METHOD_AT_END_OF_EPOCH", localName: "AT_END_OF_EPOCH"},
  ],
);

/**
 * A transfer initiated by a party
 *
 * @generated from message vega.commands.v1.Transfer
 */
export const Transfer = proto3.makeMessageType(
  "vega.commands.v1.Transfer",
  () => [
    { no: 1, name: "from_account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 4, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 101, name: "one_off", kind: "message", T: OneOffTransfer, oneof: "kind" },
    { no: 102, name: "recurring", kind: "message", T: RecurringTransfer, oneof: "kind" },
  ],
);

/**
 * Specific details for a one off transfer
 *
 * @generated from message vega.commands.v1.OneOffTransfer
 */
export const OneOffTransfer = proto3.makeMessageType(
  "vega.commands.v1.OneOffTransfer",
  () => [
    { no: 1, name: "deliver_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Specific details for a recurring transfer
 *
 * @generated from message vega.commands.v1.RecurringTransfer
 */
export const RecurringTransfer = proto3.makeMessageType(
  "vega.commands.v1.RecurringTransfer",
  () => [
    { no: 1, name: "start_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "end_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dispatch_strategy", kind: "message", T: DispatchStrategy },
  ],
);

/**
 * A request for cancelling a recurring transfer
 *
 * @generated from message vega.commands.v1.CancelTransfer
 */
export const CancelTransfer = proto3.makeMessageType(
  "vega.commands.v1.CancelTransfer",
  () => [
    { no: 1, name: "transfer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A transaction for a validator to submit signatures to a smart contract
 *
 * @generated from message vega.commands.v1.IssueSignatures
 */
export const IssueSignatures = proto3.makeMessageType(
  "vega.commands.v1.IssueSignatures",
  () => [
    { no: 1, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(NodeSignatureKind) },
    { no: 3, name: "validator_node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

