// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/markets.proto (package vega, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { DataSourceSpec } from "./data_source_pb.js";

/**
 * An auction duration is used to configure 3 auction periods:
 * 1. `duration > 0`, `volume == 0`:
 *   The auction will last for at least N seconds
 * 2. `duration == 0`, `volume > 0`:
 *   The auction will end once the given volume will match at uncrossing
 * 3. `duration > 0`, `volume > 0`:
 *   The auction will take at least N seconds, but can end sooner if the market can trade a certain volume
 *
 * @generated from message vega.AuctionDuration
 */
export const AuctionDuration = proto3.makeMessageType(
  "vega.AuctionDuration",
  () => [
    { no: 1, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Future product definition
 *
 * @generated from message vega.Future
 */
export const Future = proto3.makeMessageType(
  "vega.Future",
  () => [
    { no: 1, name: "settlement_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data_source_spec_for_settlement_data", kind: "message", T: DataSourceSpec },
    { no: 4, name: "data_source_spec_for_trading_termination", kind: "message", T: DataSourceSpec },
    { no: 5, name: "data_source_spec_binding", kind: "message", T: DataSourceSpecToFutureBinding },
  ],
);

/**
 * DataSourceSpecToFutureBinding describes which property of the data source data is to be
 * used as settlement data and which to use as the trading terminated trigger
 *
 * @generated from message vega.DataSourceSpecToFutureBinding
 */
export const DataSourceSpecToFutureBinding = proto3.makeMessageType(
  "vega.DataSourceSpecToFutureBinding",
  () => [
    { no: 1, name: "settlement_data_property", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "trading_termination_property", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Instrument metadata definition
 *
 * @generated from message vega.InstrumentMetadata
 */
export const InstrumentMetadata = proto3.makeMessageType(
  "vega.InstrumentMetadata",
  () => [
    { no: 1, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Instrument definition
 *
 * @generated from message vega.Instrument
 */
export const Instrument = proto3.makeMessageType(
  "vega.Instrument",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: InstrumentMetadata },
    { no: 100, name: "future", kind: "message", T: Future, oneof: "product" },
  ],
);

/**
 * Risk model for log normal
 *
 * @generated from message vega.LogNormalRiskModel
 */
export const LogNormalRiskModel = proto3.makeMessageType(
  "vega.LogNormalRiskModel",
  () => [
    { no: 1, name: "risk_aversion_parameter", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "tau", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "params", kind: "message", T: LogNormalModelParams },
  ],
);

/**
 * Risk model parameters for log normal
 *
 * @generated from message vega.LogNormalModelParams
 */
export const LogNormalModelParams = proto3.makeMessageType(
  "vega.LogNormalModelParams",
  () => [
    { no: 1, name: "mu", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "r", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "sigma", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * Risk model for simple modelling
 *
 * @generated from message vega.SimpleRiskModel
 */
export const SimpleRiskModel = proto3.makeMessageType(
  "vega.SimpleRiskModel",
  () => [
    { no: 1, name: "params", kind: "message", T: SimpleModelParams },
  ],
);

/**
 * Risk model parameters for simple modelling
 *
 * @generated from message vega.SimpleModelParams
 */
export const SimpleModelParams = proto3.makeMessageType(
  "vega.SimpleModelParams",
  () => [
    { no: 1, name: "factor_long", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "factor_short", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "max_move_up", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "min_move_down", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "probability_of_trading", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * Scaling Factors (for use in margin calculation)
 *
 * @generated from message vega.ScalingFactors
 */
export const ScalingFactors = proto3.makeMessageType(
  "vega.ScalingFactors",
  () => [
    { no: 1, name: "search_level", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "initial_margin", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "collateral_release", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * Margin Calculator definition
 *
 * @generated from message vega.MarginCalculator
 */
export const MarginCalculator = proto3.makeMessageType(
  "vega.MarginCalculator",
  () => [
    { no: 1, name: "scaling_factors", kind: "message", T: ScalingFactors },
  ],
);

/**
 * Tradable Instrument definition
 *
 * @generated from message vega.TradableInstrument
 */
export const TradableInstrument = proto3.makeMessageType(
  "vega.TradableInstrument",
  () => [
    { no: 1, name: "instrument", kind: "message", T: Instrument },
    { no: 2, name: "margin_calculator", kind: "message", T: MarginCalculator },
    { no: 100, name: "log_normal_risk_model", kind: "message", T: LogNormalRiskModel, oneof: "risk_model" },
    { no: 101, name: "simple_risk_model", kind: "message", T: SimpleRiskModel, oneof: "risk_model" },
  ],
);

/**
 * Fee factors definition
 *
 * @generated from message vega.FeeFactors
 */
export const FeeFactors = proto3.makeMessageType(
  "vega.FeeFactors",
  () => [
    { no: 1, name: "maker_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "infrastructure_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "liquidity_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Fees definition
 *
 * @generated from message vega.Fees
 */
export const Fees = proto3.makeMessageType(
  "vega.Fees",
  () => [
    { no: 1, name: "factors", kind: "message", T: FeeFactors },
  ],
);

/**
 * PriceMonitoringTrigger holds together price projection horizon Ï„, probability level p, and auction extension duration
 *
 * @generated from message vega.PriceMonitoringTrigger
 */
export const PriceMonitoringTrigger = proto3.makeMessageType(
  "vega.PriceMonitoringTrigger",
  () => [
    { no: 1, name: "horizon", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "probability", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "auction_extension", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * PriceMonitoringParameters contains a collection of triggers to be used for a given market
 *
 * @generated from message vega.PriceMonitoringParameters
 */
export const PriceMonitoringParameters = proto3.makeMessageType(
  "vega.PriceMonitoringParameters",
  () => [
    { no: 1, name: "triggers", kind: "message", T: PriceMonitoringTrigger, repeated: true },
  ],
);

/**
 * PriceMonitoringSettings contains the settings for price monitoring
 *
 * @generated from message vega.PriceMonitoringSettings
 */
export const PriceMonitoringSettings = proto3.makeMessageType(
  "vega.PriceMonitoringSettings",
  () => [
    { no: 1, name: "parameters", kind: "message", T: PriceMonitoringParameters },
  ],
);

/**
 * LiquidityMonitoringParameters contains settings used for liquidity monitoring
 *
 * @generated from message vega.LiquidityMonitoringParameters
 */
export const LiquidityMonitoringParameters = proto3.makeMessageType(
  "vega.LiquidityMonitoringParameters",
  () => [
    { no: 1, name: "target_stake_parameters", kind: "message", T: TargetStakeParameters },
    { no: 2, name: "triggering_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "auction_extension", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * TargetStakeParameters contains parameters used in target stake calculation
 *
 * @generated from message vega.TargetStakeParameters
 */
export const TargetStakeParameters = proto3.makeMessageType(
  "vega.TargetStakeParameters",
  () => [
    { no: 1, name: "time_window", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "scaling_factor", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * Market definition
 *
 * @generated from message vega.Market
 */
export const Market = proto3.makeMessageType(
  "vega.Market",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tradable_instrument", kind: "message", T: TradableInstrument },
    { no: 3, name: "decimal_places", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "fees", kind: "message", T: Fees },
    { no: 5, name: "opening_auction", kind: "message", T: AuctionDuration },
    { no: 6, name: "price_monitoring_settings", kind: "message", T: PriceMonitoringSettings },
    { no: 7, name: "liquidity_monitoring_parameters", kind: "message", T: LiquidityMonitoringParameters },
    { no: 8, name: "trading_mode", kind: "enum", T: proto3.getEnumType(Market_TradingMode) },
    { no: 9, name: "state", kind: "enum", T: proto3.getEnumType(Market_State) },
    { no: 10, name: "market_timestamps", kind: "message", T: MarketTimestamps },
    { no: 11, name: "position_decimal_places", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "lp_price_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "linear_slippage_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "quadratic_slippage_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The current state of the market
 *
 * @generated from enum vega.Market.State
 */
export const Market_State = proto3.makeEnum(
  "vega.Market.State",
  [
    {no: 0, name: "STATE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STATE_PROPOSED", localName: "PROPOSED"},
    {no: 2, name: "STATE_REJECTED", localName: "REJECTED"},
    {no: 3, name: "STATE_PENDING", localName: "PENDING"},
    {no: 4, name: "STATE_CANCELLED", localName: "CANCELLED"},
    {no: 5, name: "STATE_ACTIVE", localName: "ACTIVE"},
    {no: 6, name: "STATE_SUSPENDED", localName: "SUSPENDED"},
    {no: 7, name: "STATE_CLOSED", localName: "CLOSED"},
    {no: 8, name: "STATE_TRADING_TERMINATED", localName: "TRADING_TERMINATED"},
    {no: 9, name: "STATE_SETTLED", localName: "SETTLED"},
  ],
);

/**
 * The trading mode the market is currently running, also referred to as 'market state'
 *
 * @generated from enum vega.Market.TradingMode
 */
export const Market_TradingMode = proto3.makeEnum(
  "vega.Market.TradingMode",
  [
    {no: 0, name: "TRADING_MODE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TRADING_MODE_CONTINUOUS", localName: "CONTINUOUS"},
    {no: 2, name: "TRADING_MODE_BATCH_AUCTION", localName: "BATCH_AUCTION"},
    {no: 3, name: "TRADING_MODE_OPENING_AUCTION", localName: "OPENING_AUCTION"},
    {no: 4, name: "TRADING_MODE_MONITORING_AUCTION", localName: "MONITORING_AUCTION"},
    {no: 5, name: "TRADING_MODE_NO_TRADING", localName: "NO_TRADING"},
  ],
);

/**
 * Time stamps for important times about creating, enacting etc the market
 *
 * @generated from message vega.MarketTimestamps
 */
export const MarketTimestamps = proto3.makeMessageType(
  "vega.MarketTimestamps",
  () => [
    { no: 1, name: "proposed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "pending", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "open", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "close", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

