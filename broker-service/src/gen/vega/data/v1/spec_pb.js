// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/data/v1/spec.proto (package vega.data.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * Filter describes the conditions under which a data source data is considered of
 * interest or not.
 *
 * @generated from message vega.data.v1.Filter
 */
export const Filter = proto3.makeMessageType(
  "vega.data.v1.Filter",
  () => [
    { no: 1, name: "key", kind: "message", T: PropertyKey },
    { no: 2, name: "conditions", kind: "message", T: Condition, repeated: true },
  ],
);

/**
 * PropertyKey describes the property key contained in data source data.
 *
 * @generated from message vega.data.v1.PropertyKey
 */
export const PropertyKey = proto3.makeMessageType(
  "vega.data.v1.PropertyKey",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(PropertyKey_Type) },
    { no: 3, name: "number_decimal_places", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ],
);

/**
 * Type describes the type of properties that are supported by the data source
 * engine.
 *
 * @generated from enum vega.data.v1.PropertyKey.Type
 */
export const PropertyKey_Type = proto3.makeEnum(
  "vega.data.v1.PropertyKey.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_EMPTY", localName: "EMPTY"},
    {no: 2, name: "TYPE_INTEGER", localName: "INTEGER"},
    {no: 3, name: "TYPE_STRING", localName: "STRING"},
    {no: 4, name: "TYPE_BOOLEAN", localName: "BOOLEAN"},
    {no: 5, name: "TYPE_DECIMAL", localName: "DECIMAL"},
    {no: 6, name: "TYPE_TIMESTAMP", localName: "TIMESTAMP"},
  ],
);

/**
 * Condition describes the condition that must be validated by the network
 *
 * @generated from message vega.data.v1.Condition
 */
export const Condition = proto3.makeMessageType(
  "vega.data.v1.Condition",
  () => [
    { no: 1, name: "operator", kind: "enum", T: proto3.getEnumType(Condition_Operator) },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Comparator describes the type of comparison.
 *
 * @generated from enum vega.data.v1.Condition.Operator
 */
export const Condition_Operator = proto3.makeEnum(
  "vega.data.v1.Condition.Operator",
  [
    {no: 0, name: "OPERATOR_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "OPERATOR_EQUALS", localName: "EQUALS"},
    {no: 2, name: "OPERATOR_GREATER_THAN", localName: "GREATER_THAN"},
    {no: 3, name: "OPERATOR_GREATER_THAN_OR_EQUAL", localName: "GREATER_THAN_OR_EQUAL"},
    {no: 4, name: "OPERATOR_LESS_THAN", localName: "LESS_THAN"},
    {no: 5, name: "OPERATOR_LESS_THAN_OR_EQUAL", localName: "LESS_THAN_OR_EQUAL"},
  ],
);

