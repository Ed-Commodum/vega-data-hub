// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/checkpoint/v1/checkpoint.proto (package vega.checkpoint.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { AssetDetails } from "../../assets_pb.js";
import { AccountType, NetworkParameter, RankingScore, Transfer } from "../../vega_pb.js";
import { Proposal } from "../../governance_pb.js";
import { ERC20MultiSigSignerEvent, ERC20MultiSigThresholdSetEvent, StakeLinking, Transfer as Transfer$1, ValidatorUpdate } from "../../events/v1/events_pb.js";
import { BuiltinAssetDeposit, ERC20AssetLimitsUpdated, ERC20AssetList, ERC20Deposit } from "../../chain_events_pb.js";

/**
 * CheckpointState is the entire checkpoint serialised (basically serialised the Checkpoint message + hash)
 *
 * @generated from message vega.checkpoint.v1.CheckpointState
 */
export const CheckpointState = proto3.makeMessageType(
  "vega.checkpoint.v1.CheckpointState",
  () => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "state", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Checkpoint aggregates the various engine snapshots
 *
 * @generated from message vega.checkpoint.v1.Checkpoint
 */
export const Checkpoint = proto3.makeMessageType(
  "vega.checkpoint.v1.Checkpoint",
  () => [
    { no: 1, name: "governance", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "assets", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "collateral", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "network_parameters", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "delegation", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "epoch", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "block", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "rewards", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "banking", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "validators", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "staking", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 12, name: "multisig_control", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "market_tracker", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * AssetEntry is a single (enabled) asset
 *
 * @generated from message vega.checkpoint.v1.AssetEntry
 */
export const AssetEntry = proto3.makeMessageType(
  "vega.checkpoint.v1.AssetEntry",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_details", kind: "message", T: AssetDetails },
  ],
);

/**
 * Assets contains all the enabled assets as AssetEntries
 *
 * @generated from message vega.checkpoint.v1.Assets
 */
export const Assets = proto3.makeMessageType(
  "vega.checkpoint.v1.Assets",
  () => [
    { no: 1, name: "assets", kind: "message", T: AssetEntry, repeated: true },
    { no: 2, name: "pending_listing_assets", kind: "message", T: AssetEntry, repeated: true },
  ],
);

/**
 * AssetBalance represents the total balance of a given asset for a party
 *
 * @generated from message vega.checkpoint.v1.AssetBalance
 */
export const AssetBalance = proto3.makeMessageType(
  "vega.checkpoint.v1.AssetBalance",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Collateral contains the balances per party
 *
 * @generated from message vega.checkpoint.v1.Collateral
 */
export const Collateral = proto3.makeMessageType(
  "vega.checkpoint.v1.Collateral",
  () => [
    { no: 1, name: "balances", kind: "message", T: AssetBalance, repeated: true },
  ],
);

/**
 * NetParams contains all network parameters
 *
 * @generated from message vega.checkpoint.v1.NetParams
 */
export const NetParams = proto3.makeMessageType(
  "vega.checkpoint.v1.NetParams",
  () => [
    { no: 1, name: "params", kind: "message", T: NetworkParameter, repeated: true },
  ],
);

/**
 * Proposals will contain all accepted proposals
 *
 * @generated from message vega.checkpoint.v1.Proposals
 */
export const Proposals = proto3.makeMessageType(
  "vega.checkpoint.v1.Proposals",
  () => [
    { no: 1, name: "proposals", kind: "message", T: Proposal, repeated: true },
  ],
);

/**
 * Delegated amounts for party/node
 * undelegate and epoch seq are only relevant for pending entries
 *
 * @generated from message vega.checkpoint.v1.DelegateEntry
 */
export const DelegateEntry = proto3.makeMessageType(
  "vega.checkpoint.v1.DelegateEntry",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "undelegate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "epoch_seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Delegate contains all entries for a checkpoint
 *
 * @generated from message vega.checkpoint.v1.Delegate
 */
export const Delegate = proto3.makeMessageType(
  "vega.checkpoint.v1.Delegate",
  () => [
    { no: 1, name: "active", kind: "message", T: DelegateEntry, repeated: true },
    { no: 2, name: "pending", kind: "message", T: DelegateEntry, repeated: true },
    { no: 3, name: "auto_delegation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Block message contains data related to block at which the checkpoint
 * was created (ie block height)
 *
 * @generated from message vega.checkpoint.v1.Block
 */
export const Block = proto3.makeMessageType(
  "vega.checkpoint.v1.Block",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.Rewards
 */
export const Rewards = proto3.makeMessageType(
  "vega.checkpoint.v1.Rewards",
  () => [
    { no: 1, name: "rewards", kind: "message", T: RewardPayout, repeated: true },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.RewardPayout
 */
export const RewardPayout = proto3.makeMessageType(
  "vega.checkpoint.v1.RewardPayout",
  () => [
    { no: 1, name: "payout_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "rewards_payout", kind: "message", T: PendingRewardPayout, repeated: true },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.PendingRewardPayout
 */
export const PendingRewardPayout = proto3.makeMessageType(
  "vega.checkpoint.v1.PendingRewardPayout",
  () => [
    { no: 1, name: "from_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "party_amount", kind: "message", T: PartyAmount, repeated: true },
    { no: 4, name: "total_reward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.PartyAmount
 */
export const PartyAmount = proto3.makeMessageType(
  "vega.checkpoint.v1.PartyAmount",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.PendingKeyRotation
 */
export const PendingKeyRotation = proto3.makeMessageType(
  "vega.checkpoint.v1.PendingKeyRotation",
  () => [
    { no: 1, name: "relative_target_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new_pub_key_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.PendingEthereumKeyRotation
 */
export const PendingEthereumKeyRotation = proto3.makeMessageType(
  "vega.checkpoint.v1.PendingEthereumKeyRotation",
  () => [
    { no: 1, name: "relative_target_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.ScheduledTransfer
 */
export const ScheduledTransfer = proto3.makeMessageType(
  "vega.checkpoint.v1.ScheduledTransfer",
  () => [
    { no: 1, name: "transfer", kind: "message", T: Transfer },
    { no: 2, name: "account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 3, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "oneoff_transfer", kind: "message", T: Transfer$1 },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.ScheduledTransferAtTime
 */
export const ScheduledTransferAtTime = proto3.makeMessageType(
  "vega.checkpoint.v1.ScheduledTransferAtTime",
  () => [
    { no: 1, name: "deliver_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "transfers", kind: "message", T: ScheduledTransfer, repeated: true },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.RecurringTransfers
 */
export const RecurringTransfers = proto3.makeMessageType(
  "vega.checkpoint.v1.RecurringTransfers",
  () => [
    { no: 1, name: "recurring_transfers", kind: "message", T: Transfer$1, repeated: true },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.Banking
 */
export const Banking = proto3.makeMessageType(
  "vega.checkpoint.v1.Banking",
  () => [
    { no: 1, name: "transfers_at_time", kind: "message", T: ScheduledTransferAtTime, repeated: true },
    { no: 2, name: "recurring_transfers", kind: "message", T: RecurringTransfers },
    { no: 3, name: "bridge_state", kind: "message", T: BridgeState },
    { no: 4, name: "asset_actions", kind: "message", T: AssetAction, repeated: true },
    { no: 5, name: "last_seen_eth_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "seen_refs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.BridgeState
 */
export const BridgeState = proto3.makeMessageType(
  "vega.checkpoint.v1.BridgeState",
  () => [
    { no: 1, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.Validators
 */
export const Validators = proto3.makeMessageType(
  "vega.checkpoint.v1.Validators",
  () => [
    { no: 1, name: "validator_state", kind: "message", T: ValidatorState, repeated: true },
    { no: 2, name: "pending_key_rotations", kind: "message", T: PendingKeyRotation, repeated: true },
    { no: 3, name: "pending_ethereum_key_rotations", kind: "message", T: PendingEthereumKeyRotation, repeated: true },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.ValidatorState
 */
export const ValidatorState = proto3.makeMessageType(
  "vega.checkpoint.v1.ValidatorState",
  () => [
    { no: 1, name: "validator_update", kind: "message", T: ValidatorUpdate },
    { no: 2, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "eth_events_forwarded", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "validator_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "ranking_score", kind: "message", T: RankingScore },
    { no: 6, name: "heartbeat_block_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "heartbeat_block_sigs", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.Staking
 */
export const Staking = proto3.makeMessageType(
  "vega.checkpoint.v1.Staking",
  () => [
    { no: 1, name: "accepted", kind: "message", T: StakeLinking, repeated: true },
    { no: 2, name: "last_block_seen", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.MultisigControl
 */
export const MultisigControl = proto3.makeMessageType(
  "vega.checkpoint.v1.MultisigControl",
  () => [
    { no: 1, name: "signers", kind: "message", T: ERC20MultiSigSignerEvent, repeated: true },
    { no: 2, name: "threshold_set", kind: "message", T: ERC20MultiSigThresholdSetEvent },
    { no: 3, name: "last_block_seen", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.MarketTracker
 */
export const MarketTracker = proto3.makeMessageType(
  "vega.checkpoint.v1.MarketTracker",
  () => [
    { no: 1, name: "market_activity", kind: "message", T: MarketActivityTracker, repeated: true },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.MarketActivityTracker
 */
export const MarketActivityTracker = proto3.makeMessageType(
  "vega.checkpoint.v1.MarketActivityTracker",
  () => [
    { no: 1, name: "market", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "maker_fees_received", kind: "message", T: PartyFees, repeated: true },
    { no: 4, name: "maker_fees_paid", kind: "message", T: PartyFees, repeated: true },
    { no: 5, name: "lp_fees", kind: "message", T: PartyFees, repeated: true },
    { no: 6, name: "proposer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "bonus_paid", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "value_traded", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "ready_to_delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.PartyFees
 */
export const PartyFees = proto3.makeMessageType(
  "vega.checkpoint.v1.PartyFees",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.checkpoint.v1.AssetAction
 */
export const AssetAction = proto3.makeMessageType(
  "vega.checkpoint.v1.AssetAction",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "tx_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "builtin_deposit", kind: "message", T: BuiltinAssetDeposit },
    { no: 8, name: "erc20_deposit", kind: "message", T: ERC20Deposit },
    { no: 9, name: "asset_list", kind: "message", T: ERC20AssetList },
    { no: 10, name: "erc20_asset_limits_updated", kind: "message", T: ERC20AssetLimitsUpdated },
    { no: 11, name: "erc20_bridge_stopped", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "erc20_bridge_resumed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

