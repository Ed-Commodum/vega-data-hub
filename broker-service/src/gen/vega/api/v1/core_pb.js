// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/api/v1/core.proto (package vega.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Transaction } from "../../commands/v1/transaction_pb.js";
import { BusEvent, BusEventType } from "../../events/v1/events_pb.js";
import { ChainStatus } from "../../vega_pb.js";

/**
 * Request for a new event sent by the blockchain queue to be propagated on Vega
 *
 * @generated from message vega.api.v1.PropagateChainEventRequest
 */
export const PropagateChainEventRequest = proto3.makeMessageType(
  "vega.api.v1.PropagateChainEventRequest",
  () => [
    { no: 1, name: "event", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Response for a new event sent by the blockchain queue to be propagated on Vega
 *
 * @generated from message vega.api.v1.PropagateChainEventResponse
 */
export const PropagateChainEventResponse = proto3.makeMessageType(
  "vega.api.v1.PropagateChainEventResponse",
  () => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Request for submitting a transaction v2 on Vega
 *
 * @generated from message vega.api.v1.SubmitTransactionRequest
 */
export const SubmitTransactionRequest = proto3.makeMessageType(
  "vega.api.v1.SubmitTransactionRequest",
  () => [
    { no: 1, name: "tx", kind: "message", T: Transaction },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(SubmitTransactionRequest_Type) },
  ],
);

/**
 * Blockchain transaction type
 *
 * @generated from enum vega.api.v1.SubmitTransactionRequest.Type
 */
export const SubmitTransactionRequest_Type = proto3.makeEnum(
  "vega.api.v1.SubmitTransactionRequest.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_ASYNC", localName: "ASYNC"},
    {no: 2, name: "TYPE_SYNC", localName: "SYNC"},
    {no: 3, name: "TYPE_COMMIT", localName: "COMMIT"},
  ],
);

/**
 * Response for submitting a transaction v2 on Vega
 *
 * @generated from message vega.api.v1.SubmitTransactionResponse
 */
export const SubmitTransactionResponse = proto3.makeMessageType(
  "vega.api.v1.SubmitTransactionResponse",
  () => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Request for checking a transaction v2 on Vega
 *
 * @generated from message vega.api.v1.CheckTransactionRequest
 */
export const CheckTransactionRequest = proto3.makeMessageType(
  "vega.api.v1.CheckTransactionRequest",
  () => [
    { no: 1, name: "tx", kind: "message", T: Transaction },
  ],
);

/**
 * @generated from message vega.api.v1.CheckTransactionResponse
 */
export const CheckTransactionResponse = proto3.makeMessageType(
  "vega.api.v1.CheckTransactionResponse",
  () => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "gas_wanted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request for submitting a version agnostic transaction on Vega
 *
 * @generated from message vega.api.v1.SubmitRawTransactionRequest
 */
export const SubmitRawTransactionRequest = proto3.makeMessageType(
  "vega.api.v1.SubmitRawTransactionRequest",
  () => [
    { no: 1, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(SubmitRawTransactionRequest_Type) },
  ],
);

/**
 * Blockchain transaction type
 *
 * @generated from enum vega.api.v1.SubmitRawTransactionRequest.Type
 */
export const SubmitRawTransactionRequest_Type = proto3.makeEnum(
  "vega.api.v1.SubmitRawTransactionRequest.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_ASYNC", localName: "ASYNC"},
    {no: 2, name: "TYPE_SYNC", localName: "SYNC"},
    {no: 3, name: "TYPE_COMMIT", localName: "COMMIT"},
  ],
);

/**
 * Response for submitting a version agnostic transaction on Vega
 *
 * @generated from message vega.api.v1.SubmitRawTransactionResponse
 */
export const SubmitRawTransactionResponse = proto3.makeMessageType(
  "vega.api.v1.SubmitRawTransactionResponse",
  () => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Request for checking a version agnostic transaction on Vega
 *
 * @generated from message vega.api.v1.CheckRawTransactionRequest
 */
export const CheckRawTransactionRequest = proto3.makeMessageType(
  "vega.api.v1.CheckRawTransactionRequest",
  () => [
    { no: 1, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Response for checking a version agnostic transaction on Vega
 *
 * @generated from message vega.api.v1.CheckRawTransactionResponse
 */
export const CheckRawTransactionResponse = proto3.makeMessageType(
  "vega.api.v1.CheckRawTransactionResponse",
  () => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "gas_wanted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request for the current time of the Vega network
 *
 * @generated from message vega.api.v1.GetVegaTimeRequest
 */
export const GetVegaTimeRequest = proto3.makeMessageType(
  "vega.api.v1.GetVegaTimeRequest",
  [],
);

/**
 * Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
 *
 * @generated from message vega.api.v1.GetVegaTimeResponse
 */
export const GetVegaTimeResponse = proto3.makeMessageType(
  "vega.api.v1.GetVegaTimeResponse",
  () => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Request to subscribe to a stream of one or more event types from the Vega event bus
 *
 * @generated from message vega.api.v1.ObserveEventBusRequest
 */
export const ObserveEventBusRequest = proto3.makeMessageType(
  "vega.api.v1.ObserveEventBusRequest",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(BusEventType), repeated: true },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "batch_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Response to a subscribed stream of events from the Vega event bus
 *
 * @generated from message vega.api.v1.ObserveEventBusResponse
 */
export const ObserveEventBusResponse = proto3.makeMessageType(
  "vega.api.v1.ObserveEventBusResponse",
  () => [
    { no: 1, name: "events", kind: "message", T: BusEvent, repeated: true },
  ],
);

/**
 * A a request for statistics about the Vega network
 *
 * @generated from message vega.api.v1.StatisticsRequest
 */
export const StatisticsRequest = proto3.makeMessageType(
  "vega.api.v1.StatisticsRequest",
  [],
);

/**
 * @generated from message vega.api.v1.StatisticsResponse
 */
export const StatisticsResponse = proto3.makeMessageType(
  "vega.api.v1.StatisticsResponse",
  () => [
    { no: 1, name: "statistics", kind: "message", T: Statistics },
  ],
);

/**
 * Vega domain specific statistics as reported by the node the caller is connected to
 *
 * @generated from message vega.api.v1.Statistics
 */
export const Statistics = proto3.makeMessageType(
  "vega.api.v1.Statistics",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "backlog_length", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total_peers", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "genesis_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "current_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "vega_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(ChainStatus) },
    { no: 8, name: "tx_per_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "average_tx_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "average_orders_per_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "trades_per_second", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "orders_per_second", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "total_markets", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "total_amend_order", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "total_cancel_order", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "total_create_order", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "total_orders", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "total_trades", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "order_subscriptions", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 22, name: "trade_subscriptions", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 23, name: "candle_subscriptions", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 24, name: "market_depth_subscriptions", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 25, name: "positions_subscriptions", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 26, name: "account_subscriptions", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 27, name: "market_data_subscriptions", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 28, name: "app_version_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "app_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "chain_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "block_duration", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 32, name: "uptime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 33, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "market_depth_updates_subscriptions", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 35, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 36, name: "epoch_seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 37, name: "epoch_start_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 38, name: "epoch_expiry_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 39, name: "event_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "events_per_second", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * A request to get the height of the very last block processed
 * by tendermint
 *
 * @generated from message vega.api.v1.LastBlockHeightRequest
 */
export const LastBlockHeightRequest = proto3.makeMessageType(
  "vega.api.v1.LastBlockHeightRequest",
  [],
);

/**
 * A response with the height of the last block processed by
 * tendermint
 *
 * @generated from message vega.api.v1.LastBlockHeightResponse
 */
export const LastBlockHeightResponse = proto3.makeMessageType(
  "vega.api.v1.LastBlockHeightResponse",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "spam_pow_hash_function", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "spam_pow_difficulty", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "spam_pow_number_of_past_blocks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "spam_pow_number_of_tx_per_block", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "spam_pow_increasing_difficulty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A request to retrieve the spam statistics of a party for the given epoch
 *
 * @generated from message vega.api.v1.GetSpamStatisticsRequest
 */
export const GetSpamStatisticsRequest = proto3.makeMessageType(
  "vega.api.v1.GetSpamStatisticsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The statistics for a given spam policy
 *
 * @generated from message vega.api.v1.SpamStatistic
 */
export const SpamStatistic = proto3.makeMessageType(
  "vega.api.v1.SpamStatistic",
  () => [
    { no: 1, name: "count_for_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "max_for_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "banned_until", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "min_tokens_required", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The voting statistics by proposal for a given party for the current epoch
 *
 * @generated from message vega.api.v1.VoteSpamStatistics
 */
export const VoteSpamStatistics = proto3.makeMessageType(
  "vega.api.v1.VoteSpamStatistics",
  () => [
    { no: 1, name: "statistics", kind: "message", T: VoteSpamStatistic, repeated: true },
    { no: 2, name: "max_for_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "banned_until", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * The vote statistics for the voting spam policies
 * which are calculated as a ratio of the total votes
 * that have been rejected.
 *
 * @generated from message vega.api.v1.VoteSpamStatistic
 */
export const VoteSpamStatistic = proto3.makeMessageType(
  "vega.api.v1.VoteSpamStatistic",
  () => [
    { no: 1, name: "proposal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count_for_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "min_tokens_required", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The PoW state for a given block
 *
 * @generated from message vega.api.v1.PoWBlockState
 */
export const PoWBlockState = proto3.makeMessageType(
  "vega.api.v1.PoWBlockState",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transactions_seen", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "expected_difficulty", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "hash_function", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "difficulty", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "tx_per_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "increasing_difficulty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Proof of work statistics for a party
 *
 * @generated from message vega.api.v1.PoWStatistic
 */
export const PoWStatistic = proto3.makeMessageType(
  "vega.api.v1.PoWStatistic",
  () => [
    { no: 1, name: "block_states", kind: "message", T: PoWBlockState, repeated: true },
    { no: 2, name: "banned_until", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "number_of_past_blocks", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * The complete spam statistics captured for a given party
 *
 * @generated from message vega.api.v1.SpamStatistics
 */
export const SpamStatistics = proto3.makeMessageType(
  "vega.api.v1.SpamStatistics",
  () => [
    { no: 1, name: "proposals", kind: "message", T: SpamStatistic },
    { no: 2, name: "delegations", kind: "message", T: SpamStatistic },
    { no: 3, name: "transfers", kind: "message", T: SpamStatistic },
    { no: 4, name: "node_announcements", kind: "message", T: SpamStatistic },
    { no: 5, name: "votes", kind: "message", T: VoteSpamStatistics },
    { no: 6, name: "pow", kind: "message", T: PoWStatistic },
    { no: 7, name: "issue_signatures", kind: "message", T: SpamStatistic },
    { no: 8, name: "epoch_seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * A response containing all the spam statistics of a party for the current epoch
 *
 * @generated from message vega.api.v1.GetSpamStatisticsResponse
 */
export const GetSpamStatisticsResponse = proto3.makeMessageType(
  "vega.api.v1.GetSpamStatisticsResponse",
  () => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "statistics", kind: "message", T: SpamStatistics },
  ],
);

