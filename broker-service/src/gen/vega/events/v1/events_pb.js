// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/events/v1/events.proto (package vega.events.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Account, AccountType, AuctionTrigger, Deposit, DispatchStrategy, EpochAction, LedgerMovement, LiquidityProvision, MarginLevels, MarketData, NetworkLimits, NetworkParameter, Order, Party, RiskFactor, Trade, Withdrawal } from "../../vega_pb.js";
import { BatchMarketInstructions, CancelTransfer, DelegateSubmission, IssueSignatures, LiquidityProvisionAmendment, LiquidityProvisionCancellation, LiquidityProvisionSubmission, OrderAmendment, OrderCancellation, OrderSubmission, ProposalSubmission, Transfer as Transfer$1, UndelegateSubmission, VoteSubmission, WithdrawSubmission } from "../../commands/v1/commands_pb.js";
import { AnnounceNode, EthereumKeyRotateSubmission, KeyRotateSubmission, NodeSignature, ProtocolUpgradeProposal } from "../../commands/v1/validator_commands_pb.js";
import { OracleDataSubmission } from "../../commands/v1/data_pb.js";
import { Proposal, Vote } from "../../governance_pb.js";
import { Market } from "../../markets_pb.js";
import { Asset } from "../../assets_pb.js";
import { OracleData, OracleSpec } from "../../oracle_pb.js";

/**
 * @generated from enum vega.events.v1.ProtocolUpgradeProposalStatus
 */
export const ProtocolUpgradeProposalStatus = proto3.makeEnum(
  "vega.events.v1.ProtocolUpgradeProposalStatus",
  [
    {no: 0, name: "PROTOCOL_UPGRADE_PROPOSAL_STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "PROTOCOL_UPGRADE_PROPOSAL_STATUS_PENDING", localName: "PENDING"},
    {no: 2, name: "PROTOCOL_UPGRADE_PROPOSAL_STATUS_APPROVED", localName: "APPROVED"},
    {no: 3, name: "PROTOCOL_UPGRADE_PROPOSAL_STATUS_REJECTED", localName: "REJECTED"},
  ],
);

/**
 * An (event) bus event type is used to specify a type of event
 * It has 2 styles of event:
 * Single values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item
 * Group values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items
 *
 * @generated from enum vega.events.v1.BusEventType
 */
export const BusEventType = proto3.makeEnum(
  "vega.events.v1.BusEventType",
  [
    {no: 0, name: "BUS_EVENT_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "BUS_EVENT_TYPE_ALL", localName: "ALL"},
    {no: 2, name: "BUS_EVENT_TYPE_TIME_UPDATE", localName: "TIME_UPDATE"},
    {no: 3, name: "BUS_EVENT_TYPE_LEDGER_MOVEMENTS", localName: "LEDGER_MOVEMENTS"},
    {no: 4, name: "BUS_EVENT_TYPE_POSITION_RESOLUTION", localName: "POSITION_RESOLUTION"},
    {no: 5, name: "BUS_EVENT_TYPE_ORDER", localName: "ORDER"},
    {no: 6, name: "BUS_EVENT_TYPE_ACCOUNT", localName: "ACCOUNT"},
    {no: 7, name: "BUS_EVENT_TYPE_PARTY", localName: "PARTY"},
    {no: 8, name: "BUS_EVENT_TYPE_TRADE", localName: "TRADE"},
    {no: 9, name: "BUS_EVENT_TYPE_MARGIN_LEVELS", localName: "MARGIN_LEVELS"},
    {no: 10, name: "BUS_EVENT_TYPE_PROPOSAL", localName: "PROPOSAL"},
    {no: 11, name: "BUS_EVENT_TYPE_VOTE", localName: "VOTE"},
    {no: 12, name: "BUS_EVENT_TYPE_MARKET_DATA", localName: "MARKET_DATA"},
    {no: 13, name: "BUS_EVENT_TYPE_NODE_SIGNATURE", localName: "NODE_SIGNATURE"},
    {no: 14, name: "BUS_EVENT_TYPE_LOSS_SOCIALIZATION", localName: "LOSS_SOCIALIZATION"},
    {no: 15, name: "BUS_EVENT_TYPE_SETTLE_POSITION", localName: "SETTLE_POSITION"},
    {no: 16, name: "BUS_EVENT_TYPE_SETTLE_DISTRESSED", localName: "SETTLE_DISTRESSED"},
    {no: 17, name: "BUS_EVENT_TYPE_MARKET_CREATED", localName: "MARKET_CREATED"},
    {no: 18, name: "BUS_EVENT_TYPE_ASSET", localName: "ASSET"},
    {no: 19, name: "BUS_EVENT_TYPE_MARKET_TICK", localName: "MARKET_TICK"},
    {no: 20, name: "BUS_EVENT_TYPE_WITHDRAWAL", localName: "WITHDRAWAL"},
    {no: 21, name: "BUS_EVENT_TYPE_DEPOSIT", localName: "DEPOSIT"},
    {no: 22, name: "BUS_EVENT_TYPE_AUCTION", localName: "AUCTION"},
    {no: 23, name: "BUS_EVENT_TYPE_RISK_FACTOR", localName: "RISK_FACTOR"},
    {no: 24, name: "BUS_EVENT_TYPE_NETWORK_PARAMETER", localName: "NETWORK_PARAMETER"},
    {no: 25, name: "BUS_EVENT_TYPE_LIQUIDITY_PROVISION", localName: "LIQUIDITY_PROVISION"},
    {no: 26, name: "BUS_EVENT_TYPE_MARKET_UPDATED", localName: "MARKET_UPDATED"},
    {no: 27, name: "BUS_EVENT_TYPE_ORACLE_SPEC", localName: "ORACLE_SPEC"},
    {no: 28, name: "BUS_EVENT_TYPE_ORACLE_DATA", localName: "ORACLE_DATA"},
    {no: 29, name: "BUS_EVENT_TYPE_DELEGATION_BALANCE", localName: "DELEGATION_BALANCE"},
    {no: 30, name: "BUS_EVENT_TYPE_VALIDATOR_SCORE", localName: "VALIDATOR_SCORE"},
    {no: 31, name: "BUS_EVENT_TYPE_EPOCH_UPDATE", localName: "EPOCH_UPDATE"},
    {no: 32, name: "BUS_EVENT_TYPE_VALIDATOR_UPDATE", localName: "VALIDATOR_UPDATE"},
    {no: 33, name: "BUS_EVENT_TYPE_STAKE_LINKING", localName: "STAKE_LINKING"},
    {no: 34, name: "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT", localName: "REWARD_PAYOUT_EVENT"},
    {no: 35, name: "BUS_EVENT_TYPE_CHECKPOINT", localName: "CHECKPOINT"},
    {no: 36, name: "BUS_EVENT_TYPE_STREAM_START", localName: "STREAM_START"},
    {no: 37, name: "BUS_EVENT_TYPE_KEY_ROTATION", localName: "KEY_ROTATION"},
    {no: 38, name: "BUS_EVENT_TYPE_STATE_VAR", localName: "STATE_VAR"},
    {no: 39, name: "BUS_EVENT_TYPE_NETWORK_LIMITS", localName: "NETWORK_LIMITS"},
    {no: 40, name: "BUS_EVENT_TYPE_TRANSFER", localName: "TRANSFER"},
    {no: 41, name: "BUS_EVENT_TYPE_VALIDATOR_RANKING", localName: "VALIDATOR_RANKING"},
    {no: 42, name: "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT", localName: "ERC20_MULTI_SIG_SIGNER_EVENT"},
    {no: 43, name: "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD", localName: "ERC20_MULTI_SIG_SET_THRESHOLD"},
    {no: 44, name: "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED", localName: "ERC20_MULTI_SIG_SIGNER_ADDED"},
    {no: 45, name: "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED", localName: "ERC20_MULTI_SIG_SIGNER_REMOVED"},
    {no: 46, name: "BUS_EVENT_TYPE_POSITION_STATE", localName: "POSITION_STATE"},
    {no: 47, name: "BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION", localName: "ETHEREUM_KEY_ROTATION"},
    {no: 48, name: "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL", localName: "PROTOCOL_UPGRADE_PROPOSAL"},
    {no: 49, name: "BUS_EVENT_TYPE_BEGIN_BLOCK", localName: "BEGIN_BLOCK"},
    {no: 50, name: "BUS_EVENT_TYPE_END_BLOCK", localName: "END_BLOCK"},
    {no: 51, name: "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_STARTED", localName: "PROTOCOL_UPGRADE_STARTED"},
    {no: 52, name: "BUS_EVENT_TYPE_SETTLE_MARKET", localName: "SETTLE_MARKET"},
    {no: 53, name: "BUS_EVENT_TYPE_TRANSACTION_RESULT", localName: "TRANSACTION_RESULT"},
    {no: 54, name: "BUS_EVENT_TYPE_SNAPSHOT_TAKEN", localName: "SNAPSHOT_TAKEN"},
    {no: 55, name: "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_DATA_NODE_READY", localName: "PROTOCOL_UPGRADE_DATA_NODE_READY"},
    {no: 56, name: "BUS_EVENT_TYPE_DISTRESSED_ORDERS_CLOSED", localName: "DISTRESSED_ORDERS_CLOSED"},
    {no: 57, name: "BUS_EVENT_TYPE_EXPIRED_ORDERS", localName: "EXPIRED_ORDERS"},
    {no: 101, name: "BUS_EVENT_TYPE_MARKET", localName: "MARKET"},
    {no: 201, name: "BUS_EVENT_TYPE_TX_ERROR", localName: "TX_ERROR"},
  ],
);

/**
 * @generated from message vega.events.v1.ERC20MultiSigSignerAdded
 */
export const ERC20MultiSigSignerAdded = proto3.makeMessageType(
  "vega.events.v1.ERC20MultiSigSignerAdded",
  () => [
    { no: 1, name: "signature_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "new_signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.events.v1.ERC20MultiSigSignerRemovedSubmitter
 */
export const ERC20MultiSigSignerRemovedSubmitter = proto3.makeMessageType(
  "vega.events.v1.ERC20MultiSigSignerRemovedSubmitter",
  () => [
    { no: 1, name: "signature_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.events.v1.ERC20MultiSigSignerRemoved
 */
export const ERC20MultiSigSignerRemoved = proto3.makeMessageType(
  "vega.events.v1.ERC20MultiSigSignerRemoved",
  () => [
    { no: 1, name: "signature_submitters", kind: "message", T: ERC20MultiSigSignerRemovedSubmitter, repeated: true },
    { no: 2, name: "validator_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "old_signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.events.v1.Transfer
 */
export const Transfer = proto3.makeMessageType(
  "vega.events.v1.Transfer",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "from_account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 4, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "to_account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 6, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "status", kind: "enum", T: proto3.getEnumType(Transfer_Status) },
    { no: 10, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 101, name: "one_off", kind: "message", T: OneOffTransfer, oneof: "kind" },
    { no: 102, name: "recurring", kind: "message", T: RecurringTransfer, oneof: "kind" },
  ],
);

/**
 * @generated from enum vega.events.v1.Transfer.Status
 */
export const Transfer_Status = proto3.makeEnum(
  "vega.events.v1.Transfer.Status",
  [
    {no: 0, name: "STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STATUS_PENDING", localName: "PENDING"},
    {no: 2, name: "STATUS_DONE", localName: "DONE"},
    {no: 3, name: "STATUS_REJECTED", localName: "REJECTED"},
    {no: 4, name: "STATUS_STOPPED", localName: "STOPPED"},
    {no: 5, name: "STATUS_CANCELLED", localName: "CANCELLED"},
  ],
);

/**
 * @generated from message vega.events.v1.OneOffTransfer
 */
export const OneOffTransfer = proto3.makeMessageType(
  "vega.events.v1.OneOffTransfer",
  () => [
    { no: 1, name: "deliver_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.events.v1.RecurringTransfer
 */
export const RecurringTransfer = proto3.makeMessageType(
  "vega.events.v1.RecurringTransfer",
  () => [
    { no: 1, name: "start_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "end_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dispatch_strategy", kind: "message", T: DispatchStrategy },
  ],
);

/**
 * StakeLinking - an event notifying of stake being deposited or removed for a given party
 * These events are emitted for every Staking deposit or removed accepted by the network
 *
 * @generated from message vega.events.v1.StakeLinking
 */
export const StakeLinking = proto3.makeMessageType(
  "vega.events.v1.StakeLinking",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(StakeLinking_Type) },
    { no: 3, name: "ts", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(StakeLinking_Status) },
    { no: 7, name: "finalized_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "block_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ethereum_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from enum vega.events.v1.StakeLinking.Type
 */
export const StakeLinking_Type = proto3.makeEnum(
  "vega.events.v1.StakeLinking.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_LINK", localName: "LINK"},
    {no: 2, name: "TYPE_UNLINK", localName: "UNLINK"},
  ],
);

/**
 * @generated from enum vega.events.v1.StakeLinking.Status
 */
export const StakeLinking_Status = proto3.makeEnum(
  "vega.events.v1.StakeLinking.Status",
  [
    {no: 0, name: "STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STATUS_PENDING", localName: "PENDING"},
    {no: 2, name: "STATUS_ACCEPTED", localName: "ACCEPTED"},
    {no: 3, name: "STATUS_REJECTED", localName: "REJECTED"},
  ],
);

/**
 * @generated from message vega.events.v1.ERC20MultiSigSignerEvent
 */
export const ERC20MultiSigSignerEvent = proto3.makeMessageType(
  "vega.events.v1.ERC20MultiSigSignerEvent",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ERC20MultiSigSignerEvent_Type) },
    { no: 3, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "block_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from enum vega.events.v1.ERC20MultiSigSignerEvent.Type
 */
export const ERC20MultiSigSignerEvent_Type = proto3.makeEnum(
  "vega.events.v1.ERC20MultiSigSignerEvent.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_ADDED", localName: "ADDED"},
    {no: 2, name: "TYPE_REMOVED", localName: "REMOVED"},
  ],
);

/**
 * @generated from message vega.events.v1.ERC20MultiSigThresholdSetEvent
 */
export const ERC20MultiSigThresholdSetEvent = proto3.makeMessageType(
  "vega.events.v1.ERC20MultiSigThresholdSetEvent",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.events.v1.CheckpointEvent
 */
export const CheckpointEvent = proto3.makeMessageType(
  "vega.events.v1.CheckpointEvent",
  () => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.events.v1.StreamStartEvent
 */
export const StreamStartEvent = proto3.makeMessageType(
  "vega.events.v1.StreamStartEvent",
  () => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.events.v1.RewardPayoutEvent
 */
export const RewardPayoutEvent = proto3.makeMessageType(
  "vega.events.v1.RewardPayoutEvent",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "percent_of_total_reward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "reward_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "market", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ValidatorScoreEvent is the score a validator gets for a given epoch
 *
 * @generated from message vega.events.v1.ValidatorScoreEvent
 */
export const ValidatorScoreEvent = proto3.makeMessageType(
  "vega.events.v1.ValidatorScoreEvent",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "validator_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "normalised_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "validator_performance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "raw_validator_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "validator_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "multisig_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DelegationBalanceEvent - updates on the delegation balance of a party to a node in the current epoch in effect
 *
 * @generated from message vega.events.v1.DelegationBalanceEvent
 */
export const DelegationBalanceEvent = proto3.makeMessageType(
  "vega.events.v1.DelegationBalanceEvent",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MarketEvent - the common denominator for all market events
 * interface has a method to return a string for logging
 *
 * @generated from message vega.events.v1.MarketEvent
 */
export const MarketEvent = proto3.makeMessageType(
  "vega.events.v1.MarketEvent",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.events.v1.TransactionResult
 */
export const TransactionResult = proto3.makeMessageType(
  "vega.events.v1.TransactionResult",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 101, name: "order_submission", kind: "message", T: OrderSubmission, oneof: "transaction" },
    { no: 102, name: "order_amendment", kind: "message", T: OrderAmendment, oneof: "transaction" },
    { no: 103, name: "order_cancellation", kind: "message", T: OrderCancellation, oneof: "transaction" },
    { no: 104, name: "proposal", kind: "message", T: ProposalSubmission, oneof: "transaction" },
    { no: 105, name: "vote_submission", kind: "message", T: VoteSubmission, oneof: "transaction" },
    { no: 106, name: "liquidity_provision_submission", kind: "message", T: LiquidityProvisionSubmission, oneof: "transaction" },
    { no: 107, name: "withdraw_submission", kind: "message", T: WithdrawSubmission, oneof: "transaction" },
    { no: 108, name: "delegate_submission", kind: "message", T: DelegateSubmission, oneof: "transaction" },
    { no: 109, name: "undelegate_submission", kind: "message", T: UndelegateSubmission, oneof: "transaction" },
    { no: 111, name: "liquidity_provision_cancellation", kind: "message", T: LiquidityProvisionCancellation, oneof: "transaction" },
    { no: 112, name: "liquidity_provision_amendment", kind: "message", T: LiquidityProvisionAmendment, oneof: "transaction" },
    { no: 113, name: "transfer", kind: "message", T: Transfer$1, oneof: "transaction" },
    { no: 114, name: "cancel_transfer", kind: "message", T: CancelTransfer, oneof: "transaction" },
    { no: 115, name: "announce_node", kind: "message", T: AnnounceNode, oneof: "transaction" },
    { no: 116, name: "oracle_data_submission", kind: "message", T: OracleDataSubmission, oneof: "transaction" },
    { no: 117, name: "protocol_upgrade_proposal", kind: "message", T: ProtocolUpgradeProposal, oneof: "transaction" },
    { no: 118, name: "issue_signatures", kind: "message", T: IssueSignatures, oneof: "transaction" },
    { no: 119, name: "batch_market_instructions", kind: "message", T: BatchMarketInstructions, oneof: "transaction" },
    { no: 120, name: "key_rotate_submission", kind: "message", T: KeyRotateSubmission, oneof: "transaction" },
    { no: 121, name: "ethereum_key_rotate_submission", kind: "message", T: EthereumKeyRotateSubmission, oneof: "transaction" },
    { no: 1001, name: "success", kind: "message", T: TransactionResult_SuccessDetails, oneof: "extra" },
    { no: 1002, name: "failure", kind: "message", T: TransactionResult_FailureDetails, oneof: "extra" },
  ],
);

/**
 * TBD
 *
 * @generated from message vega.events.v1.TransactionResult.SuccessDetails
 */
export const TransactionResult_SuccessDetails = proto3.makeMessageType(
  "vega.events.v1.TransactionResult.SuccessDetails",
  [],
  {localName: "TransactionResult_SuccessDetails"},
);

/**
 * @generated from message vega.events.v1.TransactionResult.FailureDetails
 */
export const TransactionResult_FailureDetails = proto3.makeMessageType(
  "vega.events.v1.TransactionResult.FailureDetails",
  () => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "TransactionResult_FailureDetails"},
);

/**
 * @generated from message vega.events.v1.TxErrorEvent
 */
export const TxErrorEvent = proto3.makeMessageType(
  "vega.events.v1.TxErrorEvent",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "err_msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 101, name: "order_submission", kind: "message", T: OrderSubmission, oneof: "transaction" },
    { no: 102, name: "order_amendment", kind: "message", T: OrderAmendment, oneof: "transaction" },
    { no: 103, name: "order_cancellation", kind: "message", T: OrderCancellation, oneof: "transaction" },
    { no: 104, name: "proposal", kind: "message", T: ProposalSubmission, oneof: "transaction" },
    { no: 105, name: "vote_submission", kind: "message", T: VoteSubmission, oneof: "transaction" },
    { no: 106, name: "liquidity_provision_submission", kind: "message", T: LiquidityProvisionSubmission, oneof: "transaction" },
    { no: 107, name: "withdraw_submission", kind: "message", T: WithdrawSubmission, oneof: "transaction" },
    { no: 108, name: "delegate_submission", kind: "message", T: DelegateSubmission, oneof: "transaction" },
    { no: 109, name: "undelegate_submission", kind: "message", T: UndelegateSubmission, oneof: "transaction" },
    { no: 111, name: "liquidity_provision_cancellation", kind: "message", T: LiquidityProvisionCancellation, oneof: "transaction" },
    { no: 112, name: "liquidity_provision_amendment", kind: "message", T: LiquidityProvisionAmendment, oneof: "transaction" },
    { no: 113, name: "transfer", kind: "message", T: Transfer$1, oneof: "transaction" },
    { no: 114, name: "cancel_transfer", kind: "message", T: CancelTransfer, oneof: "transaction" },
    { no: 115, name: "announce_node", kind: "message", T: AnnounceNode, oneof: "transaction" },
    { no: 116, name: "oracle_data_submission", kind: "message", T: OracleDataSubmission, oneof: "transaction" },
    { no: 117, name: "protocol_upgrade_proposal", kind: "message", T: ProtocolUpgradeProposal, oneof: "transaction" },
    { no: 118, name: "issue_signatures", kind: "message", T: IssueSignatures, oneof: "transaction" },
    { no: 119, name: "batch_market_instructions", kind: "message", T: BatchMarketInstructions, oneof: "transaction" },
  ],
);

/**
 * A time update event contains the latest time update from Vega blockchain and indicates the start of a new block
 *
 * @generated from message vega.events.v1.TimeUpdate
 */
export const TimeUpdate = proto3.makeMessageType(
  "vega.events.v1.TimeUpdate",
  () => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Epoch details
 *
 * @generated from message vega.events.v1.EpochEvent
 */
export const EpochEvent = proto3.makeMessageType(
  "vega.events.v1.EpochEvent",
  () => [
    { no: 1, name: "seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(EpochAction) },
    { no: 3, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "expire_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "end_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * A transfer responses event contains a collection of transfer information
 *
 * @generated from message vega.events.v1.LedgerMovements
 */
export const LedgerMovements = proto3.makeMessageType(
  "vega.events.v1.LedgerMovements",
  () => [
    { no: 1, name: "ledger_movements", kind: "message", T: LedgerMovement, repeated: true },
  ],
);

/**
 * A position resolution event contains information on distressed trades
 *
 * @generated from message vega.events.v1.PositionResolution
 */
export const PositionResolution = proto3.makeMessageType(
  "vega.events.v1.PositionResolution",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "distressed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "closed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "mark_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A loss socialization event contains details on the amount of wins unable to be distributed
 *
 * @generated from message vega.events.v1.LossSocialization
 */
export const LossSocialization = proto3.makeMessageType(
  "vega.events.v1.LossSocialization",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A trade settlement is part of the settle position event
 *
 * @generated from message vega.events.v1.TradeSettlement
 */
export const TradeSettlement = proto3.makeMessageType(
  "vega.events.v1.TradeSettlement",
  () => [
    { no: 1, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A settle position event contains position settlement information for a party
 *
 * @generated from message vega.events.v1.SettlePosition
 */
export const SettlePosition = proto3.makeMessageType(
  "vega.events.v1.SettlePosition",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "trade_settlements", kind: "message", T: TradeSettlement, repeated: true },
    { no: 5, name: "position_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A settle market event to notify data node that a market has been settled
 * so positions and PL can be updated accordingly
 *
 * @generated from message vega.events.v1.SettleMarket
 */
export const SettleMarket = proto3.makeMessageType(
  "vega.events.v1.SettleMarket",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "position_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A position state event contains the current position state for a single party in a single market
 *
 * @generated from message vega.events.v1.PositionStateEvent
 */
export const PositionStateEvent = proto3.makeMessageType(
  "vega.events.v1.PositionStateEvent",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "potential_buys", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "potential_sells", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "vw_buy_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "vw_sell_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A settle distressed event contains information on distressed trading parties who are closed out
 *
 * Note: Any PositionResolution event (market level) will most likely be followed by a number of these events
 *
 * @generated from message vega.events.v1.SettleDistressed
 */
export const SettleDistressed = proto3.makeMessageType(
  "vega.events.v1.SettleDistressed",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "margin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A distressed order contains the party IDs for all parties that were distressed and had their orders closed,
 * but did not need to be closed out after cancelling their orders
 *
 * @generated from message vega.events.v1.DistressedOrders
 */
export const DistressedOrders = proto3.makeMessageType(
  "vega.events.v1.DistressedOrders",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parties", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * A market ticket event contains the time value for when a particular market was last processed on Vega
 *
 * @generated from message vega.events.v1.MarketTick
 */
export const MarketTick = proto3.makeMessageType(
  "vega.events.v1.MarketTick",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * An auction event indicating a change in auction state, for example starting or ending an auction
 *
 * @generated from message vega.events.v1.AuctionEvent
 */
export const AuctionEvent = proto3.makeMessageType(
  "vega.events.v1.AuctionEvent",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "opening_auction", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "leave", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "trigger", kind: "enum", T: proto3.getEnumType(AuctionTrigger) },
    { no: 7, name: "extension_trigger", kind: "enum", T: proto3.getEnumType(AuctionTrigger) },
  ],
);

/**
 * A validator update event contains information about validator node
 *
 * @generated from message vega.events.v1.ValidatorUpdate
 */
export const ValidatorUpdate = proto3.makeMessageType(
  "vega.events.v1.ValidatorUpdate",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vega_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ethereum_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tm_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "info_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vega_pub_key_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "added", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "from_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "submitter_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "epoch_seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * An event that explains the status of the validator for the coming epoch
 *
 * @generated from message vega.events.v1.ValidatorRankingEvent
 */
export const ValidatorRankingEvent = proto3.makeMessageType(
  "vega.events.v1.ValidatorRankingEvent",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stake_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "performance_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ranking_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "previous_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "next_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tm_voting_power", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * A key rotation events contains information about Vega key rotation
 *
 * @generated from message vega.events.v1.KeyRotation
 */
export const KeyRotation = proto3.makeMessageType(
  "vega.events.v1.KeyRotation",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "old_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * An Ethereum key rotation events contains information about Ethereum key rotation
 *
 * @generated from message vega.events.v1.EthereumKeyRotation
 */
export const EthereumKeyRotation = proto3.makeMessageType(
  "vega.events.v1.EthereumKeyRotation",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "old_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.events.v1.ProtocolUpgradeEvent
 */
export const ProtocolUpgradeEvent = proto3.makeMessageType(
  "vega.events.v1.ProtocolUpgradeEvent",
  () => [
    { no: 1, name: "upgrade_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vega_release_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "approvers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(ProtocolUpgradeProposalStatus) },
  ],
);

/**
 * StateVarEvent - updates on state changes in state variable consensus
 *
 * @generated from message vega.events.v1.StateVar
 */
export const StateVar = proto3.makeMessageType(
  "vega.events.v1.StateVar",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * BeginBlock
 *
 * @generated from message vega.events.v1.BeginBlock
 */
export const BeginBlock = proto3.makeMessageType(
  "vega.events.v1.BeginBlock",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * EndBlock
 *
 * @generated from message vega.events.v1.EndBlock
 */
export const EndBlock = proto3.makeMessageType(
  "vega.events.v1.EndBlock",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * The core is starting a protocol upgrade
 *
 * @generated from message vega.events.v1.ProtocolUpgradeStarted
 */
export const ProtocolUpgradeStarted = proto3.makeMessageType(
  "vega.events.v1.ProtocolUpgradeStarted",
  () => [
    { no: 1, name: "last_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * The data node is ready fro protocol upgrade
 *
 * @generated from message vega.events.v1.ProtocolUpgradeDataNodeReady
 */
export const ProtocolUpgradeDataNodeReady = proto3.makeMessageType(
  "vega.events.v1.ProtocolUpgradeDataNodeReady",
  () => [
    { no: 1, name: "last_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * CoreSnapshotData represents the core snapshot data.
 *
 * @generated from message vega.events.v1.CoreSnapshotData
 */
export const CoreSnapshotData = proto3.makeMessageType(
  "vega.events.v1.CoreSnapshotData",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "core_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "protocol_upgrade_block", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * A bus event is a container for event bus events emitted by Vega
 *
 * @generated from message vega.events.v1.BusEvent
 */
export const BusEvent = proto3.makeMessageType(
  "vega.events.v1.BusEvent",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(BusEventType) },
    { no: 101, name: "time_update", kind: "message", T: TimeUpdate, oneof: "event" },
    { no: 102, name: "ledger_movements", kind: "message", T: LedgerMovements, oneof: "event" },
    { no: 103, name: "position_resolution", kind: "message", T: PositionResolution, oneof: "event" },
    { no: 104, name: "order", kind: "message", T: Order, oneof: "event" },
    { no: 105, name: "account", kind: "message", T: Account, oneof: "event" },
    { no: 106, name: "party", kind: "message", T: Party, oneof: "event" },
    { no: 107, name: "trade", kind: "message", T: Trade, oneof: "event" },
    { no: 108, name: "margin_levels", kind: "message", T: MarginLevels, oneof: "event" },
    { no: 109, name: "proposal", kind: "message", T: Proposal, oneof: "event" },
    { no: 110, name: "vote", kind: "message", T: Vote, oneof: "event" },
    { no: 111, name: "market_data", kind: "message", T: MarketData, oneof: "event" },
    { no: 112, name: "node_signature", kind: "message", T: NodeSignature, oneof: "event" },
    { no: 113, name: "loss_socialization", kind: "message", T: LossSocialization, oneof: "event" },
    { no: 114, name: "settle_position", kind: "message", T: SettlePosition, oneof: "event" },
    { no: 115, name: "settle_distressed", kind: "message", T: SettleDistressed, oneof: "event" },
    { no: 116, name: "market_created", kind: "message", T: Market, oneof: "event" },
    { no: 117, name: "asset", kind: "message", T: Asset, oneof: "event" },
    { no: 118, name: "market_tick", kind: "message", T: MarketTick, oneof: "event" },
    { no: 119, name: "withdrawal", kind: "message", T: Withdrawal, oneof: "event" },
    { no: 120, name: "deposit", kind: "message", T: Deposit, oneof: "event" },
    { no: 121, name: "auction", kind: "message", T: AuctionEvent, oneof: "event" },
    { no: 122, name: "risk_factor", kind: "message", T: RiskFactor, oneof: "event" },
    { no: 123, name: "network_parameter", kind: "message", T: NetworkParameter, oneof: "event" },
    { no: 124, name: "liquidity_provision", kind: "message", T: LiquidityProvision, oneof: "event" },
    { no: 125, name: "market_updated", kind: "message", T: Market, oneof: "event" },
    { no: 126, name: "oracle_spec", kind: "message", T: OracleSpec, oneof: "event" },
    { no: 127, name: "oracle_data", kind: "message", T: OracleData, oneof: "event" },
    { no: 129, name: "delegation_balance", kind: "message", T: DelegationBalanceEvent, oneof: "event" },
    { no: 130, name: "validator_score", kind: "message", T: ValidatorScoreEvent, oneof: "event" },
    { no: 131, name: "epoch_event", kind: "message", T: EpochEvent, oneof: "event" },
    { no: 132, name: "validator_update", kind: "message", T: ValidatorUpdate, oneof: "event" },
    { no: 133, name: "stake_linking", kind: "message", T: StakeLinking, oneof: "event" },
    { no: 134, name: "reward_payout", kind: "message", T: RewardPayoutEvent, oneof: "event" },
    { no: 135, name: "checkpoint", kind: "message", T: CheckpointEvent, oneof: "event" },
    { no: 136, name: "key_rotation", kind: "message", T: KeyRotation, oneof: "event" },
    { no: 137, name: "state_var", kind: "message", T: StateVar, oneof: "event" },
    { no: 138, name: "network_limits", kind: "message", T: NetworkLimits, oneof: "event" },
    { no: 139, name: "transfer", kind: "message", T: Transfer, oneof: "event" },
    { no: 140, name: "ranking_event", kind: "message", T: ValidatorRankingEvent, oneof: "event" },
    { no: 141, name: "erc20_multisig_signer_event", kind: "message", T: ERC20MultiSigSignerEvent, oneof: "event" },
    { no: 142, name: "erc20_multisig_set_threshold_event", kind: "message", T: ERC20MultiSigThresholdSetEvent, oneof: "event" },
    { no: 143, name: "erc20_multisig_signer_added", kind: "message", T: ERC20MultiSigSignerAdded, oneof: "event" },
    { no: 144, name: "erc20_multisig_signer_removed", kind: "message", T: ERC20MultiSigSignerRemoved, oneof: "event" },
    { no: 145, name: "position_state_event", kind: "message", T: PositionStateEvent, oneof: "event" },
    { no: 146, name: "ethereum_key_rotation", kind: "message", T: EthereumKeyRotation, oneof: "event" },
    { no: 147, name: "protocol_upgrade_event", kind: "message", T: ProtocolUpgradeEvent, oneof: "event" },
    { no: 148, name: "begin_block", kind: "message", T: BeginBlock, oneof: "event" },
    { no: 149, name: "end_block", kind: "message", T: EndBlock, oneof: "event" },
    { no: 150, name: "protocol_upgrade_started", kind: "message", T: ProtocolUpgradeStarted, oneof: "event" },
    { no: 151, name: "settle_market", kind: "message", T: SettleMarket, oneof: "event" },
    { no: 152, name: "transaction_result", kind: "message", T: TransactionResult, oneof: "event" },
    { no: 153, name: "core_snapshot_event", kind: "message", T: CoreSnapshotData, oneof: "event" },
    { no: 154, name: "protocol_upgrade_data_node_ready", kind: "message", T: ProtocolUpgradeDataNodeReady, oneof: "event" },
    { no: 155, name: "distressed_orders", kind: "message", T: DistressedOrders, oneof: "event" },
    { no: 156, name: "expired_orders", kind: "message", T: ExpiredOrders, oneof: "event" },
    { no: 1001, name: "market", kind: "message", T: MarketEvent, oneof: "event" },
    { no: 2001, name: "tx_err_event", kind: "message", T: TxErrorEvent, oneof: "event" },
    { no: 4, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.events.v1.ExpiredOrders
 */
export const ExpiredOrders = proto3.makeMessageType(
  "vega.events.v1.ExpiredOrders",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

