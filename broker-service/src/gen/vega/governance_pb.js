// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/governance.proto (package vega, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { DataSourceDefinition } from "./data_source_pb.js";
import { DataSourceSpecToFutureBinding, LiquidityMonitoringParameters, LogNormalRiskModel, PriceMonitoringParameters, SimpleModelParams } from "./markets_pb.js";
import { NetworkParameter } from "./vega_pb.js";
import { AssetDetails, AssetDetailsUpdate } from "./assets_pb.js";

/**
 * A list of possible errors that can cause a proposal to be in state rejected or failed
 *
 * @generated from enum vega.ProposalError
 */
export const ProposalError = proto3.makeEnum(
  "vega.ProposalError",
  [
    {no: 0, name: "PROPOSAL_ERROR_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON", localName: "CLOSE_TIME_TOO_SOON"},
    {no: 2, name: "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE", localName: "CLOSE_TIME_TOO_LATE"},
    {no: 3, name: "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON", localName: "ENACT_TIME_TOO_SOON"},
    {no: 4, name: "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE", localName: "ENACT_TIME_TOO_LATE"},
    {no: 5, name: "PROPOSAL_ERROR_INSUFFICIENT_TOKENS", localName: "INSUFFICIENT_TOKENS"},
    {no: 6, name: "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY", localName: "INVALID_INSTRUMENT_SECURITY"},
    {no: 7, name: "PROPOSAL_ERROR_NO_PRODUCT", localName: "NO_PRODUCT"},
    {no: 8, name: "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT", localName: "UNSUPPORTED_PRODUCT"},
    {no: 11, name: "PROPOSAL_ERROR_NO_TRADING_MODE", localName: "NO_TRADING_MODE"},
    {no: 12, name: "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE", localName: "UNSUPPORTED_TRADING_MODE"},
    {no: 13, name: "PROPOSAL_ERROR_NODE_VALIDATION_FAILED", localName: "NODE_VALIDATION_FAILED"},
    {no: 14, name: "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD", localName: "MISSING_BUILTIN_ASSET_FIELD"},
    {no: 15, name: "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS", localName: "MISSING_ERC20_CONTRACT_ADDRESS"},
    {no: 16, name: "PROPOSAL_ERROR_INVALID_ASSET", localName: "INVALID_ASSET"},
    {no: 17, name: "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS", localName: "INCOMPATIBLE_TIMESTAMPS"},
    {no: 18, name: "PROPOSAL_ERROR_NO_RISK_PARAMETERS", localName: "NO_RISK_PARAMETERS"},
    {no: 19, name: "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY", localName: "NETWORK_PARAMETER_INVALID_KEY"},
    {no: 20, name: "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE", localName: "NETWORK_PARAMETER_INVALID_VALUE"},
    {no: 21, name: "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED", localName: "NETWORK_PARAMETER_VALIDATION_FAILED"},
    {no: 22, name: "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL", localName: "OPENING_AUCTION_DURATION_TOO_SMALL"},
    {no: 23, name: "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE", localName: "OPENING_AUCTION_DURATION_TOO_LARGE"},
    {no: 25, name: "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET", localName: "COULD_NOT_INSTANTIATE_MARKET"},
    {no: 26, name: "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT", localName: "INVALID_FUTURE_PRODUCT"},
    {no: 30, name: "PROPOSAL_ERROR_INVALID_RISK_PARAMETER", localName: "INVALID_RISK_PARAMETER"},
    {no: 31, name: "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED", localName: "MAJORITY_THRESHOLD_NOT_REACHED"},
    {no: 32, name: "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED", localName: "PARTICIPATION_THRESHOLD_NOT_REACHED"},
    {no: 33, name: "PROPOSAL_ERROR_INVALID_ASSET_DETAILS", localName: "INVALID_ASSET_DETAILS"},
    {no: 34, name: "PROPOSAL_ERROR_UNKNOWN_TYPE", localName: "UNKNOWN_TYPE"},
    {no: 35, name: "PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE", localName: "UNKNOWN_RISK_PARAMETER_TYPE"},
    {no: 36, name: "PROPOSAL_ERROR_INVALID_FREEFORM", localName: "INVALID_FREEFORM"},
    {no: 37, name: "PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE", localName: "INSUFFICIENT_EQUITY_LIKE_SHARE"},
    {no: 38, name: "PROPOSAL_ERROR_INVALID_MARKET", localName: "INVALID_MARKET"},
    {no: 39, name: "PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES", localName: "TOO_MANY_MARKET_DECIMAL_PLACES"},
    {no: 40, name: "PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS", localName: "TOO_MANY_PRICE_MONITORING_TRIGGERS"},
    {no: 41, name: "PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE", localName: "ERC20_ADDRESS_ALREADY_IN_USE"},
    {no: 42, name: "PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE", localName: "LP_PRICE_RANGE_NONPOSITIVE"},
    {no: 43, name: "PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE", localName: "LP_PRICE_RANGE_TOO_LARGE"},
    {no: 44, name: "PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE", localName: "LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE"},
    {no: 45, name: "PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE", localName: "QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE"},
  ],
);

/**
 * Future product configuration
 *
 * @generated from message vega.FutureProduct
 */
export const FutureProduct = proto3.makeMessageType(
  "vega.FutureProduct",
  () => [
    { no: 1, name: "settlement_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data_source_spec_for_settlement_data", kind: "message", T: DataSourceDefinition },
    { no: 4, name: "data_source_spec_for_trading_termination", kind: "message", T: DataSourceDefinition },
    { no: 5, name: "data_source_spec_binding", kind: "message", T: DataSourceSpecToFutureBinding },
  ],
);

/**
 * Instrument configuration
 *
 * @generated from message vega.InstrumentConfiguration
 */
export const InstrumentConfiguration = proto3.makeMessageType(
  "vega.InstrumentConfiguration",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 100, name: "future", kind: "message", T: FutureProduct, oneof: "product" },
  ],
);

/**
 * Configuration for a new market on Vega
 *
 * @generated from message vega.NewMarketConfiguration
 */
export const NewMarketConfiguration = proto3.makeMessageType(
  "vega.NewMarketConfiguration",
  () => [
    { no: 1, name: "instrument", kind: "message", T: InstrumentConfiguration },
    { no: 2, name: "decimal_places", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "price_monitoring_parameters", kind: "message", T: PriceMonitoringParameters },
    { no: 5, name: "liquidity_monitoring_parameters", kind: "message", T: LiquidityMonitoringParameters },
    { no: 100, name: "simple", kind: "message", T: SimpleModelParams, oneof: "risk_parameters" },
    { no: 101, name: "log_normal", kind: "message", T: LogNormalRiskModel, oneof: "risk_parameters" },
    { no: 6, name: "position_decimal_places", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "lp_price_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "linear_slippage_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "quadratic_slippage_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * New market on Vega
 *
 * @generated from message vega.NewMarket
 */
export const NewMarket = proto3.makeMessageType(
  "vega.NewMarket",
  () => [
    { no: 1, name: "changes", kind: "message", T: NewMarketConfiguration },
  ],
);

/**
 * Update an existing market on Vega
 *
 * @generated from message vega.UpdateMarket
 */
export const UpdateMarket = proto3.makeMessageType(
  "vega.UpdateMarket",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: UpdateMarketConfiguration },
  ],
);

/**
 * Configuration to update a market on Vega
 *
 * @generated from message vega.UpdateMarketConfiguration
 */
export const UpdateMarketConfiguration = proto3.makeMessageType(
  "vega.UpdateMarketConfiguration",
  () => [
    { no: 1, name: "instrument", kind: "message", T: UpdateInstrumentConfiguration },
    { no: 2, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "price_monitoring_parameters", kind: "message", T: PriceMonitoringParameters },
    { no: 4, name: "liquidity_monitoring_parameters", kind: "message", T: LiquidityMonitoringParameters },
    { no: 100, name: "simple", kind: "message", T: SimpleModelParams, oneof: "risk_parameters" },
    { no: 101, name: "log_normal", kind: "message", T: LogNormalRiskModel, oneof: "risk_parameters" },
    { no: 5, name: "lp_price_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "linear_slippage_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "quadratic_slippage_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Instrument configuration
 *
 * @generated from message vega.UpdateInstrumentConfiguration
 */
export const UpdateInstrumentConfiguration = proto3.makeMessageType(
  "vega.UpdateInstrumentConfiguration",
  () => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 100, name: "future", kind: "message", T: UpdateFutureProduct, oneof: "product" },
  ],
);

/**
 * Future product configuration
 *
 * @generated from message vega.UpdateFutureProduct
 */
export const UpdateFutureProduct = proto3.makeMessageType(
  "vega.UpdateFutureProduct",
  () => [
    { no: 1, name: "quote_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data_source_spec_for_settlement_data", kind: "message", T: DataSourceDefinition },
    { no: 3, name: "data_source_spec_for_trading_termination", kind: "message", T: DataSourceDefinition },
    { no: 4, name: "data_source_spec_binding", kind: "message", T: DataSourceSpecToFutureBinding },
  ],
);

/**
 * Update network configuration on Vega
 *
 * @generated from message vega.UpdateNetworkParameter
 */
export const UpdateNetworkParameter = proto3.makeMessageType(
  "vega.UpdateNetworkParameter",
  () => [
    { no: 1, name: "changes", kind: "message", T: NetworkParameter },
  ],
);

/**
 * New asset on Vega
 *
 * @generated from message vega.NewAsset
 */
export const NewAsset = proto3.makeMessageType(
  "vega.NewAsset",
  () => [
    { no: 1, name: "changes", kind: "message", T: AssetDetails },
  ],
);

/**
 * Update an existing asset on Vega
 *
 * @generated from message vega.UpdateAsset
 */
export const UpdateAsset = proto3.makeMessageType(
  "vega.UpdateAsset",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: AssetDetailsUpdate },
  ],
);

/**
 * Freeform proposal
 * This message is just used as a placeholder to sort out the nature of the
 * proposal once parsed.
 *
 * @generated from message vega.NewFreeform
 */
export const NewFreeform = proto3.makeMessageType(
  "vega.NewFreeform",
  [],
);

/**
 * Terms for a governance proposal on Vega
 *
 * @generated from message vega.ProposalTerms
 */
export const ProposalTerms = proto3.makeMessageType(
  "vega.ProposalTerms",
  () => [
    { no: 1, name: "closing_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "enactment_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "validation_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 101, name: "update_market", kind: "message", T: UpdateMarket, oneof: "change" },
    { no: 102, name: "new_market", kind: "message", T: NewMarket, oneof: "change" },
    { no: 103, name: "update_network_parameter", kind: "message", T: UpdateNetworkParameter, oneof: "change" },
    { no: 104, name: "new_asset", kind: "message", T: NewAsset, oneof: "change" },
    { no: 105, name: "new_freeform", kind: "message", T: NewFreeform, oneof: "change" },
    { no: 106, name: "update_asset", kind: "message", T: UpdateAsset, oneof: "change" },
  ],
);

/**
 * The rationale behind a proposal.
 *
 * @generated from message vega.ProposalRationale
 */
export const ProposalRationale = proto3.makeMessageType(
  "vega.ProposalRationale",
  () => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Governance data
 *
 * @generated from message vega.GovernanceData
 */
export const GovernanceData = proto3.makeMessageType(
  "vega.GovernanceData",
  () => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
    { no: 2, name: "yes", kind: "message", T: Vote, repeated: true },
    { no: 3, name: "no", kind: "message", T: Vote, repeated: true },
    { no: 4, name: "yes_party", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Vote} },
    { no: 5, name: "no_party", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Vote} },
  ],
);

/**
 * Governance proposal
 *
 * @generated from message vega.Proposal
 */
export const Proposal = proto3.makeMessageType(
  "vega.Proposal",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(Proposal_State) },
    { no: 5, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "terms", kind: "message", T: ProposalTerms },
    { no: 7, name: "reason", kind: "enum", T: proto3.getEnumType(ProposalError), opt: true },
    { no: 8, name: "error_details", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "rationale", kind: "message", T: ProposalRationale },
    { no: 10, name: "required_participation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "required_majority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "required_liquidity_provider_participation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "required_liquidity_provider_majority", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Proposal state transition:
 * Open ->
 *   - Passed -> Enacted.
 *   - Passed -> Failed.
 *   - Declined
 * Rejected
 * Proposal can enter Failed state from any other state
 *
 * @generated from enum vega.Proposal.State
 */
export const Proposal_State = proto3.makeEnum(
  "vega.Proposal.State",
  [
    {no: 0, name: "STATE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STATE_FAILED", localName: "FAILED"},
    {no: 2, name: "STATE_OPEN", localName: "OPEN"},
    {no: 3, name: "STATE_PASSED", localName: "PASSED"},
    {no: 4, name: "STATE_REJECTED", localName: "REJECTED"},
    {no: 5, name: "STATE_DECLINED", localName: "DECLINED"},
    {no: 6, name: "STATE_ENACTED", localName: "ENACTED"},
    {no: 7, name: "STATE_WAITING_FOR_NODE_VOTE", localName: "WAITING_FOR_NODE_VOTE"},
  ],
);

/**
 * Governance vote
 *
 * @generated from message vega.Vote
 */
export const Vote = proto3.makeMessageType(
  "vega.Vote",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "enum", T: proto3.getEnumType(Vote_Value) },
    { no: 3, name: "proposal_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "total_governance_token_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "total_governance_token_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "total_equity_like_share_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Vote value
 *
 * @generated from enum vega.Vote.Value
 */
export const Vote_Value = proto3.makeEnum(
  "vega.Vote.Value",
  [
    {no: 0, name: "VALUE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "VALUE_NO", localName: "NO"},
    {no: 2, name: "VALUE_YES", localName: "YES"},
  ],
);

