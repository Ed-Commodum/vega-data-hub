// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/vega.proto (package vega, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Market_State, Market_TradingMode, PriceMonitoringTrigger } from "./markets_pb.js";

/**
 * A side relates to the direction of an order, to Buy, or Sell
 *
 * @generated from enum vega.Side
 */
export const Side = proto3.makeEnum(
  "vega.Side",
  [
    {no: 0, name: "SIDE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "SIDE_BUY", localName: "BUY"},
    {no: 2, name: "SIDE_SELL", localName: "SELL"},
  ],
);

/**
 * Represents a set of time intervals that are used when querying for candle-stick data
 *
 * @generated from enum vega.Interval
 */
export const Interval = proto3.makeEnum(
  "vega.Interval",
  [
    {no: 0, name: "INTERVAL_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: -1, name: "INTERVAL_BLOCK", localName: "BLOCK"},
    {no: 60, name: "INTERVAL_I1M", localName: "I1M"},
    {no: 300, name: "INTERVAL_I5M", localName: "I5M"},
    {no: 900, name: "INTERVAL_I15M", localName: "I15M"},
    {no: 3600, name: "INTERVAL_I1H", localName: "I1H"},
    {no: 21600, name: "INTERVAL_I6H", localName: "I6H"},
    {no: 86400, name: "INTERVAL_I1D", localName: "I1D"},
  ],
);

/**
 * @generated from enum vega.PositionStatus
 */
export const PositionStatus = proto3.makeEnum(
  "vega.PositionStatus",
  [
    {no: 0, name: "POSITION_STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "POSITION_STATUS_ORDERS_CLOSED", localName: "ORDERS_CLOSED"},
    {no: 2, name: "POSITION_STATUS_CLOSED_OUT", localName: "CLOSED_OUT"},
  ],
);

/**
 * Auction triggers indicate what condition triggered an auction (if market is in auction mode)
 *
 * @generated from enum vega.AuctionTrigger
 */
export const AuctionTrigger = proto3.makeEnum(
  "vega.AuctionTrigger",
  [
    {no: 0, name: "AUCTION_TRIGGER_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "AUCTION_TRIGGER_BATCH", localName: "BATCH"},
    {no: 2, name: "AUCTION_TRIGGER_OPENING", localName: "OPENING"},
    {no: 3, name: "AUCTION_TRIGGER_PRICE", localName: "PRICE"},
    {no: 4, name: "AUCTION_TRIGGER_LIQUIDITY", localName: "LIQUIDITY"},
    {no: 5, name: "AUCTION_TRIGGER_LIQUIDITY_TARGET_NOT_MET", localName: "LIQUIDITY_TARGET_NOT_MET"},
    {no: 6, name: "AUCTION_TRIGGER_UNABLE_TO_DEPLOY_LP_ORDERS", localName: "UNABLE_TO_DEPLOY_LP_ORDERS"},
  ],
);

/**
 * A pegged reference defines which price point a pegged order is linked to - meaning
 * the price for a pegged order is calculated from the value of the reference price point
 *
 * @generated from enum vega.PeggedReference
 */
export const PeggedReference = proto3.makeEnum(
  "vega.PeggedReference",
  [
    {no: 0, name: "PEGGED_REFERENCE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "PEGGED_REFERENCE_MID", localName: "MID"},
    {no: 2, name: "PEGGED_REFERENCE_BEST_BID", localName: "BEST_BID"},
    {no: 3, name: "PEGGED_REFERENCE_BEST_ASK", localName: "BEST_ASK"},
  ],
);

/**
 * OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue
 * with an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`
 *
 * @generated from enum vega.OrderError
 */
export const OrderError = proto3.makeEnum(
  "vega.OrderError",
  [
    {no: 0, name: "ORDER_ERROR_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ORDER_ERROR_INVALID_MARKET_ID", localName: "INVALID_MARKET_ID"},
    {no: 2, name: "ORDER_ERROR_INVALID_ORDER_ID", localName: "INVALID_ORDER_ID"},
    {no: 3, name: "ORDER_ERROR_OUT_OF_SEQUENCE", localName: "OUT_OF_SEQUENCE"},
    {no: 4, name: "ORDER_ERROR_INVALID_REMAINING_SIZE", localName: "INVALID_REMAINING_SIZE"},
    {no: 5, name: "ORDER_ERROR_TIME_FAILURE", localName: "TIME_FAILURE"},
    {no: 6, name: "ORDER_ERROR_REMOVAL_FAILURE", localName: "REMOVAL_FAILURE"},
    {no: 7, name: "ORDER_ERROR_INVALID_EXPIRATION_DATETIME", localName: "INVALID_EXPIRATION_DATETIME"},
    {no: 8, name: "ORDER_ERROR_INVALID_ORDER_REFERENCE", localName: "INVALID_ORDER_REFERENCE"},
    {no: 9, name: "ORDER_ERROR_EDIT_NOT_ALLOWED", localName: "EDIT_NOT_ALLOWED"},
    {no: 10, name: "ORDER_ERROR_AMEND_FAILURE", localName: "AMEND_FAILURE"},
    {no: 11, name: "ORDER_ERROR_NOT_FOUND", localName: "NOT_FOUND"},
    {no: 12, name: "ORDER_ERROR_INVALID_PARTY_ID", localName: "INVALID_PARTY_ID"},
    {no: 13, name: "ORDER_ERROR_MARKET_CLOSED", localName: "MARKET_CLOSED"},
    {no: 14, name: "ORDER_ERROR_MARGIN_CHECK_FAILED", localName: "MARGIN_CHECK_FAILED"},
    {no: 15, name: "ORDER_ERROR_MISSING_GENERAL_ACCOUNT", localName: "MISSING_GENERAL_ACCOUNT"},
    {no: 16, name: "ORDER_ERROR_INTERNAL_ERROR", localName: "INTERNAL_ERROR"},
    {no: 17, name: "ORDER_ERROR_INVALID_SIZE", localName: "INVALID_SIZE"},
    {no: 18, name: "ORDER_ERROR_INVALID_PERSISTENCE", localName: "INVALID_PERSISTENCE"},
    {no: 19, name: "ORDER_ERROR_INVALID_TYPE", localName: "INVALID_TYPE"},
    {no: 20, name: "ORDER_ERROR_SELF_TRADING", localName: "SELF_TRADING"},
    {no: 21, name: "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES", localName: "INSUFFICIENT_FUNDS_TO_PAY_FEES"},
    {no: 22, name: "ORDER_ERROR_INCORRECT_MARKET_TYPE", localName: "INCORRECT_MARKET_TYPE"},
    {no: 23, name: "ORDER_ERROR_INVALID_TIME_IN_FORCE", localName: "INVALID_TIME_IN_FORCE"},
    {no: 24, name: "ORDER_ERROR_CANNOT_SEND_GFN_ORDER_DURING_AN_AUCTION", localName: "CANNOT_SEND_GFN_ORDER_DURING_AN_AUCTION"},
    {no: 25, name: "ORDER_ERROR_CANNOT_SEND_GFA_ORDER_DURING_CONTINUOUS_TRADING", localName: "CANNOT_SEND_GFA_ORDER_DURING_CONTINUOUS_TRADING"},
    {no: 26, name: "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT", localName: "CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT"},
    {no: 27, name: "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT", localName: "EXPIRYAT_BEFORE_CREATEDAT"},
    {no: 28, name: "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT", localName: "CANNOT_HAVE_GTC_AND_EXPIRYAT"},
    {no: 29, name: "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC", localName: "CANNOT_AMEND_TO_FOK_OR_IOC"},
    {no: 30, name: "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN", localName: "CANNOT_AMEND_TO_GFA_OR_GFN"},
    {no: 31, name: "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN", localName: "CANNOT_AMEND_FROM_GFA_OR_GFN"},
    {no: 32, name: "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION", localName: "CANNOT_SEND_IOC_ORDER_DURING_AUCTION"},
    {no: 33, name: "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION", localName: "CANNOT_SEND_FOK_ORDER_DURING_AUCTION"},
    {no: 34, name: "ORDER_ERROR_MUST_BE_LIMIT_ORDER", localName: "MUST_BE_LIMIT_ORDER"},
    {no: 35, name: "ORDER_ERROR_MUST_BE_GTT_OR_GTC", localName: "MUST_BE_GTT_OR_GTC"},
    {no: 36, name: "ORDER_ERROR_WITHOUT_REFERENCE_PRICE", localName: "WITHOUT_REFERENCE_PRICE"},
    {no: 37, name: "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE", localName: "BUY_CANNOT_REFERENCE_BEST_ASK_PRICE"},
    {no: 40, name: "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO", localName: "OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO"},
    {no: 41, name: "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE", localName: "SELL_CANNOT_REFERENCE_BEST_BID_PRICE"},
    {no: 42, name: "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO", localName: "OFFSET_MUST_BE_GREATER_THAN_ZERO"},
    {no: 43, name: "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE", localName: "INSUFFICIENT_ASSET_BALANCE"},
    {no: 44, name: "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER", localName: "CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER"},
    {no: 45, name: "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER", localName: "UNABLE_TO_REPRICE_PEGGED_ORDER"},
    {no: 46, name: "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER", localName: "UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER"},
    {no: 47, name: "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS", localName: "NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"},
    {no: 48, name: "ORDER_ERROR_TOO_MANY_PEGGED_ORDERS", localName: "TOO_MANY_PEGGED_ORDERS"},
    {no: 49, name: "ORDER_ERROR_POST_ONLY_ORDER_WOULD_TRADE", localName: "POST_ONLY_ORDER_WOULD_TRADE"},
    {no: 50, name: "ORDER_ERROR_REDUCE_ONLY_ORDER_WOULD_NOT_REDUCE_POSITION", localName: "REDUCE_ONLY_ORDER_WOULD_NOT_REDUCE_POSITION"},
  ],
);

/**
 * The Vega blockchain status as reported by the node the caller is connected to
 *
 * @generated from enum vega.ChainStatus
 */
export const ChainStatus = proto3.makeEnum(
  "vega.ChainStatus",
  [
    {no: 0, name: "CHAIN_STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "CHAIN_STATUS_DISCONNECTED", localName: "DISCONNECTED"},
    {no: 2, name: "CHAIN_STATUS_REPLAYING", localName: "REPLAYING"},
    {no: 3, name: "CHAIN_STATUS_CONNECTED", localName: "CONNECTED"},
  ],
);

/**
 * Various collateral/account types as used by Vega
 *
 * @generated from enum vega.AccountType
 */
export const AccountType = proto3.makeEnum(
  "vega.AccountType",
  [
    {no: 0, name: "ACCOUNT_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ACCOUNT_TYPE_INSURANCE", localName: "INSURANCE"},
    {no: 2, name: "ACCOUNT_TYPE_SETTLEMENT", localName: "SETTLEMENT"},
    {no: 3, name: "ACCOUNT_TYPE_MARGIN", localName: "MARGIN"},
    {no: 4, name: "ACCOUNT_TYPE_GENERAL", localName: "GENERAL"},
    {no: 5, name: "ACCOUNT_TYPE_FEES_INFRASTRUCTURE", localName: "FEES_INFRASTRUCTURE"},
    {no: 6, name: "ACCOUNT_TYPE_FEES_LIQUIDITY", localName: "FEES_LIQUIDITY"},
    {no: 7, name: "ACCOUNT_TYPE_FEES_MAKER", localName: "FEES_MAKER"},
    {no: 9, name: "ACCOUNT_TYPE_BOND", localName: "BOND"},
    {no: 10, name: "ACCOUNT_TYPE_EXTERNAL", localName: "EXTERNAL"},
    {no: 11, name: "ACCOUNT_TYPE_GLOBAL_INSURANCE", localName: "GLOBAL_INSURANCE"},
    {no: 12, name: "ACCOUNT_TYPE_GLOBAL_REWARD", localName: "GLOBAL_REWARD"},
    {no: 13, name: "ACCOUNT_TYPE_PENDING_TRANSFERS", localName: "PENDING_TRANSFERS"},
    {no: 14, name: "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES", localName: "REWARD_MAKER_PAID_FEES"},
    {no: 15, name: "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES", localName: "REWARD_MAKER_RECEIVED_FEES"},
    {no: 16, name: "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES", localName: "REWARD_LP_RECEIVED_FEES"},
    {no: 17, name: "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS", localName: "REWARD_MARKET_PROPOSERS"},
  ],
);

/**
 * Transfers can occur between parties on Vega, these are the types that indicate why a transfer took place
 *
 * @generated from enum vega.TransferType
 */
export const TransferType = proto3.makeEnum(
  "vega.TransferType",
  [
    {no: 0, name: "TRANSFER_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TRANSFER_TYPE_LOSS", localName: "LOSS"},
    {no: 2, name: "TRANSFER_TYPE_WIN", localName: "WIN"},
    {no: 4, name: "TRANSFER_TYPE_MTM_LOSS", localName: "MTM_LOSS"},
    {no: 5, name: "TRANSFER_TYPE_MTM_WIN", localName: "MTM_WIN"},
    {no: 6, name: "TRANSFER_TYPE_MARGIN_LOW", localName: "MARGIN_LOW"},
    {no: 7, name: "TRANSFER_TYPE_MARGIN_HIGH", localName: "MARGIN_HIGH"},
    {no: 8, name: "TRANSFER_TYPE_MARGIN_CONFISCATED", localName: "MARGIN_CONFISCATED"},
    {no: 9, name: "TRANSFER_TYPE_MAKER_FEE_PAY", localName: "MAKER_FEE_PAY"},
    {no: 10, name: "TRANSFER_TYPE_MAKER_FEE_RECEIVE", localName: "MAKER_FEE_RECEIVE"},
    {no: 11, name: "TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY", localName: "INFRASTRUCTURE_FEE_PAY"},
    {no: 12, name: "TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE", localName: "INFRASTRUCTURE_FEE_DISTRIBUTE"},
    {no: 13, name: "TRANSFER_TYPE_LIQUIDITY_FEE_PAY", localName: "LIQUIDITY_FEE_PAY"},
    {no: 14, name: "TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE", localName: "LIQUIDITY_FEE_DISTRIBUTE"},
    {no: 15, name: "TRANSFER_TYPE_BOND_LOW", localName: "BOND_LOW"},
    {no: 16, name: "TRANSFER_TYPE_BOND_HIGH", localName: "BOND_HIGH"},
    {no: 18, name: "TRANSFER_TYPE_WITHDRAW", localName: "WITHDRAW"},
    {no: 19, name: "TRANSFER_TYPE_DEPOSIT", localName: "DEPOSIT"},
    {no: 20, name: "TRANSFER_TYPE_BOND_SLASHING", localName: "BOND_SLASHING"},
    {no: 21, name: "TRANSFER_TYPE_REWARD_PAYOUT", localName: "REWARD_PAYOUT"},
    {no: 22, name: "TRANSFER_TYPE_TRANSFER_FUNDS_SEND", localName: "TRANSFER_FUNDS_SEND"},
    {no: 23, name: "TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE", localName: "TRANSFER_FUNDS_DISTRIBUTE"},
    {no: 24, name: "TRANSFER_TYPE_CLEAR_ACCOUNT", localName: "CLEAR_ACCOUNT"},
    {no: 25, name: "TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE", localName: "CHECKPOINT_BALANCE_RESTORE"},
  ],
);

/**
 * @generated from enum vega.DispatchMetric
 */
export const DispatchMetric = proto3.makeEnum(
  "vega.DispatchMetric",
  [
    {no: 0, name: "DISPATCH_METRIC_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "DISPATCH_METRIC_MAKER_FEES_PAID", localName: "MAKER_FEES_PAID"},
    {no: 2, name: "DISPATCH_METRIC_MAKER_FEES_RECEIVED", localName: "MAKER_FEES_RECEIVED"},
    {no: 3, name: "DISPATCH_METRIC_LP_FEES_RECEIVED", localName: "LP_FEES_RECEIVED"},
    {no: 4, name: "DISPATCH_METRIC_MARKET_VALUE", localName: "MARKET_VALUE"},
  ],
);

/**
 * Node status type
 *
 * @generated from enum vega.NodeStatus
 */
export const NodeStatus = proto3.makeEnum(
  "vega.NodeStatus",
  [
    {no: 0, name: "NODE_STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "NODE_STATUS_VALIDATOR", localName: "VALIDATOR"},
    {no: 2, name: "NODE_STATUS_NON_VALIDATOR", localName: "NON_VALIDATOR"},
  ],
);

/**
 * What epoch action has occurred
 *
 * @generated from enum vega.EpochAction
 */
export const EpochAction = proto3.makeEnum(
  "vega.EpochAction",
  [
    {no: 0, name: "EPOCH_ACTION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "EPOCH_ACTION_START", localName: "START"},
    {no: 2, name: "EPOCH_ACTION_END", localName: "END"},
  ],
);

/**
 * Validation status of the node
 *
 * @generated from enum vega.ValidatorNodeStatus
 */
export const ValidatorNodeStatus = proto3.makeEnum(
  "vega.ValidatorNodeStatus",
  [
    {no: 0, name: "VALIDATOR_NODE_STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "VALIDATOR_NODE_STATUS_TENDERMINT", localName: "TENDERMINT"},
    {no: 2, name: "VALIDATOR_NODE_STATUS_ERSATZ", localName: "ERSATZ"},
    {no: 3, name: "VALIDATOR_NODE_STATUS_PENDING", localName: "PENDING"},
  ],
);

/**
 * A party represents an entity who wishes to trade on or query a Vega network
 *
 * @generated from message vega.Party
 */
export const Party = proto3.makeMessageType(
  "vega.Party",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Risk factors are used to calculate the current risk associated with orders trading on a given market
 *
 * @generated from message vega.RiskFactor
 */
export const RiskFactor = proto3.makeMessageType(
  "vega.RiskFactor",
  () => [
    { no: 1, name: "market", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "short", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "long", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET
 * They can be used for any limit order that is valid during continuous trading
 *
 * @generated from message vega.PeggedOrder
 */
export const PeggedOrder = proto3.makeMessageType(
  "vega.PeggedOrder",
  () => [
    { no: 1, name: "reference", kind: "enum", T: proto3.getEnumType(PeggedReference) },
    { no: 2, name: "offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties
 *
 * @generated from message vega.Order
 */
export const Order = proto3.makeMessageType(
  "vega.Order",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "side", kind: "enum", T: proto3.getEnumType(Side) },
    { no: 5, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "remaining", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "time_in_force", kind: "enum", T: proto3.getEnumType(Order_TimeInForce) },
    { no: 9, name: "type", kind: "enum", T: proto3.getEnumType(Order_Type) },
    { no: 10, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "status", kind: "enum", T: proto3.getEnumType(Order_Status) },
    { no: 12, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "reason", kind: "enum", T: proto3.getEnumType(OrderError), opt: true },
    { no: 15, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "batch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "pegged_order", kind: "message", T: PeggedOrder },
    { no: 19, name: "liquidity_provision_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "post_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "reduce_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Time In Force for an order
 *
 * @generated from enum vega.Order.TimeInForce
 */
export const Order_TimeInForce = proto3.makeEnum(
  "vega.Order.TimeInForce",
  [
    {no: 0, name: "TIME_IN_FORCE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TIME_IN_FORCE_GTC", localName: "GTC"},
    {no: 2, name: "TIME_IN_FORCE_GTT", localName: "GTT"},
    {no: 3, name: "TIME_IN_FORCE_IOC", localName: "IOC"},
    {no: 4, name: "TIME_IN_FORCE_FOK", localName: "FOK"},
    {no: 5, name: "TIME_IN_FORCE_GFA", localName: "GFA"},
    {no: 6, name: "TIME_IN_FORCE_GFN", localName: "GFN"},
  ],
);

/**
 * Type values for an order
 *
 * @generated from enum vega.Order.Type
 */
export const Order_Type = proto3.makeEnum(
  "vega.Order.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_LIMIT", localName: "LIMIT"},
    {no: 2, name: "TYPE_MARKET", localName: "MARKET"},
    {no: 3, name: "TYPE_NETWORK", localName: "NETWORK"},
  ],
);

/**
 * Status values for an order
 *
 * @generated from enum vega.Order.Status
 */
export const Order_Status = proto3.makeEnum(
  "vega.Order.Status",
  [
    {no: 0, name: "STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STATUS_ACTIVE", localName: "ACTIVE"},
    {no: 2, name: "STATUS_EXPIRED", localName: "EXPIRED"},
    {no: 3, name: "STATUS_CANCELLED", localName: "CANCELLED"},
    {no: 4, name: "STATUS_STOPPED", localName: "STOPPED"},
    {no: 5, name: "STATUS_FILLED", localName: "FILLED"},
    {no: 6, name: "STATUS_REJECTED", localName: "REJECTED"},
    {no: 7, name: "STATUS_PARTIALLY_FILLED", localName: "PARTIALLY_FILLED"},
    {no: 8, name: "STATUS_PARKED", localName: "PARKED"},
  ],
);

/**
 * Used when cancelling an order
 *
 * @generated from message vega.OrderCancellationConfirmation
 */
export const OrderCancellationConfirmation = proto3.makeMessageType(
  "vega.OrderCancellationConfirmation",
  () => [
    { no: 1, name: "order", kind: "message", T: Order },
  ],
);

/**
 * Used when confirming an order
 *
 * @generated from message vega.OrderConfirmation
 */
export const OrderConfirmation = proto3.makeMessageType(
  "vega.OrderConfirmation",
  () => [
    { no: 1, name: "order", kind: "message", T: Order },
    { no: 2, name: "trades", kind: "message", T: Trade, repeated: true },
    { no: 3, name: "passive_orders_affected", kind: "message", T: Order, repeated: true },
  ],
);

/**
 * AuctionIndicativeState is used to emit an event with the indicative price/volume per market during an auction
 *
 * @generated from message vega.AuctionIndicativeState
 */
export const AuctionIndicativeState = proto3.makeMessageType(
  "vega.AuctionIndicativeState",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "indicative_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "indicative_volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "auction_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "auction_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega
 *
 * @generated from message vega.Trade
 */
export const Trade = proto3.makeMessageType(
  "vega.Trade",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "buyer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "seller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "aggressor", kind: "enum", T: proto3.getEnumType(Side) },
    { no: 8, name: "buy_order", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "sell_order", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "type", kind: "enum", T: proto3.getEnumType(Trade_Type) },
    { no: 12, name: "buyer_fee", kind: "message", T: Fee },
    { no: 13, name: "seller_fee", kind: "message", T: Fee },
    { no: 14, name: "buyer_auction_batch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "seller_auction_batch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Type values for a trade
 *
 * @generated from enum vega.Trade.Type
 */
export const Trade_Type = proto3.makeEnum(
  "vega.Trade.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_DEFAULT", localName: "DEFAULT"},
    {no: 2, name: "TYPE_NETWORK_CLOSE_OUT_GOOD", localName: "NETWORK_CLOSE_OUT_GOOD"},
    {no: 3, name: "TYPE_NETWORK_CLOSE_OUT_BAD", localName: "NETWORK_CLOSE_OUT_BAD"},
  ],
);

/**
 * Represents any fees paid by a party, resulting from a trade
 *
 * @generated from message vega.Fee
 */
export const Fee = proto3.makeMessageType(
  "vega.Fee",
  () => [
    { no: 1, name: "maker_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "infrastructure_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "liquidity_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.TradeSet
 */
export const TradeSet = proto3.makeMessageType(
  "vega.TradeSet",
  () => [
    { no: 1, name: "trades", kind: "message", T: Trade, repeated: true },
  ],
);

/**
 * Represents the high, low, open, and closing prices for an interval of trading,
 * referred to commonly as a candlestick or candle
 *
 * @generated from message vega.Candle
 */
export const Candle = proto3.makeMessageType(
  "vega.Candle",
  () => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "datetime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "high", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "low", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "open", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "close", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "interval", kind: "enum", T: proto3.getEnumType(Interval) },
  ],
);

/**
 * Represents a price level from market depth or order book data
 *
 * @generated from message vega.PriceLevel
 */
export const PriceLevel = proto3.makeMessageType(
  "vega.PriceLevel",
  () => [
    { no: 1, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number_of_orders", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Represents market depth or order book data for the specified market on Vega
 *
 * @generated from message vega.MarketDepth
 */
export const MarketDepth = proto3.makeMessageType(
  "vega.MarketDepth",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buy", kind: "message", T: PriceLevel, repeated: true },
    { no: 3, name: "sell", kind: "message", T: PriceLevel, repeated: true },
    { no: 4, name: "sequence_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Represents the changed market depth since the last update
 *
 * @generated from message vega.MarketDepthUpdate
 */
export const MarketDepthUpdate = proto3.makeMessageType(
  "vega.MarketDepthUpdate",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buy", kind: "message", T: PriceLevel, repeated: true },
    { no: 3, name: "sell", kind: "message", T: PriceLevel, repeated: true },
    { no: 4, name: "sequence_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "previous_sequence_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Represents position data for a party on the specified market on Vega
 *
 * @generated from message vega.Position
 */
export const Position = proto3.makeMessageType(
  "vega.Position",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "open_volume", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "realised_pnl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "unrealised_pnl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "average_entry_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "loss_socialisation_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "position_status", kind: "enum", T: proto3.getEnumType(PositionStatus) },
  ],
);

/**
 * @generated from message vega.PositionTrade
 */
export const PositionTrade = proto3.makeMessageType(
  "vega.PositionTrade",
  () => [
    { no: 1, name: "volume", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A deposit on to the Vega network
 *
 * @generated from message vega.Deposit
 */
export const Deposit = proto3.makeMessageType(
  "vega.Deposit",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Deposit_Status) },
    { no: 3, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "credited_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "created_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * The status of the deposit
 *
 * @generated from enum vega.Deposit.Status
 */
export const Deposit_Status = proto3.makeEnum(
  "vega.Deposit.Status",
  [
    {no: 0, name: "STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STATUS_OPEN", localName: "OPEN"},
    {no: 2, name: "STATUS_CANCELLED", localName: "CANCELLED"},
    {no: 3, name: "STATUS_FINALIZED", localName: "FINALIZED"},
  ],
);

/**
 * A withdrawal from the Vega network
 *
 * @generated from message vega.Withdrawal
 */
export const Withdrawal = proto3.makeMessageType(
  "vega.Withdrawal",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(Withdrawal_Status) },
    { no: 6, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "created_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "withdrawn_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ext", kind: "message", T: WithdrawExt },
  ],
);

/**
 * The status of the withdrawal
 *
 * @generated from enum vega.Withdrawal.Status
 */
export const Withdrawal_Status = proto3.makeEnum(
  "vega.Withdrawal.Status",
  [
    {no: 0, name: "STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STATUS_OPEN", localName: "OPEN"},
    {no: 2, name: "STATUS_REJECTED", localName: "REJECTED"},
    {no: 3, name: "STATUS_FINALIZED", localName: "FINALIZED"},
  ],
);

/**
 * Withdrawal external details
 *
 * @generated from message vega.WithdrawExt
 */
export const WithdrawExt = proto3.makeMessageType(
  "vega.WithdrawExt",
  () => [
    { no: 1, name: "erc20", kind: "message", T: Erc20WithdrawExt, oneof: "ext" },
  ],
);

/**
 * An extension of data required for the withdraw submissions
 *
 * @generated from message vega.Erc20WithdrawExt
 */
export const Erc20WithdrawExt = proto3.makeMessageType(
  "vega.Erc20WithdrawExt",
  () => [
    { no: 1, name: "receiver_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents an account for an asset on Vega for a particular owner or party
 *
 * @generated from message vega.Account
 */
export const Account = proto3.makeMessageType(
  "vega.Account",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type", kind: "enum", T: proto3.getEnumType(AccountType) },
  ],
);

/**
 * Asset value information used within a transfer
 *
 * @generated from message vega.FinancialAmount
 */
export const FinancialAmount = proto3.makeMessageType(
  "vega.FinancialAmount",
  () => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents a financial transfer within Vega
 *
 * @generated from message vega.Transfer
 */
export const Transfer = proto3.makeMessageType(
  "vega.Transfer",
  () => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: FinancialAmount },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(TransferType) },
    { no: 4, name: "min_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.DispatchStrategy
 */
export const DispatchStrategy = proto3.makeMessageType(
  "vega.DispatchStrategy",
  () => [
    { no: 1, name: "asset_for_metric", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metric", kind: "enum", T: proto3.getEnumType(DispatchMetric) },
    { no: 3, name: "markets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Represents a request to transfer from one set of accounts to another
 *
 * @generated from message vega.TransferRequest
 */
export const TransferRequest = proto3.makeMessageType(
  "vega.TransferRequest",
  () => [
    { no: 1, name: "from_account", kind: "message", T: Account, repeated: true },
    { no: 2, name: "to_account", kind: "message", T: Account, repeated: true },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "type", kind: "enum", T: proto3.getEnumType(TransferType) },
  ],
);

/**
 * @generated from message vega.AccountDetails
 */
export const AccountDetails = proto3.makeMessageType(
  "vega.AccountDetails",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Represents a ledger entry on Vega
 *
 * @generated from message vega.LedgerEntry
 */
export const LedgerEntry = proto3.makeMessageType(
  "vega.LedgerEntry",
  () => [
    { no: 1, name: "from_account", kind: "message", T: AccountDetails },
    { no: 2, name: "to_account", kind: "message", T: AccountDetails },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(TransferType) },
    { no: 5, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "from_account_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "to_account_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the balance for an account during a transfer
 *
 * @generated from message vega.PostTransferBalance
 */
export const PostTransferBalance = proto3.makeMessageType(
  "vega.PostTransferBalance",
  () => [
    { no: 1, name: "account", kind: "message", T: AccountDetails },
    { no: 2, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.LedgerMovement
 */
export const LedgerMovement = proto3.makeMessageType(
  "vega.LedgerMovement",
  () => [
    { no: 1, name: "entries", kind: "message", T: LedgerEntry, repeated: true },
    { no: 2, name: "balances", kind: "message", T: PostTransferBalance, repeated: true },
  ],
);

/**
 * Represents the margin levels for a party on a market at a given time
 *
 * @generated from message vega.MarginLevels
 */
export const MarginLevels = proto3.makeMessageType(
  "vega.MarginLevels",
  () => [
    { no: 1, name: "maintenance_margin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "search_level", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "initial_margin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "collateral_release_level", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Represents data generated by a market when open
 *
 * @generated from message vega.MarketData
 */
export const MarketData = proto3.makeMessageType(
  "vega.MarketData",
  () => [
    { no: 1, name: "mark_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "best_bid_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "best_bid_volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "best_offer_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "best_offer_volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "best_static_bid_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "best_static_bid_volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "best_static_offer_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "best_static_offer_volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "mid_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "static_mid_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "market", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "open_interest", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "auction_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "auction_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "indicative_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "indicative_volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "market_trading_mode", kind: "enum", T: proto3.getEnumType(Market_TradingMode) },
    { no: 20, name: "trigger", kind: "enum", T: proto3.getEnumType(AuctionTrigger) },
    { no: 21, name: "extension_trigger", kind: "enum", T: proto3.getEnumType(AuctionTrigger) },
    { no: 22, name: "target_stake", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "supplied_stake", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "price_monitoring_bounds", kind: "message", T: PriceMonitoringBounds, repeated: true },
    { no: 25, name: "market_value_proxy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "liquidity_provider_fee_share", kind: "message", T: LiquidityProviderFeeShare, repeated: true },
    { no: 27, name: "market_state", kind: "enum", T: proto3.getEnumType(Market_State) },
    { no: 28, name: "next_mark_to_market", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 29, name: "last_traded_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The equity like share of liquidity fee for each liquidity provider
 *
 * @generated from message vega.LiquidityProviderFeeShare
 */
export const LiquidityProviderFeeShare = proto3.makeMessageType(
  "vega.LiquidityProviderFeeShare",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "equity_like_share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "average_entry_valuation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "average_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents a list of valid (at the current timestamp) price ranges per associated trigger
 *
 * @generated from message vega.PriceMonitoringBounds
 */
export const PriceMonitoringBounds = proto3.makeMessageType(
  "vega.PriceMonitoringBounds",
  () => [
    { no: 1, name: "min_valid_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_valid_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "trigger", kind: "message", T: PriceMonitoringTrigger },
    { no: 4, name: "reference_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents Vega domain specific error information over gRPC/Protobuf
 *
 * @generated from message vega.ErrorDetail
 */
export const ErrorDetail = proto3.makeMessageType(
  "vega.ErrorDetail",
  () => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "inner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents a network parameter on Vega
 *
 * @generated from message vega.NetworkParameter
 */
export const NetworkParameter = proto3.makeMessageType(
  "vega.NetworkParameter",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Network limits, defined in the genesis file
 *
 * @generated from message vega.NetworkLimits
 */
export const NetworkLimits = proto3.makeMessageType(
  "vega.NetworkLimits",
  () => [
    { no: 1, name: "can_propose_market", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "can_propose_asset", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "propose_market_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "propose_asset_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "genesis_loaded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "propose_market_enabled_from", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "propose_asset_enabled_from", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Represents a liquidity order
 *
 * @generated from message vega.LiquidityOrder
 */
export const LiquidityOrder = proto3.makeMessageType(
  "vega.LiquidityOrder",
  () => [
    { no: 1, name: "reference", kind: "enum", T: proto3.getEnumType(PeggedReference) },
    { no: 2, name: "proportion", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A pair of a liquidity order and the ID of the generated order by the core
 *
 * @generated from message vega.LiquidityOrderReference
 */
export const LiquidityOrderReference = proto3.makeMessageType(
  "vega.LiquidityOrderReference",
  () => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "liquidity_order", kind: "message", T: LiquidityOrder },
  ],
);

/**
 * An Liquidity provider commitment
 *
 * @generated from message vega.LiquidityProvision
 */
export const LiquidityProvision = proto3.makeMessageType(
  "vega.LiquidityProvision",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "commitment_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "sells", kind: "message", T: LiquidityOrderReference, repeated: true },
    { no: 9, name: "buys", kind: "message", T: LiquidityOrderReference, repeated: true },
    { no: 10, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "status", kind: "enum", T: proto3.getEnumType(LiquidityProvision_Status) },
    { no: 12, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Status of a liquidity provision order
 *
 * @generated from enum vega.LiquidityProvision.Status
 */
export const LiquidityProvision_Status = proto3.makeEnum(
  "vega.LiquidityProvision.Status",
  [
    {no: 0, name: "STATUS_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STATUS_ACTIVE", localName: "ACTIVE"},
    {no: 2, name: "STATUS_STOPPED", localName: "STOPPED"},
    {no: 3, name: "STATUS_CANCELLED", localName: "CANCELLED"},
    {no: 4, name: "STATUS_REJECTED", localName: "REJECTED"},
    {no: 5, name: "STATUS_UNDEPLOYED", localName: "UNDEPLOYED"},
    {no: 6, name: "STATUS_PENDING", localName: "PENDING"},
  ],
);

/**
 * Ethereum configuration details.
 *
 * @generated from message vega.EthereumConfig
 */
export const EthereumConfig = proto3.makeMessageType(
  "vega.EthereumConfig",
  () => [
    { no: 1, name: "network_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collateral_bridge_contract", kind: "message", T: EthereumContractConfig },
    { no: 4, name: "confirmations", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "staking_bridge_contract", kind: "message", T: EthereumContractConfig },
    { no: 6, name: "token_vesting_contract", kind: "message", T: EthereumContractConfig },
    { no: 7, name: "multisig_control_contract", kind: "message", T: EthereumContractConfig },
  ],
);

/**
 * @generated from message vega.EthereumContractConfig
 */
export const EthereumContractConfig = proto3.makeMessageType(
  "vega.EthereumContractConfig",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "deployment_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Describes in both human readable and block time when an epoch spans
 *
 * @generated from message vega.EpochTimestamps
 */
export const EpochTimestamps = proto3.makeMessageType(
  "vega.EpochTimestamps",
  () => [
    { no: 1, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "expiry_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "end_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "first_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "last_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.Epoch
 */
export const Epoch = proto3.makeMessageType(
  "vega.Epoch",
  () => [
    { no: 1, name: "seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "timestamps", kind: "message", T: EpochTimestamps },
    { no: 3, name: "validators", kind: "message", T: Node, repeated: true },
    { no: 4, name: "delegations", kind: "message", T: Delegation, repeated: true },
  ],
);

/**
 * @generated from message vega.EpochParticipation
 */
export const EpochParticipation = proto3.makeMessageType(
  "vega.EpochParticipation",
  () => [
    { no: 1, name: "epoch", kind: "message", T: Epoch },
    { no: 2, name: "offline", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "online", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "total_rewards", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * @generated from message vega.EpochData
 */
export const EpochData = proto3.makeMessageType(
  "vega.EpochData",
  () => [
    { no: 1, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offline", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "online", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message vega.RankingScore
 */
export const RankingScore = proto3.makeMessageType(
  "vega.RankingScore",
  () => [
    { no: 1, name: "stake_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "performance_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "previous_status", kind: "enum", T: proto3.getEnumType(ValidatorNodeStatus) },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(ValidatorNodeStatus) },
    { no: 5, name: "voting_power", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "ranking_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.RewardScore
 */
export const RewardScore = proto3.makeMessageType(
  "vega.RewardScore",
  () => [
    { no: 1, name: "raw_validator_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "performance_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "multisig_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "validator_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "normalised_score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "validator_status", kind: "enum", T: proto3.getEnumType(ValidatorNodeStatus) },
  ],
);

/**
 * @generated from message vega.Node
 */
export const Node = proto3.makeMessageType(
  "vega.Node",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tm_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ethereum_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "info_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "staked_by_operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "staked_by_delegates", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "staked_total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "max_intended_stake", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "pending_stake", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "epoch_data", kind: "message", T: EpochData },
    { no: 13, name: "status", kind: "enum", T: proto3.getEnumType(NodeStatus) },
    { no: 14, name: "delegations", kind: "message", T: Delegation, repeated: true },
    { no: 15, name: "reward_score", kind: "message", T: RewardScore },
    { no: 16, name: "ranking_score", kind: "message", T: RankingScore },
    { no: 17, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Details on the collection of nodes for a particular validator status
 *
 * @generated from message vega.NodeSet
 */
export const NodeSet = proto3.makeMessageType(
  "vega.NodeSet",
  () => [
    { no: 1, name: "total", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "inactive", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "promoted", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "demoted", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "maximum", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ],
);

/**
 * @generated from message vega.NodeData
 */
export const NodeData = proto3.makeMessageType(
  "vega.NodeData",
  () => [
    { no: 1, name: "staked_total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_nodes", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "inactive_nodes", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "tendermint_nodes", kind: "message", T: NodeSet },
    { no: 5, name: "ersatz_nodes", kind: "message", T: NodeSet },
    { no: 6, name: "pending_nodes", kind: "message", T: NodeSet },
    { no: 7, name: "uptime", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ],
);

/**
 * @generated from message vega.Delegation
 */
export const Delegation = proto3.makeMessageType(
  "vega.Delegation",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Details for a single reward payment
 *
 * @generated from message vega.Reward
 */
export const Reward = proto3.makeMessageType(
  "vega.Reward",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "percentage_of_total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "received_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "reward_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Details for rewards for a single asset
 *
 * @generated from message vega.RewardSummary
 */
export const RewardSummary = proto3.makeMessageType(
  "vega.RewardSummary",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Details for rewards for a combination of asset, market, and reward type in a given epoch
 *
 * @generated from message vega.EpochRewardSummary
 */
export const EpochRewardSummary = proto3.makeMessageType(
  "vega.EpochRewardSummary",
  () => [
    { no: 1, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reward_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.StateValueProposal
 */
export const StateValueProposal = proto3.makeMessageType(
  "vega.StateValueProposal",
  () => [
    { no: 1, name: "state_var_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kvb", kind: "message", T: KeyValueBundle, repeated: true },
  ],
);

/**
 * @generated from message vega.KeyValueBundle
 */
export const KeyValueBundle = proto3.makeMessageType(
  "vega.KeyValueBundle",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tolerance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "message", T: StateVarValue },
  ],
);

/**
 * @generated from message vega.StateVarValue
 */
export const StateVarValue = proto3.makeMessageType(
  "vega.StateVarValue",
  () => [
    { no: 1, name: "scalar_val", kind: "message", T: ScalarValue, oneof: "value" },
    { no: 2, name: "vector_val", kind: "message", T: VectorValue, oneof: "value" },
    { no: 3, name: "matrix_val", kind: "message", T: MatrixValue, oneof: "value" },
  ],
);

/**
 * @generated from message vega.ScalarValue
 */
export const ScalarValue = proto3.makeMessageType(
  "vega.ScalarValue",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.VectorValue
 */
export const VectorValue = proto3.makeMessageType(
  "vega.VectorValue",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message vega.MatrixValue
 */
export const MatrixValue = proto3.makeMessageType(
  "vega.MatrixValue",
  () => [
    { no: 1, name: "value", kind: "message", T: VectorValue, repeated: true },
  ],
);

