// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file vega/snapshot/v1/snapshot.proto (package vega.snapshot.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Signer } from "../../data/v1/data_pb.js";
import { Account, AuctionTrigger, Delegation, Deposit as Deposit$1, KeyValueBundle, LiquidityProvision, NetworkParameter, Order, RankingScore, Withdrawal as Withdrawal$1 } from "../../vega_pb.js";
import { Asset } from "../../assets_pb.js";
import { AssetAction, BridgeState, MarketActivityTracker, RecurringTransfers, ScheduledTransferAtTime } from "../../checkpoint/v1/checkpoint_pb.js";
import { Proposal, Vote } from "../../governance_pb.js";
import { ERC20MultiSigSignerEvent, ERC20MultiSigThresholdSetEvent, ProtocolUpgradeEvent, StakeLinking, ValidatorUpdate } from "../../events/v1/events_pb.js";
import { StakeTotalSupply } from "../../chain_events_pb.js";
import { AuctionDuration, Market as Market$1, Market_TradingMode, PriceMonitoringTrigger } from "../../markets_pb.js";

/**
 * @generated from enum vega.snapshot.v1.Format
 */
export const Format = proto3.makeEnum(
  "vega.snapshot.v1.Format",
  [
    {no: 0, name: "FORMAT_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "FORMAT_PROTO", localName: "PROTO"},
    {no: 2, name: "FORMAT_PROTO_COMPRESSED", localName: "PROTO_COMPRESSED"},
    {no: 3, name: "FORMAT_JSON", localName: "JSON"},
  ],
);

/**
 * @generated from message vega.snapshot.v1.Snapshot
 */
export const Snapshot = proto3.makeMessageType(
  "vega.snapshot.v1.Snapshot",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "format", kind: "enum", T: proto3.getEnumType(Format) },
    { no: 3, name: "chunks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "metadata", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * NodeHash represents an exported node from the AVL tree and contains all the data necessary to reconstruct an identical copy of the
 * AVL tree after it's been serialised
 *
 * @generated from message vega.snapshot.v1.NodeHash
 */
export const NodeHash = proto3.makeMessageType(
  "vega.snapshot.v1.NodeHash",
  () => [
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "is_leaf", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Metadata
 */
export const Metadata = proto3.makeMessageType(
  "vega.snapshot.v1.Metadata",
  () => [
    { no: 1, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "chunk_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "node_hashes", kind: "message", T: NodeHash, repeated: true },
  ],
);

/**
 * Chunk is simply an as-is chunk belonging to a snapshot
 * not sure how usable this type would be
 *
 * @generated from message vega.snapshot.v1.Chunk
 */
export const Chunk = proto3.makeMessageType(
  "vega.snapshot.v1.Chunk",
  () => [
    { no: 1, name: "data", kind: "message", T: Payload, repeated: true },
    { no: 2, name: "nr", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "of", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Payload
 */
export const Payload = proto3.makeMessageType(
  "vega.snapshot.v1.Payload",
  () => [
    { no: 1, name: "active_assets", kind: "message", T: ActiveAssets, oneof: "data" },
    { no: 2, name: "pending_assets", kind: "message", T: PendingAssets, oneof: "data" },
    { no: 3, name: "banking_withdrawals", kind: "message", T: BankingWithdrawals, oneof: "data" },
    { no: 4, name: "banking_deposits", kind: "message", T: BankingDeposits, oneof: "data" },
    { no: 5, name: "banking_seen", kind: "message", T: BankingSeen, oneof: "data" },
    { no: 6, name: "banking_asset_actions", kind: "message", T: BankingAssetActions, oneof: "data" },
    { no: 7, name: "checkpoint", kind: "message", T: Checkpoint, oneof: "data" },
    { no: 8, name: "collateral_accounts", kind: "message", T: CollateralAccounts, oneof: "data" },
    { no: 9, name: "collateral_assets", kind: "message", T: CollateralAssets, oneof: "data" },
    { no: 10, name: "delegation_active", kind: "message", T: DelegationActive, oneof: "data" },
    { no: 11, name: "delegation_pending", kind: "message", T: DelegationPending, oneof: "data" },
    { no: 12, name: "delegation_auto", kind: "message", T: DelegationAuto, oneof: "data" },
    { no: 13, name: "governance_active", kind: "message", T: GovernanceActive, oneof: "data" },
    { no: 14, name: "governance_enacted", kind: "message", T: GovernanceEnacted, oneof: "data" },
    { no: 15, name: "staking_accounts", kind: "message", T: StakingAccounts, oneof: "data" },
    { no: 16, name: "matching_book", kind: "message", T: MatchingBook, oneof: "data" },
    { no: 17, name: "network_parameters", kind: "message", T: NetParams, oneof: "data" },
    { no: 18, name: "execution_markets", kind: "message", T: ExecutionMarkets, oneof: "data" },
    { no: 19, name: "market_positions", kind: "message", T: MarketPositions, oneof: "data" },
    { no: 20, name: "app_state", kind: "message", T: AppState, oneof: "data" },
    { no: 21, name: "epoch", kind: "message", T: EpochState, oneof: "data" },
    { no: 23, name: "rewards_pending_payouts", kind: "message", T: RewardsPendingPayouts, oneof: "data" },
    { no: 24, name: "governance_node", kind: "message", T: GovernanceNode, oneof: "data" },
    { no: 25, name: "limit_state", kind: "message", T: LimitState, oneof: "data" },
    { no: 26, name: "vote_spam_policy", kind: "message", T: VoteSpamPolicy, oneof: "data" },
    { no: 27, name: "simple_spam_policy", kind: "message", T: SimpleSpamPolicy, oneof: "data" },
    { no: 28, name: "notary", kind: "message", T: Notary, oneof: "data" },
    { no: 31, name: "event_forwarder", kind: "message", T: EventForwarder, oneof: "data" },
    { no: 32, name: "stake_verifier_deposited", kind: "message", T: StakeVerifierDeposited, oneof: "data" },
    { no: 33, name: "stake_verifier_removed", kind: "message", T: StakeVerifierRemoved, oneof: "data" },
    { no: 34, name: "witness", kind: "message", T: Witness, oneof: "data" },
    { no: 35, name: "delegation_last_reconciliation_time", kind: "message", T: DelegationLastReconciliationTime, oneof: "data" },
    { no: 36, name: "topology", kind: "message", T: Topology, oneof: "data" },
    { no: 37, name: "oracle_data", kind: "message", T: OracleDataBatch, oneof: "data" },
    { no: 38, name: "liquidity_parameters", kind: "message", T: LiquidityParameters, oneof: "data" },
    { no: 39, name: "liquidity_pending_provisions", kind: "message", T: LiquidityPendingProvisions, oneof: "data" },
    { no: 40, name: "liquidity_parties_liquidity_orders", kind: "message", T: LiquidityPartiesLiquidityOrders, oneof: "data" },
    { no: 41, name: "liquidity_parties_orders", kind: "message", T: LiquidityPartiesOrders, oneof: "data" },
    { no: 42, name: "liquidity_provisions", kind: "message", T: LiquidityProvisions, oneof: "data" },
    { no: 43, name: "liquidity_supplied", kind: "message", T: LiquiditySupplied, oneof: "data" },
    { no: 44, name: "liquidity_target", kind: "message", T: LiquidityTarget, oneof: "data" },
    { no: 46, name: "floating_point_consensus", kind: "message", T: FloatingPointConsensus, oneof: "data" },
    { no: 47, name: "market_tracker", kind: "message", T: MarketTracker, oneof: "data" },
    { no: 49, name: "banking_recurring_transfers", kind: "message", T: BankingRecurringTransfers, oneof: "data" },
    { no: 50, name: "banking_scheduled_transfers", kind: "message", T: BankingScheduledTransfers, oneof: "data" },
    { no: 51, name: "erc20_multisig_topology_verified", kind: "message", T: ERC20MultiSigTopologyVerified, oneof: "data" },
    { no: 52, name: "erc20_multisig_topology_pending", kind: "message", T: ERC20MultiSigTopologyPending, oneof: "data" },
    { no: 53, name: "proof_of_work", kind: "message", T: ProofOfWork, oneof: "data" },
    { no: 54, name: "pending_asset_updates", kind: "message", T: PendingAssetUpdates, oneof: "data" },
    { no: 55, name: "protocol_upgrade_proposals", kind: "message", T: ProtocolUpgradeProposals, oneof: "data" },
    { no: 56, name: "banking_bridge_state", kind: "message", T: BankingBridgeState, oneof: "data" },
    { no: 57, name: "settlement_state", kind: "message", T: SettlementState, oneof: "data" },
    { no: 58, name: "liquidity_scores", kind: "message", T: LiquidityScores, oneof: "data" },
  ],
);

/**
 * @generated from message vega.snapshot.v1.TimestampedOpenInterest
 */
export const TimestampedOpenInterest = proto3.makeMessageType(
  "vega.snapshot.v1.TimestampedOpenInterest",
  () => [
    { no: 1, name: "open_interest", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityTarget
 */
export const LiquidityTarget = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityTarget",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "scheduled_truncate", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "current_open_interests", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 5, name: "previous_open_interests", kind: "message", T: TimestampedOpenInterest, repeated: true },
    { no: 6, name: "max_open_interests", kind: "message", T: TimestampedOpenInterest },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityPriceProbabilityPair
 */
export const LiquidityPriceProbabilityPair = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityPriceProbabilityPair",
  () => [
    { no: 1, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "probability", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquiditySupplied
 */
export const LiquiditySupplied = proto3.makeMessageType(
  "vega.snapshot.v1.LiquiditySupplied",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "consensus_reached", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "bid_cache", kind: "message", T: LiquidityPriceProbabilityPair, repeated: true },
    { no: 4, name: "ask_cache", kind: "message", T: LiquidityPriceProbabilityPair, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.OracleDataBatch
 */
export const OracleDataBatch = proto3.makeMessageType(
  "vega.snapshot.v1.OracleDataBatch",
  () => [
    { no: 1, name: "oracle_data", kind: "message", T: OracleData, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.OracleData
 */
export const OracleData = proto3.makeMessageType(
  "vega.snapshot.v1.OracleData",
  () => [
    { no: 1, name: "signers", kind: "message", T: Signer, repeated: true },
    { no: 2, name: "data", kind: "message", T: OracleDataPair, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.OracleDataPair
 */
export const OracleDataPair = proto3.makeMessageType(
  "vega.snapshot.v1.OracleDataPair",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Witness
 */
export const Witness = proto3.makeMessageType(
  "vega.snapshot.v1.Witness",
  () => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Resource
 */
export const Resource = proto3.makeMessageType(
  "vega.snapshot.v1.Resource",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "check_until", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "votes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "state", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.EventForwarder
 */
export const EventForwarder = proto3.makeMessageType(
  "vega.snapshot.v1.EventForwarder",
  () => [
    { no: 1, name: "acked_events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.CollateralAccounts
 */
export const CollateralAccounts = proto3.makeMessageType(
  "vega.snapshot.v1.CollateralAccounts",
  () => [
    { no: 1, name: "accounts", kind: "message", T: Account, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.CollateralAssets
 */
export const CollateralAssets = proto3.makeMessageType(
  "vega.snapshot.v1.CollateralAssets",
  () => [
    { no: 1, name: "assets", kind: "message", T: Asset, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ActiveAssets
 */
export const ActiveAssets = proto3.makeMessageType(
  "vega.snapshot.v1.ActiveAssets",
  () => [
    { no: 1, name: "assets", kind: "message", T: Asset, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PendingAssets
 */
export const PendingAssets = proto3.makeMessageType(
  "vega.snapshot.v1.PendingAssets",
  () => [
    { no: 1, name: "assets", kind: "message", T: Asset, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PendingAssetUpdates
 */
export const PendingAssetUpdates = proto3.makeMessageType(
  "vega.snapshot.v1.PendingAssetUpdates",
  () => [
    { no: 1, name: "assets", kind: "message", T: Asset, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Withdrawal
 */
export const Withdrawal = proto3.makeMessageType(
  "vega.snapshot.v1.Withdrawal",
  () => [
    { no: 1, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "withdrawal", kind: "message", T: Withdrawal$1 },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Deposit
 */
export const Deposit = proto3.makeMessageType(
  "vega.snapshot.v1.Deposit",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deposit", kind: "message", T: Deposit$1 },
  ],
);

/**
 * @generated from message vega.snapshot.v1.TxRef
 */
export const TxRef = proto3.makeMessageType(
  "vega.snapshot.v1.TxRef",
  () => [
    { no: 1, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_nr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BankingWithdrawals
 */
export const BankingWithdrawals = proto3.makeMessageType(
  "vega.snapshot.v1.BankingWithdrawals",
  () => [
    { no: 1, name: "withdrawals", kind: "message", T: Withdrawal, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BankingDeposits
 */
export const BankingDeposits = proto3.makeMessageType(
  "vega.snapshot.v1.BankingDeposits",
  () => [
    { no: 1, name: "deposit", kind: "message", T: Deposit, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BankingSeen
 */
export const BankingSeen = proto3.makeMessageType(
  "vega.snapshot.v1.BankingSeen",
  () => [
    { no: 1, name: "refs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "last_seen_eth_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BankingAssetActions
 */
export const BankingAssetActions = proto3.makeMessageType(
  "vega.snapshot.v1.BankingAssetActions",
  () => [
    { no: 1, name: "asset_action", kind: "message", T: AssetAction, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BankingRecurringTransfers
 */
export const BankingRecurringTransfers = proto3.makeMessageType(
  "vega.snapshot.v1.BankingRecurringTransfers",
  () => [
    { no: 1, name: "recurring_transfers", kind: "message", T: RecurringTransfers },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BankingScheduledTransfers
 */
export const BankingScheduledTransfers = proto3.makeMessageType(
  "vega.snapshot.v1.BankingScheduledTransfers",
  () => [
    { no: 1, name: "transfers_at_time", kind: "message", T: ScheduledTransferAtTime, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BankingBridgeState
 */
export const BankingBridgeState = proto3.makeMessageType(
  "vega.snapshot.v1.BankingBridgeState",
  () => [
    { no: 1, name: "bridge_state", kind: "message", T: BridgeState },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Checkpoint
 */
export const Checkpoint = proto3.makeMessageType(
  "vega.snapshot.v1.Checkpoint",
  () => [
    { no: 1, name: "next_cp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.DelegationLastReconciliationTime
 */
export const DelegationLastReconciliationTime = proto3.makeMessageType(
  "vega.snapshot.v1.DelegationLastReconciliationTime",
  () => [
    { no: 1, name: "last_reconciliation_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.DelegationActive
 */
export const DelegationActive = proto3.makeMessageType(
  "vega.snapshot.v1.DelegationActive",
  () => [
    { no: 1, name: "delegations", kind: "message", T: Delegation, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.DelegationPending
 */
export const DelegationPending = proto3.makeMessageType(
  "vega.snapshot.v1.DelegationPending",
  () => [
    { no: 1, name: "delegations", kind: "message", T: Delegation, repeated: true },
    { no: 2, name: "undelegation", kind: "message", T: Delegation, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.DelegationAuto
 */
export const DelegationAuto = proto3.makeMessageType(
  "vega.snapshot.v1.DelegationAuto",
  () => [
    { no: 1, name: "parties", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ProposalData
 */
export const ProposalData = proto3.makeMessageType(
  "vega.snapshot.v1.ProposalData",
  () => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
    { no: 2, name: "yes", kind: "message", T: Vote, repeated: true },
    { no: 3, name: "no", kind: "message", T: Vote, repeated: true },
    { no: 4, name: "invalid", kind: "message", T: Vote, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.GovernanceEnacted
 */
export const GovernanceEnacted = proto3.makeMessageType(
  "vega.snapshot.v1.GovernanceEnacted",
  () => [
    { no: 1, name: "proposals", kind: "message", T: ProposalData, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.GovernanceActive
 */
export const GovernanceActive = proto3.makeMessageType(
  "vega.snapshot.v1.GovernanceActive",
  () => [
    { no: 1, name: "proposals", kind: "message", T: ProposalData, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.GovernanceNode
 */
export const GovernanceNode = proto3.makeMessageType(
  "vega.snapshot.v1.GovernanceNode",
  () => [
    { no: 1, name: "proposals", kind: "message", T: Proposal, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.StakingAccount
 */
export const StakingAccount = proto3.makeMessageType(
  "vega.snapshot.v1.StakingAccount",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "events", kind: "message", T: StakeLinking, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.StakingAccounts
 */
export const StakingAccounts = proto3.makeMessageType(
  "vega.snapshot.v1.StakingAccounts",
  () => [
    { no: 1, name: "accounts", kind: "message", T: StakingAccount, repeated: true },
    { no: 2, name: "staking_asset_total_supply", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pending_stake_total_supply", kind: "message", T: StakeTotalSupply },
  ],
);

/**
 * @generated from message vega.snapshot.v1.MatchingBook
 */
export const MatchingBook = proto3.makeMessageType(
  "vega.snapshot.v1.MatchingBook",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buy", kind: "message", T: Order, repeated: true },
    { no: 3, name: "sell", kind: "message", T: Order, repeated: true },
    { no: 4, name: "last_traded_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "auction", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "batch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.NetParams
 */
export const NetParams = proto3.makeMessageType(
  "vega.snapshot.v1.NetParams",
  () => [
    { no: 1, name: "params", kind: "message", T: NetworkParameter, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.DecimalMap
 */
export const DecimalMap = proto3.makeMessageType(
  "vega.snapshot.v1.DecimalMap",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "val", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.TimePrice
 */
export const TimePrice = proto3.makeMessageType(
  "vega.snapshot.v1.TimePrice",
  () => [
    { no: 1, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PriceVolume
 */
export const PriceVolume = proto3.makeMessageType(
  "vega.snapshot.v1.PriceVolume",
  () => [
    { no: 1, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PriceRange
 */
export const PriceRange = proto3.makeMessageType(
  "vega.snapshot.v1.PriceRange",
  () => [
    { no: 1, name: "min", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PriceBound
 */
export const PriceBound = proto3.makeMessageType(
  "vega.snapshot.v1.PriceBound",
  () => [
    { no: 1, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "up_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "down_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "trigger", kind: "message", T: PriceMonitoringTrigger },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PriceRangeCache
 */
export const PriceRangeCache = proto3.makeMessageType(
  "vega.snapshot.v1.PriceRangeCache",
  () => [
    { no: 1, name: "bound", kind: "message", T: PriceBound },
    { no: 2, name: "range", kind: "message", T: PriceRange },
  ],
);

/**
 * @generated from message vega.snapshot.v1.CurrentPrice
 */
export const CurrentPrice = proto3.makeMessageType(
  "vega.snapshot.v1.CurrentPrice",
  () => [
    { no: 1, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PastPrice
 */
export const PastPrice = proto3.makeMessageType(
  "vega.snapshot.v1.PastPrice",
  () => [
    { no: 1, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "volume_weighted_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PriceMonitor
 */
export const PriceMonitor = proto3.makeMessageType(
  "vega.snapshot.v1.PriceMonitor",
  () => [
    { no: 3, name: "initialised", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "fp_horizons", kind: "message", T: DecimalMap, repeated: true },
    { no: 5, name: "now", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "update", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "bounds", kind: "message", T: PriceBound, repeated: true },
    { no: 8, name: "price_range_cache_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "price_range_cache", kind: "message", T: PriceRangeCache, repeated: true },
    { no: 10, name: "ref_price_cache_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_price_cache", kind: "message", T: DecimalMap, repeated: true },
    { no: 12, name: "prices_now", kind: "message", T: CurrentPrice, repeated: true },
    { no: 13, name: "prices_past", kind: "message", T: PastPrice, repeated: true },
    { no: 14, name: "consensus_reached", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.AuctionState
 */
export const AuctionState = proto3.makeMessageType(
  "vega.snapshot.v1.AuctionState",
  () => [
    { no: 1, name: "mode", kind: "enum", T: proto3.getEnumType(Market_TradingMode) },
    { no: 2, name: "default_mode", kind: "enum", T: proto3.getEnumType(Market_TradingMode) },
    { no: 3, name: "trigger", kind: "enum", T: proto3.getEnumType(AuctionTrigger) },
    { no: 4, name: "begin", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "end", kind: "message", T: AuctionDuration },
    { no: 6, name: "start", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "stop", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "extension", kind: "enum", T: proto3.getEnumType(AuctionTrigger) },
    { no: 9, name: "extension_event_sent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.EquityShareLP
 */
export const EquityShareLP = proto3.makeMessageType(
  "vega.snapshot.v1.EquityShareLP",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stake", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "avg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "vshare", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.EquityShare
 */
export const EquityShare = proto3.makeMessageType(
  "vega.snapshot.v1.EquityShare",
  () => [
    { no: 1, name: "mvp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "opening_auction_ended", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "lps", kind: "message", T: EquityShareLP, repeated: true },
    { no: 4, name: "r", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "p_mvp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.FeeSplitter
 */
export const FeeSplitter = proto3.makeMessageType(
  "vega.snapshot.v1.FeeSplitter",
  () => [
    { no: 1, name: "time_window_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "trade_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "window", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Market
 */
export const Market = proto3.makeMessageType(
  "vega.snapshot.v1.Market",
  () => [
    { no: 1, name: "market", kind: "message", T: Market$1 },
    { no: 2, name: "price_monitor", kind: "message", T: PriceMonitor },
    { no: 3, name: "auction_state", kind: "message", T: AuctionState },
    { no: 4, name: "pegged_orders", kind: "message", T: PeggedOrders },
    { no: 5, name: "expiring_orders", kind: "message", T: Order, repeated: true },
    { no: 6, name: "last_best_bid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "last_best_ask", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "last_mid_bid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "last_mid_ask", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "last_market_value_proxy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "last_equity_share_distributed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "equity_share", kind: "message", T: EquityShare },
    { no: 13, name: "current_mark_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "risk_factor_short", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "risk_factor_long", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "risk_factor_consensus_reached", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "fee_splitter", kind: "message", T: FeeSplitter },
    { no: 18, name: "settlement_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "next_mark_to_market", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "last_traded_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "parties", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 22, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PeggedOrders
 */
export const PeggedOrders = proto3.makeMessageType(
  "vega.snapshot.v1.PeggedOrders",
  () => [
    { no: 2, name: "parked_orders", kind: "message", T: Order, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ExecutionMarkets
 */
export const ExecutionMarkets = proto3.makeMessageType(
  "vega.snapshot.v1.ExecutionMarkets",
  () => [
    { no: 1, name: "markets", kind: "message", T: Market, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Position
 */
export const Position = proto3.makeMessageType(
  "vega.snapshot.v1.Position",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "buy", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sell", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "buy_sum_product", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "sell_sum_product", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.MarketPositions
 */
export const MarketPositions = proto3.makeMessageType(
  "vega.snapshot.v1.MarketPositions",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "positions", kind: "message", T: Position, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.SettlementState
 */
export const SettlementState = proto3.makeMessageType(
  "vega.snapshot.v1.SettlementState",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_mark_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_settled_positions", kind: "message", T: LastSettledPosition, repeated: true },
    { no: 4, name: "trades", kind: "message", T: SettlementTrade, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LastSettledPosition
 */
export const LastSettledPosition = proto3.makeMessageType(
  "vega.snapshot.v1.LastSettledPosition",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "settled_position", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.SettlementTrade
 */
export const SettlementTrade = proto3.makeMessageType(
  "vega.snapshot.v1.SettlementTrade",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "new_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.AppState
 */
export const AppState = proto3.makeMessageType(
  "vega.snapshot.v1.AppState",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * EpochState details
 *
 * @generated from message vega.snapshot.v1.EpochState
 */
export const EpochState = proto3.makeMessageType(
  "vega.snapshot.v1.EpochState",
  () => [
    { no: 1, name: "seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "expire_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "ready_to_start_new_epoch", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "ready_to_end_epoch", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.RewardsPendingPayouts
 */
export const RewardsPendingPayouts = proto3.makeMessageType(
  "vega.snapshot.v1.RewardsPendingPayouts",
  () => [
    { no: 1, name: "scheduled_rewards_payout", kind: "message", T: ScheduledRewardsPayout, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ScheduledRewardsPayout
 */
export const ScheduledRewardsPayout = proto3.makeMessageType(
  "vega.snapshot.v1.ScheduledRewardsPayout",
  () => [
    { no: 1, name: "payout_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "rewards_payout", kind: "message", T: RewardsPayout, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.RewardsPayout
 */
export const RewardsPayout = proto3.makeMessageType(
  "vega.snapshot.v1.RewardsPayout",
  () => [
    { no: 1, name: "from_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_party_amount", kind: "message", T: RewardsPartyAmount, repeated: true },
    { no: 4, name: "total_reward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.RewardsPartyAmount
 */
export const RewardsPartyAmount = proto3.makeMessageType(
  "vega.snapshot.v1.RewardsPartyAmount",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * LimitState details
 *
 * @generated from message vega.snapshot.v1.LimitState
 */
export const LimitState = proto3.makeMessageType(
  "vega.snapshot.v1.LimitState",
  () => [
    { no: 1, name: "block_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "can_propose_market", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "can_propose_asset", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "genesis_loaded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "propose_market_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "propose_asset_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "propose_market_enabled_from", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "propose_asset_enabled_from", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.VoteSpamPolicy
 */
export const VoteSpamPolicy = proto3.makeMessageType(
  "vega.snapshot.v1.VoteSpamPolicy",
  () => [
    { no: 1, name: "party_to_vote", kind: "message", T: PartyProposalVoteCount, repeated: true },
    { no: 2, name: "banned_parties", kind: "message", T: BannedParty, repeated: true },
    { no: 3, name: "token_balance", kind: "message", T: PartyTokenBalance, repeated: true },
    { no: 4, name: "recent_blocks_reject_stats", kind: "message", T: BlockRejectStats, repeated: true },
    { no: 5, name: "current_block_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "last_increase_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "current_epoch_seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "min_voting_tokens_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PartyProposalVoteCount
 */
export const PartyProposalVoteCount = proto3.makeMessageType(
  "vega.snapshot.v1.PartyProposalVoteCount",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proposal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PartyTokenBalance
 */
export const PartyTokenBalance = proto3.makeMessageType(
  "vega.snapshot.v1.PartyTokenBalance",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BlockRejectStats
 */
export const BlockRejectStats = proto3.makeMessageType(
  "vega.snapshot.v1.BlockRejectStats",
  () => [
    { no: 1, name: "rejected", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.SpamPartyTransactionCount
 */
export const SpamPartyTransactionCount = proto3.makeMessageType(
  "vega.snapshot.v1.SpamPartyTransactionCount",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.SimpleSpamPolicy
 */
export const SimpleSpamPolicy = proto3.makeMessageType(
  "vega.snapshot.v1.SimpleSpamPolicy",
  () => [
    { no: 1, name: "policy_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_to_count", kind: "message", T: SpamPartyTransactionCount, repeated: true },
    { no: 3, name: "banned_parties", kind: "message", T: BannedParty, repeated: true },
    { no: 4, name: "token_balance", kind: "message", T: PartyTokenBalance, repeated: true },
    { no: 5, name: "current_epoch_seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.NotarySigs
 */
export const NotarySigs = proto3.makeMessageType(
  "vega.snapshot.v1.NotarySigs",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sig", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Notary
 */
export const Notary = proto3.makeMessageType(
  "vega.snapshot.v1.Notary",
  () => [
    { no: 1, name: "notary_sigs", kind: "message", T: NotarySigs, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.StakeVerifierDeposited
 */
export const StakeVerifierDeposited = proto3.makeMessageType(
  "vega.snapshot.v1.StakeVerifierDeposited",
  () => [
    { no: 1, name: "pending_deposited", kind: "message", T: StakeVerifierPending, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.StakeVerifierRemoved
 */
export const StakeVerifierRemoved = proto3.makeMessageType(
  "vega.snapshot.v1.StakeVerifierRemoved",
  () => [
    { no: 1, name: "pending_removed", kind: "message", T: StakeVerifierPending, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.StakeVerifierPending
 */
export const StakeVerifierPending = proto3.makeMessageType(
  "vega.snapshot.v1.StakeVerifierPending",
  () => [
    { no: 1, name: "ethereum_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vega_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PendingKeyRotation
 */
export const PendingKeyRotation = proto3.makeMessageType(
  "vega.snapshot.v1.PendingKeyRotation",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_pub_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new_pub_key_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PendingEthereumKeyRotation
 */
export const PendingEthereumKeyRotation = proto3.makeMessageType(
  "vega.snapshot.v1.PendingEthereumKeyRotation",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "old_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.Topology
 */
export const Topology = proto3.makeMessageType(
  "vega.snapshot.v1.Topology",
  () => [
    { no: 1, name: "validator_data", kind: "message", T: ValidatorState, repeated: true },
    { no: 2, name: "chain_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "pending_pub_key_rotations", kind: "message", T: PendingKeyRotation, repeated: true },
    { no: 4, name: "validator_performance", kind: "message", T: ValidatorPerformance },
    { no: 5, name: "pending_ethereum_key_rotations", kind: "message", T: PendingEthereumKeyRotation, repeated: true },
    { no: 6, name: "signatures", kind: "message", T: ToplogySignatures },
    { no: 7, name: "unsolved_ethereum_key_rotations", kind: "message", T: PendingEthereumKeyRotation, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ToplogySignatures
 */
export const ToplogySignatures = proto3.makeMessageType(
  "vega.snapshot.v1.ToplogySignatures",
  () => [
    { no: 1, name: "pending_signatures", kind: "message", T: PendingERC20MultisigControlSignature, repeated: true },
    { no: 2, name: "issued_signatures", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PendingERC20MultisigControlSignature
 */
export const PendingERC20MultisigControlSignature = proto3.makeMessageType(
  "vega.snapshot.v1.PendingERC20MultisigControlSignature",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ethereum_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "epoch_seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "added", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ValidatorState
 */
export const ValidatorState = proto3.makeMessageType(
  "vega.snapshot.v1.ValidatorState",
  () => [
    { no: 1, name: "validator_update", kind: "message", T: ValidatorUpdate },
    { no: 2, name: "block_added", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "status_change_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "last_block_with_positive_ranking", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "eth_events_forwarded", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "heartbeat_tracker", kind: "message", T: HeartbeatTracker },
    { no: 8, name: "validator_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "ranking_score", kind: "message", T: RankingScore },
  ],
);

/**
 * @generated from message vega.snapshot.v1.HeartbeatTracker
 */
export const HeartbeatTracker = proto3.makeMessageType(
  "vega.snapshot.v1.HeartbeatTracker",
  () => [
    { no: 1, name: "expected_next_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expected_next_hash_since", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "block_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "block_sigs", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PerformanceStats
 */
export const PerformanceStats = proto3.makeMessageType(
  "vega.snapshot.v1.PerformanceStats",
  () => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proposed", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "elected", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "voted", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "last_height_voted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "last_height_proposed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "last_height_elected", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ValidatorPerformance
 */
export const ValidatorPerformance = proto3.makeMessageType(
  "vega.snapshot.v1.ValidatorPerformance",
  () => [
    { no: 1, name: "validator_perf_stats", kind: "message", T: PerformanceStats, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityParameters
 */
export const LiquidityParameters = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityParameters",
  () => [
    { no: 1, name: "max_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_shape_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stake_to_obligation_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityPendingProvisions
 */
export const LiquidityPendingProvisions = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityPendingProvisions",
  () => [
    { no: 1, name: "pending_provisions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityPartiesLiquidityOrders
 */
export const LiquidityPartiesLiquidityOrders = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityPartiesLiquidityOrders",
  () => [
    { no: 1, name: "party_orders", kind: "message", T: PartyOrders, repeated: true },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.PartyOrders
 */
export const PartyOrders = proto3.makeMessageType(
  "vega.snapshot.v1.PartyOrders",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orders", kind: "message", T: Order, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityPartiesOrders
 */
export const LiquidityPartiesOrders = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityPartiesOrders",
  () => [
    { no: 1, name: "party_orders", kind: "message", T: PartyOrders, repeated: true },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityProvisions
 */
export const LiquidityProvisions = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityProvisions",
  () => [
    { no: 1, name: "liquidity_provisions", kind: "message", T: LiquidityProvision, repeated: true },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityScores
 */
export const LiquidityScores = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityScores",
  () => [
    { no: 1, name: "running_average_counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "scores", kind: "message", T: LiquidityScore, repeated: true },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.LiquidityScore
 */
export const LiquidityScore = proto3.makeMessageType(
  "vega.snapshot.v1.LiquidityScore",
  () => [
    { no: 1, name: "score", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * snapshot payload for floating point consensus
 *
 * @generated from message vega.snapshot.v1.FloatingPointConsensus
 */
export const FloatingPointConsensus = proto3.makeMessageType(
  "vega.snapshot.v1.FloatingPointConsensus",
  () => [
    { no: 1, name: "next_time_trigger", kind: "message", T: NextTimeTrigger, repeated: true },
    { no: 2, name: "state_variables", kind: "message", T: StateVarInternalState, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.StateVarInternalState
 */
export const StateVarInternalState = proto3.makeMessageType(
  "vega.snapshot.v1.StateVarInternalState",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "validators_results", kind: "message", T: FloatingPointValidatorResult, repeated: true },
    { no: 5, name: "rounds_since_meaningful_update", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.FloatingPointValidatorResult
 */
export const FloatingPointValidatorResult = proto3.makeMessageType(
  "vega.snapshot.v1.FloatingPointValidatorResult",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bundle", kind: "message", T: KeyValueBundle, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.NextTimeTrigger
 */
export const NextTimeTrigger = proto3.makeMessageType(
  "vega.snapshot.v1.NextTimeTrigger",
  () => [
    { no: 1, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "next_trigger", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.MarketTracker
 */
export const MarketTracker = proto3.makeMessageType(
  "vega.snapshot.v1.MarketTracker",
  () => [
    { no: 1, name: "market_activity", kind: "message", T: MarketActivityTracker, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.SignerEventsPerAddress
 */
export const SignerEventsPerAddress = proto3.makeMessageType(
  "vega.snapshot.v1.SignerEventsPerAddress",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "events", kind: "message", T: ERC20MultiSigSignerEvent, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ERC20MultiSigTopologyVerified
 */
export const ERC20MultiSigTopologyVerified = proto3.makeMessageType(
  "vega.snapshot.v1.ERC20MultiSigTopologyVerified",
  () => [
    { no: 1, name: "signers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "events_per_address", kind: "message", T: SignerEventsPerAddress, repeated: true },
    { no: 3, name: "threshold", kind: "message", T: ERC20MultiSigThresholdSetEvent },
    { no: 4, name: "seen_events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ERC20MultiSigTopologyPending
 */
export const ERC20MultiSigTopologyPending = proto3.makeMessageType(
  "vega.snapshot.v1.ERC20MultiSigTopologyPending",
  () => [
    { no: 1, name: "pending_signers", kind: "message", T: ERC20MultiSigSignerEvent, repeated: true },
    { no: 2, name: "pending_threshold_set", kind: "message", T: ERC20MultiSigThresholdSetEvent, repeated: true },
    { no: 3, name: "witnessed_signers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "witnessed_threshold_sets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ProofOfWork
 */
export const ProofOfWork = proto3.makeMessageType(
  "vega.snapshot.v1.ProofOfWork",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "tx_at_height", kind: "message", T: TransactionsAtHeight, repeated: true },
    { no: 6, name: "tid_at_height", kind: "message", T: TransactionsAtHeight, repeated: true },
    { no: 7, name: "banned", kind: "message", T: BannedParty, repeated: true },
    { no: 8, name: "pow_params", kind: "message", T: ProofOfWorkParams, repeated: true },
    { no: 9, name: "pow_state", kind: "message", T: ProofOfWorkState, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.BannedParty
 */
export const BannedParty = proto3.makeMessageType(
  "vega.snapshot.v1.BannedParty",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "until", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ProofOfWorkParams
 */
export const ProofOfWorkParams = proto3.makeMessageType(
  "vega.snapshot.v1.ProofOfWorkParams",
  () => [
    { no: 1, name: "spam_pow_number_of_past_blocks", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "spam_pow_difficulty", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "spam_pow_hash_function", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "spam_pow_number_of_tx_per_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "spam_pow_increasing_difficulty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "from_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "until_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ProofOfWorkState
 */
export const ProofOfWorkState = proto3.makeMessageType(
  "vega.snapshot.v1.ProofOfWorkState",
  () => [
    { no: 1, name: "pow_state", kind: "message", T: ProofOfWorkBlockState, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ProofOfWorkBlockState
 */
export const ProofOfWorkBlockState = proto3.makeMessageType(
  "vega.snapshot.v1.ProofOfWorkBlockState",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "party_state", kind: "message", T: ProofOfWorkPartyStateForBlock, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ProofOfWorkPartyStateForBlock
 */
export const ProofOfWorkPartyStateForBlock = proto3.makeMessageType(
  "vega.snapshot.v1.ProofOfWorkPartyStateForBlock",
  () => [
    { no: 1, name: "party", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "seen_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "observed_difficulty", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message vega.snapshot.v1.TransactionsAtHeight
 */
export const TransactionsAtHeight = proto3.makeMessageType(
  "vega.snapshot.v1.TransactionsAtHeight",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "transactions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message vega.snapshot.v1.ProtocolUpgradeProposals
 */
export const ProtocolUpgradeProposals = proto3.makeMessageType(
  "vega.snapshot.v1.ProtocolUpgradeProposals",
  () => [
    { no: 1, name: "active_proposals", kind: "message", T: ProtocolUpgradeEvent, repeated: true },
    { no: 2, name: "accepted_proposal", kind: "message", T: AcceptedProtocolUpgradeProposal },
  ],
);

/**
 * @generated from message vega.snapshot.v1.AcceptedProtocolUpgradeProposal
 */
export const AcceptedProtocolUpgradeProposal = proto3.makeMessageType(
  "vega.snapshot.v1.AcceptedProtocolUpgradeProposal",
  () => [
    { no: 1, name: "upgrade_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vega_release_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

