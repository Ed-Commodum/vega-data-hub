// @generated by protoc-gen-es v1.2.0 with parameter "target=js"
// @generated from file data-node/api/v2/trading_data.proto (package datanode.api.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { AccountType, Delegation, Deposit, Epoch, EpochRewardSummary, Fee, Interval, LedgerMovement, LiquidityProvision, MarginLevels, MarketData, MarketDepth, MarketDepthUpdate, NetworkLimits, NetworkParameter, Node, NodeData, Order, Order_Status, Order_TimeInForce, Order_Type, Party, Position, PriceLevel, Reward, RewardSummary, RiskFactor, Side, Trade, TransferType, Withdrawal } from "../../../vega/vega_pb.js";
import { BusEvent, BusEventType, CoreSnapshotData, ERC20MultiSigSignerAdded, ERC20MultiSigSignerRemoved, EthereumKeyRotation, KeyRotation, ProtocolUpgradeEvent, ProtocolUpgradeProposalStatus, StakeLinking, Transfer } from "../../../vega/events/v1/events_pb.js";
import { GovernanceData, Proposal_State, Vote } from "../../../vega/governance_pb.js";
import { OracleData, OracleSpec } from "../../../vega/oracle_pb.js";
import { Market } from "../../../vega/markets_pb.js";
import { Asset } from "../../../vega/assets_pb.js";
import { NodeSignature } from "../../../vega/commands/v1/validator_commands_pb.js";

/**
 * A list of fields for a ledger entry
 *
 * @generated from enum datanode.api.v2.LedgerEntryField
 */
export const LedgerEntryField = proto3.makeEnum(
  "datanode.api.v2.LedgerEntryField",
  [
    {no: 0, name: "LEDGER_ENTRY_FIELD_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "LEDGER_ENTRY_FIELD_ACCOUNT_FROM_ID", localName: "ACCOUNT_FROM_ID"},
    {no: 2, name: "LEDGER_ENTRY_FIELD_ACCOUNT_TO_ID", localName: "ACCOUNT_TO_ID"},
    {no: 3, name: "LEDGER_ENTRY_FIELD_TRANSFER_TYPE", localName: "TRANSFER_TYPE"},
  ],
);

/**
 * A list of the properties of an account, used for grouping
 *
 * @generated from enum datanode.api.v2.AccountField
 */
export const AccountField = proto3.makeEnum(
  "datanode.api.v2.AccountField",
  [
    {no: 0, name: "ACCOUNT_FIELD_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ACCOUNT_FIELD_ID", localName: "ID"},
    {no: 2, name: "ACCOUNT_FIELD_PARTY_ID", localName: "PARTY_ID"},
    {no: 3, name: "ACCOUNT_FIELD_ASSET_ID", localName: "ASSET_ID"},
    {no: 4, name: "ACCOUNT_FIELD_MARKET_ID", localName: "MARKET_ID"},
    {no: 5, name: "ACCOUNT_FIELD_TYPE", localName: "TYPE"},
  ],
);

/**
 * The direction of a transfer
 *
 * @generated from enum datanode.api.v2.TransferDirection
 */
export const TransferDirection = proto3.makeEnum(
  "datanode.api.v2.TransferDirection",
  [
    {no: 0, name: "TRANSFER_DIRECTION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TRANSFER_DIRECTION_TRANSFER_FROM", localName: "TRANSFER_FROM"},
    {no: 2, name: "TRANSFER_DIRECTION_TRANSFER_TO", localName: "TRANSFER_TO"},
    {no: 3, name: "TRANSFER_DIRECTION_TRANSFER_TO_OR_FROM", localName: "TRANSFER_TO_OR_FROM"},
  ],
);

/**
 * Pagination controls
 *
 * @generated from message datanode.api.v2.OffsetPagination
 */
export const OffsetPagination = proto3.makeMessageType(
  "datanode.api.v2.OffsetPagination",
  () => [
    { no: 1, name: "skip", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "descending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Cursor information for cursor based pagination requests
 *
 * @generated from message datanode.api.v2.Pagination
 */
export const Pagination = proto3.makeMessageType(
  "datanode.api.v2.Pagination",
  () => [
    { no: 1, name: "first", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "after", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "last", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "before", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "newest_first", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ],
);

/**
 * Page information for cursor based pagination
 *
 * @generated from message datanode.api.v2.PageInfo
 */
export const PageInfo = proto3.makeMessageType(
  "datanode.api.v2.PageInfo",
  () => [
    { no: 1, name: "has_next_page", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "has_previous_page", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "start_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "end_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the current balance of an account for an asset on Vega, for a particular owner or party
 *
 * @generated from message datanode.api.v2.AccountBalance
 */
export const AccountBalance = proto3.makeMessageType(
  "datanode.api.v2.AccountBalance",
  () => [
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type", kind: "enum", T: proto3.getEnumType(AccountType) },
  ],
);

/**
 * Request that is sent when listing accounts
 *
 * @generated from message datanode.api.v2.ListAccountsRequest
 */
export const ListAccountsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListAccountsRequest",
  () => [
    { no: 1, name: "filter", kind: "message", T: AccountFilter },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response that is received from listing accounts query
 *
 * @generated from message datanode.api.v2.ListAccountsResponse
 */
export const ListAccountsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListAccountsResponse",
  () => [
    { no: 1, name: "accounts", kind: "message", T: AccountsConnection },
  ],
);

/**
 * Represents the list of accounts with the corresponding page information
 *
 * @generated from message datanode.api.v2.AccountsConnection
 */
export const AccountsConnection = proto3.makeMessageType(
  "datanode.api.v2.AccountsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: AccountEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Represents the account with corresponding cursor for it
 *
 * @generated from message datanode.api.v2.AccountEdge
 */
export const AccountEdge = proto3.makeMessageType(
  "datanode.api.v2.AccountEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: AccountBalance },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request that is sent when getting a subscription to a stream of accounts
 *
 * @generated from message datanode.api.v2.ObserveAccountsRequest
 */
export const ObserveAccountsRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveAccountsRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(AccountType) },
  ],
);

/**
 * The response that is received when subscribing to a stream of accounts
 *
 * @generated from message datanode.api.v2.ObserveAccountsResponse
 */
export const ObserveAccountsResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveAccountsResponse",
  () => [
    { no: 1, name: "snapshot", kind: "message", T: AccountSnapshotPage, oneof: "response" },
    { no: 2, name: "updates", kind: "message", T: AccountUpdates, oneof: "response" },
  ],
);

/**
 * An 'initial image' snapshot containing current account balances - may be sent over several response messages
 *
 * @generated from message datanode.api.v2.AccountSnapshotPage
 */
export const AccountSnapshotPage = proto3.makeMessageType(
  "datanode.api.v2.AccountSnapshotPage",
  () => [
    { no: 1, name: "accounts", kind: "message", T: AccountBalance, repeated: true },
    { no: 2, name: "last_page", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * A list of account updates in the last block
 *
 * @generated from message datanode.api.v2.AccountUpdates
 */
export const AccountUpdates = proto3.makeMessageType(
  "datanode.api.v2.AccountUpdates",
  () => [
    { no: 1, name: "accounts", kind: "message", T: AccountBalance, repeated: true },
  ],
);

/**
 * Request that is sent when querying node info
 *
 * @generated from message datanode.api.v2.InfoRequest
 */
export const InfoRequest = proto3.makeMessageType(
  "datanode.api.v2.InfoRequest",
  [],
);

/**
 * Response that is received from the node info query
 *
 * @generated from message datanode.api.v2.InfoResponse
 */
export const InfoResponse = proto3.makeMessageType(
  "datanode.api.v2.InfoResponse",
  () => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A request that is sent when executing the query for getting a single order
 *
 * @generated from message datanode.api.v2.GetOrderRequest
 */
export const GetOrderRequest = proto3.makeMessageType(
  "datanode.api.v2.GetOrderRequest",
  () => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ],
);

/**
 * The response received from the query for getting a single order
 *
 * @generated from message datanode.api.v2.GetOrderResponse
 */
export const GetOrderResponse = proto3.makeMessageType(
  "datanode.api.v2.GetOrderResponse",
  () => [
    { no: 1, name: "order", kind: "message", T: Order },
  ],
);

/**
 * Order filter that contains all filtering conditions and values that are applied to the orders listing
 *
 * @generated from message datanode.api.v2.OrderFilter
 */
export const OrderFilter = proto3.makeMessageType(
  "datanode.api.v2.OrderFilter",
  () => [
    { no: 1, name: "statuses", kind: "enum", T: proto3.getEnumType(Order_Status), repeated: true },
    { no: 2, name: "types", kind: "enum", T: proto3.getEnumType(Order_Type), repeated: true },
    { no: 3, name: "time_in_forces", kind: "enum", T: proto3.getEnumType(Order_TimeInForce), repeated: true },
    { no: 4, name: "exclude_liquidity", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "party_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "date_range", kind: "message", T: DateRange, opt: true },
    { no: 9, name: "live_only", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ],
);

/**
 * A request that is sent when executing a query for a list of orders
 *
 * @generated from message datanode.api.v2.ListOrdersRequest
 */
export const ListOrdersRequest = proto3.makeMessageType(
  "datanode.api.v2.ListOrdersRequest",
  () => [
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 5, name: "filter", kind: "message", T: OrderFilter, opt: true },
  ],
);

/**
 * A response that is received from the query to list orders
 *
 * @generated from message datanode.api.v2.ListOrdersResponse
 */
export const ListOrdersResponse = proto3.makeMessageType(
  "datanode.api.v2.ListOrdersResponse",
  () => [
    { no: 1, name: "orders", kind: "message", T: OrderConnection },
  ],
);

/**
 * A request that is sent when listing possible order versions
 *
 * @generated from message datanode.api.v2.ListOrderVersionsRequest
 */
export const ListOrderVersionsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListOrderVersionsRequest",
  () => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * A response that is received when listing possible order versions
 *
 * @generated from message datanode.api.v2.ListOrderVersionsResponse
 */
export const ListOrderVersionsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListOrderVersionsResponse",
  () => [
    { no: 1, name: "orders", kind: "message", T: OrderConnection },
  ],
);

/**
 * Request to subscribe to a stream of orders
 *
 * The fields for market identifier and party identifier are optional filters:
 * If omitted all orders, for all parties on all markets will be returned on the stream
 * If a market identifier is provided, the orders from that market will be returned on the stream
 * If a party identifier is provided, the orders from that party will be returned on the stream
 * Both filters can be combined
 *
 * @generated from message datanode.api.v2.ObserveOrdersRequest
 */
export const ObserveOrdersRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveOrdersRequest",
  () => [
    { no: 1, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "party_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "exclude_liquidity", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ],
);

/**
 * The response that is received from an orders subscription
 *
 * @generated from message datanode.api.v2.ObserveOrdersResponse
 */
export const ObserveOrdersResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveOrdersResponse",
  () => [
    { no: 1, name: "snapshot", kind: "message", T: OrderSnapshotPage, oneof: "response" },
    { no: 2, name: "updates", kind: "message", T: OrderUpdates, oneof: "response" },
  ],
);

/**
 * 'Initial image' of live orders, may be sent over multiple response messages
 *
 * @generated from message datanode.api.v2.OrderSnapshotPage
 */
export const OrderSnapshotPage = proto3.makeMessageType(
  "datanode.api.v2.OrderSnapshotPage",
  () => [
    { no: 1, name: "orders", kind: "message", T: Order, repeated: true },
    { no: 2, name: "last_page", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * List of order updates in the last block
 *
 * @generated from message datanode.api.v2.OrderUpdates
 */
export const OrderUpdates = proto3.makeMessageType(
  "datanode.api.v2.OrderUpdates",
  () => [
    { no: 1, name: "orders", kind: "message", T: Order, repeated: true },
  ],
);

/**
 * Request used to list all positions for a party
 * Optionally, if a market identifier is set, the results will be filtered for that market only
 *
 * @generated from message datanode.api.v2.ListPositionsRequest
 * @deprecated
 */
export const ListPositionsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListPositionsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response for a list of positions for a party
 *
 * @generated from message datanode.api.v2.ListPositionsResponse
 * @deprecated
 */
export const ListPositionsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListPositionsResponse",
  () => [
    { no: 1, name: "positions", kind: "message", T: PositionConnection },
  ],
);

/**
 * Filter to apply to the ListAllPositionsRequest
 *
 * @generated from message datanode.api.v2.PositionsFilter
 */
export const PositionsFilter = proto3.makeMessageType(
  "datanode.api.v2.PositionsFilter",
  () => [
    { no: 1, name: "party_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Request to list positions, given the position filter is supplied.
 *
 * @generated from message datanode.api.v2.ListAllPositionsRequest
 */
export const ListAllPositionsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListAllPositionsRequest",
  () => [
    { no: 1, name: "filter", kind: "message", T: PositionsFilter },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response to query for listing of positions, given the filter is supplied
 *
 * @generated from message datanode.api.v2.ListAllPositionsResponse
 */
export const ListAllPositionsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListAllPositionsResponse",
  () => [
    { no: 1, name: "positions", kind: "message", T: PositionConnection },
  ],
);

/**
 * Represents the position data with corresponding cursor for it
 *
 * @generated from message datanode.api.v2.PositionEdge
 */
export const PositionEdge = proto3.makeMessageType(
  "datanode.api.v2.PositionEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Position },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of positions with the corresponding page information
 *
 * @generated from message datanode.api.v2.PositionConnection
 */
export const PositionConnection = proto3.makeMessageType(
  "datanode.api.v2.PositionConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: PositionEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request that is used to subscribe to a stream of positions
 *
 * @generated from message datanode.api.v2.ObservePositionsRequest
 */
export const ObservePositionsRequest = proto3.makeMessageType(
  "datanode.api.v2.ObservePositionsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * A response that is received from a positions subscription request
 *
 * @generated from message datanode.api.v2.ObservePositionsResponse
 */
export const ObservePositionsResponse = proto3.makeMessageType(
  "datanode.api.v2.ObservePositionsResponse",
  () => [
    { no: 1, name: "snapshot", kind: "message", T: PositionSnapshotPage, oneof: "response" },
    { no: 2, name: "updates", kind: "message", T: PositionUpdates, oneof: "response" },
  ],
);

/**
 * 'Initial image' of current positions, may be sent over multiple response messages
 *
 * @generated from message datanode.api.v2.PositionSnapshotPage
 */
export const PositionSnapshotPage = proto3.makeMessageType(
  "datanode.api.v2.PositionSnapshotPage",
  () => [
    { no: 1, name: "positions", kind: "message", T: Position, repeated: true },
    { no: 2, name: "last_page", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * A list of position updates in the last block
 *
 * @generated from message datanode.api.v2.PositionUpdates
 */
export const PositionUpdates = proto3.makeMessageType(
  "datanode.api.v2.PositionUpdates",
  () => [
    { no: 1, name: "positions", kind: "message", T: Position, repeated: true },
  ],
);

/**
 * Ledger entry filter sets filters on returned set of ledger entries.
 * Ledger entry data can be filtered by asset ID, market ID, party ID for sending and receiving account, as well as by transfer type.
 *
 * @generated from message datanode.api.v2.LedgerEntryFilter
 */
export const LedgerEntryFilter = proto3.makeMessageType(
  "datanode.api.v2.LedgerEntryFilter",
  () => [
    { no: 1, name: "close_on_account_filters", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "from_account_filter", kind: "message", T: AccountFilter },
    { no: 3, name: "to_account_filter", kind: "message", T: AccountFilter },
    { no: 5, name: "transfer_types", kind: "enum", T: proto3.getEnumType(TransferType), repeated: true },
  ],
);

/**
 * Represents an aggregated view of ledger entry data, sender and receiver accounts,
 * details and balances for both sides after the transfer has been made
 *
 * @generated from message datanode.api.v2.AggregatedLedgerEntry
 */
export const AggregatedLedgerEntry = proto3.makeMessageType(
  "datanode.api.v2.AggregatedLedgerEntry",
  () => [
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "transfer_type", kind: "enum", T: proto3.getEnumType(TransferType) },
    { no: 5, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "from_account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 7, name: "to_account_type", kind: "enum", T: proto3.getEnumType(AccountType) },
    { no: 8, name: "from_account_party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "to_account_party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "from_account_market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "to_account_market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "from_account_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "to_account_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A request that is sent when listing ledger entries
 *
 * @generated from message datanode.api.v2.ListLedgerEntriesRequest
 */
export const ListLedgerEntriesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListLedgerEntriesRequest",
  () => [
    { no: 1, name: "filter", kind: "message", T: LedgerEntryFilter },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 3, name: "date_range", kind: "message", T: DateRange, opt: true },
  ],
);

/**
 * A request that is sent when exporting ledger entries to csv
 *
 * @generated from message datanode.api.v2.ExportLedgerEntriesRequest
 */
export const ExportLedgerEntriesRequest = proto3.makeMessageType(
  "datanode.api.v2.ExportLedgerEntriesRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 4, name: "date_range", kind: "message", T: DateRange, opt: true },
  ],
);

/**
 * A response that is received when listing ledger entries
 *
 * @generated from message datanode.api.v2.ListLedgerEntriesResponse
 */
export const ListLedgerEntriesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListLedgerEntriesResponse",
  () => [
    { no: 1, name: "ledger_entries", kind: "message", T: AggregatedLedgerEntriesConnection },
  ],
);

/**
 * A response that is received when exporting ledger entries
 *
 * @generated from message datanode.api.v2.ExportLedgerEntriesResponse
 */
export const ExportLedgerEntriesResponse = proto3.makeMessageType(
  "datanode.api.v2.ExportLedgerEntriesResponse",
  () => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Represents the aggregated ledger entry data with corresponding cursor for it
 *
 * @generated from message datanode.api.v2.AggregatedLedgerEntriesEdge
 */
export const AggregatedLedgerEntriesEdge = proto3.makeMessageType(
  "datanode.api.v2.AggregatedLedgerEntriesEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: AggregatedLedgerEntry },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of aggregated ledger entries data with the corresponding page information
 *
 * @generated from message datanode.api.v2.AggregatedLedgerEntriesConnection
 */
export const AggregatedLedgerEntriesConnection = proto3.makeMessageType(
  "datanode.api.v2.AggregatedLedgerEntriesConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: AggregatedLedgerEntriesEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * A request that is received when querying balances changes
 *
 * @generated from message datanode.api.v2.ListBalanceChangesRequest
 */
export const ListBalanceChangesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListBalanceChangesRequest",
  () => [
    { no: 1, name: "filter", kind: "message", T: AccountFilter },
    { no: 5, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 6, name: "date_range", kind: "message", T: DateRange, opt: true },
  ],
);

/**
 * A response that is received when querying balances changes
 *
 * @generated from message datanode.api.v2.ListBalanceChangesResponse
 */
export const ListBalanceChangesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListBalanceChangesResponse",
  () => [
    { no: 1, name: "balances", kind: "message", T: AggregatedBalanceConnection },
  ],
);

/**
 * A request that is used when querying balance history
 *
 * @generated from message datanode.api.v2.GetBalanceHistoryRequest
 */
export const GetBalanceHistoryRequest = proto3.makeMessageType(
  "datanode.api.v2.GetBalanceHistoryRequest",
  () => [
    { no: 1, name: "filter", kind: "message", T: AccountFilter },
    { no: 2, name: "group_by", kind: "enum", T: proto3.getEnumType(AccountField), repeated: true },
    { no: 3, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 4, name: "date_range", kind: "message", T: DateRange, opt: true },
  ],
);

/**
 * A response that is received when querying for balance history
 *
 * @generated from message datanode.api.v2.GetBalanceHistoryResponse
 */
export const GetBalanceHistoryResponse = proto3.makeMessageType(
  "datanode.api.v2.GetBalanceHistoryResponse",
  () => [
    { no: 1, name: "balances", kind: "message", T: AggregatedBalanceConnection },
  ],
);

/**
 * Represents the AggregatedBalanceEdge data with corresponding cursor for it
 *
 * @generated from message datanode.api.v2.AggregatedBalanceEdge
 */
export const AggregatedBalanceEdge = proto3.makeMessageType(
  "datanode.api.v2.AggregatedBalanceEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: AggregatedBalance },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of aggregated balance objects with the corresponding page information
 *
 * @generated from message datanode.api.v2.AggregatedBalanceConnection
 */
export const AggregatedBalanceConnection = proto3.makeMessageType(
  "datanode.api.v2.AggregatedBalanceConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: AggregatedBalanceEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * The filter that is used to filter account data by asset ID, party ID, market ID and account type
 *
 * @generated from message datanode.api.v2.AccountFilter
 */
export const AccountFilter = proto3.makeMessageType(
  "datanode.api.v2.AccountFilter",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "account_types", kind: "enum", T: proto3.getEnumType(AccountType), repeated: true },
  ],
);

/**
 * AggregatedBalance data contains the balance of the set of requested accounts combined with corresponding
 * party ID, market ID and account type details
 *
 * @generated from message datanode.api.v2.AggregatedBalance
 */
export const AggregatedBalance = proto3.makeMessageType(
  "datanode.api.v2.AggregatedBalance",
  () => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "account_type", kind: "enum", T: proto3.getEnumType(AccountType), opt: true },
  ],
);

/**
 * Request that is sent to get market depth subscription
 *
 * @generated from message datanode.api.v2.ObserveMarketsDepthRequest
 */
export const ObserveMarketsDepthRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveMarketsDepthRequest",
  () => [
    { no: 1, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Response that is received for MarketDepth subscription
 *
 * @generated from message datanode.api.v2.ObserveMarketsDepthResponse
 */
export const ObserveMarketsDepthResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveMarketsDepthResponse",
  () => [
    { no: 1, name: "market_depth", kind: "message", T: MarketDepth, repeated: true },
  ],
);

/**
 * Request that is sent for market depth update subscription
 *
 * @generated from message datanode.api.v2.ObserveMarketsDepthUpdatesRequest
 */
export const ObserveMarketsDepthUpdatesRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveMarketsDepthUpdatesRequest",
  () => [
    { no: 1, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Response that is received for market depth update subscription
 *
 * @generated from message datanode.api.v2.ObserveMarketsDepthUpdatesResponse
 */
export const ObserveMarketsDepthUpdatesResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveMarketsDepthUpdatesResponse",
  () => [
    { no: 1, name: "update", kind: "message", T: MarketDepthUpdate, repeated: true },
  ],
);

/**
 * Request that is sent for market data subscription
 *
 * @generated from message datanode.api.v2.ObserveMarketsDataRequest
 */
export const ObserveMarketsDataRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveMarketsDataRequest",
  () => [
    { no: 1, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Response that is received for market data subscription
 *
 * @generated from message datanode.api.v2.ObserveMarketsDataResponse
 */
export const ObserveMarketsDataResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveMarketsDataResponse",
  () => [
    { no: 1, name: "market_data", kind: "message", T: MarketData, repeated: true },
  ],
);

/**
 * Request that is sent when requesting latest market depth data
 *
 * @generated from message datanode.api.v2.GetLatestMarketDepthRequest
 */
export const GetLatestMarketDepthRequest = proto3.makeMessageType(
  "datanode.api.v2.GetLatestMarketDepthRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_depth", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ],
);

/**
 * Response that is received when latest market depth data is queried
 *
 * @generated from message datanode.api.v2.GetLatestMarketDepthResponse
 */
export const GetLatestMarketDepthResponse = proto3.makeMessageType(
  "datanode.api.v2.GetLatestMarketDepthResponse",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buy", kind: "message", T: PriceLevel, repeated: true },
    { no: 3, name: "sell", kind: "message", T: PriceLevel, repeated: true },
    { no: 4, name: "last_trade", kind: "message", T: Trade },
    { no: 5, name: "sequence_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Request that is sent when listing the latest market data for every market
 *
 * @generated from message datanode.api.v2.ListLatestMarketDataRequest
 */
export const ListLatestMarketDataRequest = proto3.makeMessageType(
  "datanode.api.v2.ListLatestMarketDataRequest",
  [],
);

/**
 * Response that is received when listing the latest market data for every market
 *
 * @generated from message datanode.api.v2.ListLatestMarketDataResponse
 */
export const ListLatestMarketDataResponse = proto3.makeMessageType(
  "datanode.api.v2.ListLatestMarketDataResponse",
  () => [
    { no: 1, name: "markets_data", kind: "message", T: MarketData, repeated: true },
  ],
);

/**
 * Request that is sent when listing the latest market data for a given market
 *
 * @generated from message datanode.api.v2.GetLatestMarketDataRequest
 */
export const GetLatestMarketDataRequest = proto3.makeMessageType(
  "datanode.api.v2.GetLatestMarketDataRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response that is received when listing the latest market data for a given market
 *
 * @generated from message datanode.api.v2.GetLatestMarketDataResponse
 */
export const GetLatestMarketDataResponse = proto3.makeMessageType(
  "datanode.api.v2.GetLatestMarketDataResponse",
  () => [
    { no: 1, name: "market_data", kind: "message", T: MarketData },
  ],
);

/**
 * Request that is sent for getting Market Data History
 *
 * @generated from message datanode.api.v2.GetMarketDataHistoryByIDRequest
 */
export const GetMarketDataHistoryByIDRequest = proto3.makeMessageType(
  "datanode.api.v2.GetMarketDataHistoryByIDRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "end_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 4, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 5, name: "offset_pagination", kind: "message", T: OffsetPagination, opt: true },
  ],
);

/**
 * Response that is received when querying Market Data History
 *
 * @generated from message datanode.api.v2.GetMarketDataHistoryByIDResponse
 */
export const GetMarketDataHistoryByIDResponse = proto3.makeMessageType(
  "datanode.api.v2.GetMarketDataHistoryByIDResponse",
  () => [
    { no: 1, name: "market_data", kind: "message", T: MarketDataConnection },
  ],
);

/**
 * Represents the market data with corresponding cursor for it
 *
 * @generated from message datanode.api.v2.MarketDataEdge
 */
export const MarketDataEdge = proto3.makeMessageType(
  "datanode.api.v2.MarketDataEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: MarketData },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of market data objects with the corresponding page information
 *
 * @generated from message datanode.api.v2.MarketDataConnection
 */
export const MarketDataConnection = proto3.makeMessageType(
  "datanode.api.v2.MarketDataConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: MarketDataEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request that is used to subscribe to a stream of data for all markets
 * Optionally, the list can be additionally filtered by market
 *
 * @generated from message datanode.api.v2.MarketsDataSubscribeRequest
 */
export const MarketsDataSubscribeRequest = proto3.makeMessageType(
  "datanode.api.v2.MarketsDataSubscribeRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response that is used when subscribing to a stream of data for all markets
 *
 * @generated from message datanode.api.v2.MarketsDataSubscribeResponse
 */
export const MarketsDataSubscribeResponse = proto3.makeMessageType(
  "datanode.api.v2.MarketsDataSubscribeResponse",
  () => [
    { no: 1, name: "market_data", kind: "message", T: MarketData, repeated: true },
  ],
);

/**
 * Request that is sent to list transfers
 *
 * @generated from message datanode.api.v2.ListTransfersRequest
 */
export const ListTransfersRequest = proto3.makeMessageType(
  "datanode.api.v2.ListTransfersRequest",
  () => [
    { no: 1, name: "pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "direction", kind: "enum", T: proto3.getEnumType(TransferDirection) },
    { no: 3, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response that is received when listing  transfers
 *
 * @generated from message datanode.api.v2.ListTransfersResponse
 */
export const ListTransfersResponse = proto3.makeMessageType(
  "datanode.api.v2.ListTransfersResponse",
  () => [
    { no: 1, name: "transfers", kind: "message", T: TransferConnection },
  ],
);

/**
 * Represents the transfers data with a corresponding cursor for it
 *
 * @generated from message datanode.api.v2.TransferEdge
 */
export const TransferEdge = proto3.makeMessageType(
  "datanode.api.v2.TransferEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Transfer },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of transfers data objects with the corresponding page information
 *
 * @generated from message datanode.api.v2.TransferConnection
 */
export const TransferConnection = proto3.makeMessageType(
  "datanode.api.v2.TransferConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: TransferEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request that is used to query current network limits
 *
 * @generated from message datanode.api.v2.GetNetworkLimitsRequest
 */
export const GetNetworkLimitsRequest = proto3.makeMessageType(
  "datanode.api.v2.GetNetworkLimitsRequest",
  [],
);

/**
 * Response received when querying the current network limits
 *
 * @generated from message datanode.api.v2.GetNetworkLimitsResponse
 */
export const GetNetworkLimitsResponse = proto3.makeMessageType(
  "datanode.api.v2.GetNetworkLimitsResponse",
  () => [
    { no: 1, name: "limits", kind: "message", T: NetworkLimits },
  ],
);

/**
 * Request that is used to fetch a list of supported intervals for the given market along with the corresponding candle ID
 *
 * @generated from message datanode.api.v2.ListCandleIntervalsRequest
 */
export const ListCandleIntervalsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListCandleIntervalsRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Maps an interval for a given market to its corresponding candle ID
 *
 * @generated from message datanode.api.v2.IntervalToCandleId
 */
export const IntervalToCandleId = proto3.makeMessageType(
  "datanode.api.v2.IntervalToCandleId",
  () => [
    { no: 1, name: "interval", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "candle_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A list of mapped pairs `interval` -> `candle ID` for a given market
 *
 * @generated from message datanode.api.v2.ListCandleIntervalsResponse
 */
export const ListCandleIntervalsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListCandleIntervalsResponse",
  () => [
    { no: 1, name: "interval_to_candle_id", kind: "message", T: IntervalToCandleId, repeated: true },
  ],
);

/**
 * Represents the high, low, open, and closing prices for an interval of trading,
 * referred to commonly as a candlestick or candle
 *
 * @generated from message datanode.api.v2.Candle
 */
export const Candle = proto3.makeMessageType(
  "datanode.api.v2.Candle",
  () => [
    { no: 1, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "last_update", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "high", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "low", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "open", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "close", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Request that is used to subscribe to a stream of candles
 *
 * @generated from message datanode.api.v2.ObserveCandleDataRequest
 */
export const ObserveCandleDataRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveCandleDataRequest",
  () => [
    { no: 1, name: "candle_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response that is received when subscribing to a stream of candles
 *
 * @generated from message datanode.api.v2.ObserveCandleDataResponse
 */
export const ObserveCandleDataResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveCandleDataResponse",
  () => [
    { no: 1, name: "candle", kind: "message", T: Candle },
  ],
);

/**
 * Request that is used when listing candles for a market at an interval
 *
 * @generated from message datanode.api.v2.ListCandleDataRequest
 */
export const ListCandleDataRequest = proto3.makeMessageType(
  "datanode.api.v2.ListCandleDataRequest",
  () => [
    { no: 1, name: "candle_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "to_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "interval", kind: "enum", T: proto3.getEnumType(Interval) },
    { no: 5, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response for list of candles for a market at an interval
 *
 * @generated from message datanode.api.v2.ListCandleDataResponse
 */
export const ListCandleDataResponse = proto3.makeMessageType(
  "datanode.api.v2.ListCandleDataResponse",
  () => [
    { no: 1, name: "candles", kind: "message", T: CandleDataConnection },
  ],
);

/**
 * Represents the candle data with the corresponding cursor for it
 *
 * @generated from message datanode.api.v2.CandleEdge
 */
export const CandleEdge = proto3.makeMessageType(
  "datanode.api.v2.CandleEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Candle },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of candles with the page information of the listing
 *
 * @generated from message datanode.api.v2.CandleDataConnection
 */
export const CandleDataConnection = proto3.makeMessageType(
  "datanode.api.v2.CandleDataConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: CandleEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request that is used to list governance votes
 *
 * @generated from message datanode.api.v2.ListVotesRequest
 */
export const ListVotesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListVotesRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "proposal_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response that is received when listing Votes
 *
 * @generated from message datanode.api.v2.ListVotesResponse
 */
export const ListVotesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListVotesResponse",
  () => [
    { no: 1, name: "votes", kind: "message", T: VoteConnection },
  ],
);

/**
 * Votes data with the corresponding cursor for it
 *
 * @generated from message datanode.api.v2.VoteEdge
 */
export const VoteEdge = proto3.makeMessageType(
  "datanode.api.v2.VoteEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Vote },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of Vote data chunks with the corresponding list page information
 *
 * @generated from message datanode.api.v2.VoteConnection
 */
export const VoteConnection = proto3.makeMessageType(
  "datanode.api.v2.VoteConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: VoteEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request that is sent to subscribe to votes
 *
 * @generated from message datanode.api.v2.ObserveVotesRequest
 */
export const ObserveVotesRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveVotesRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "proposal_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Response that is received from votes subscription
 *
 * @generated from message datanode.api.v2.ObserveVotesResponse
 */
export const ObserveVotesResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveVotesResponse",
  () => [
    { no: 1, name: "vote", kind: "message", T: Vote },
  ],
);

/**
 * Request for adding a signature bundle to the signer list of a multisig contract for a particular validator
 *
 * @generated from message datanode.api.v2.ListERC20MultiSigSignerAddedBundlesRequest
 */
export const ListERC20MultiSigSignerAddedBundlesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListERC20MultiSigSignerAddedBundlesRequest",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
  ],
);

/**
 * Response from adding a signature bundle to the signer list of a multisig contract for a particular validator
 *
 * @generated from message datanode.api.v2.ListERC20MultiSigSignerAddedBundlesResponse
 */
export const ListERC20MultiSigSignerAddedBundlesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListERC20MultiSigSignerAddedBundlesResponse",
  () => [
    { no: 1, name: "bundles", kind: "message", T: ERC20MultiSigSignerAddedConnection },
  ],
);

/**
 * Represents the signature data that is to be added with the corresponding cursor for it
 *
 * @generated from message datanode.api.v2.ERC20MultiSigSignerAddedEdge
 */
export const ERC20MultiSigSignerAddedEdge = proto3.makeMessageType(
  "datanode.api.v2.ERC20MultiSigSignerAddedEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: ERC20MultiSigSignerAdded },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the signature bundle data that is to be added the corresponding cursor for it
 *
 * @generated from message datanode.api.v2.ERC20MultiSigSignerAddedBundleEdge
 */
export const ERC20MultiSigSignerAddedBundleEdge = proto3.makeMessageType(
  "datanode.api.v2.ERC20MultiSigSignerAddedBundleEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: ERC20MultiSigSignerAddedBundle },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of signature data chunks to be added with the corresponding list page information
 *
 * @generated from message datanode.api.v2.ERC20MultiSigSignerAddedConnection
 */
export const ERC20MultiSigSignerAddedConnection = proto3.makeMessageType(
  "datanode.api.v2.ERC20MultiSigSignerAddedConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: ERC20MultiSigSignerAddedBundleEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Signature bundle data to be added
 *
 * @generated from message datanode.api.v2.ERC20MultiSigSignerAddedBundle
 */
export const ERC20MultiSigSignerAddedBundle = proto3.makeMessageType(
  "datanode.api.v2.ERC20MultiSigSignerAddedBundle",
  () => [
    { no: 1, name: "new_signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "signatures", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request for removing a signature bundle from the signer list of the multisig contract for a particular validator
 *
 * @generated from message datanode.api.v2.ListERC20MultiSigSignerRemovedBundlesRequest
 */
export const ListERC20MultiSigSignerRemovedBundlesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListERC20MultiSigSignerRemovedBundlesRequest",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
  ],
);

/**
 * Response when removing a signature bundle from the signer list of the multisig contract for a particular validator
 *
 * @generated from message datanode.api.v2.ListERC20MultiSigSignerRemovedBundlesResponse
 */
export const ListERC20MultiSigSignerRemovedBundlesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListERC20MultiSigSignerRemovedBundlesResponse",
  () => [
    { no: 1, name: "bundles", kind: "message", T: ERC20MultiSigSignerRemovedConnection },
  ],
);

/**
 * Represents the signature data to be removed with the corresponding cursor for it
 *
 * @generated from message datanode.api.v2.ERC20MultiSigSignerRemovedEdge
 */
export const ERC20MultiSigSignerRemovedEdge = proto3.makeMessageType(
  "datanode.api.v2.ERC20MultiSigSignerRemovedEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: ERC20MultiSigSignerRemoved },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the signature bundle data to be removed, with the corresponding cursor for it
 *
 * @generated from message datanode.api.v2.ERC20MultiSigSignerRemovedBundleEdge
 */
export const ERC20MultiSigSignerRemovedBundleEdge = proto3.makeMessageType(
  "datanode.api.v2.ERC20MultiSigSignerRemovedBundleEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: ERC20MultiSigSignerRemovedBundle },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents the list of signature data chunks to be removed, with the corresponding list page information
 *
 * @generated from message datanode.api.v2.ERC20MultiSigSignerRemovedConnection
 */
export const ERC20MultiSigSignerRemovedConnection = proto3.makeMessageType(
  "datanode.api.v2.ERC20MultiSigSignerRemovedConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: ERC20MultiSigSignerRemovedBundleEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Signature bundle data to be removed
 *
 * @generated from message datanode.api.v2.ERC20MultiSigSignerRemovedBundle
 */
export const ERC20MultiSigSignerRemovedBundle = proto3.makeMessageType(
  "datanode.api.v2.ERC20MultiSigSignerRemovedBundle",
  () => [
    { no: 1, name: "old_signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "signatures", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "epoch_seq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request for listing the signature bundle to an ERC-20 token in the collateral bridge
 *
 * @generated from message datanode.api.v2.GetERC20ListAssetBundleRequest
 */
export const GetERC20ListAssetBundleRequest = proto3.makeMessageType(
  "datanode.api.v2.GetERC20ListAssetBundleRequest",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response from listing the signature bundle to an ERC-20 token in the collateral bridge
 *
 * @generated from message datanode.api.v2.GetERC20ListAssetBundleResponse
 */
export const GetERC20ListAssetBundleResponse = proto3.makeMessageType(
  "datanode.api.v2.GetERC20ListAssetBundleResponse",
  () => [
    { no: 1, name: "asset_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vega_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "signatures", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request for the signature bundle to update the token limits (maxLifetimeDeposit and withdrawThreshold) for a given ERC20 token (already allowlisted) in the collateral bridge
 *
 * @generated from message datanode.api.v2.GetERC20SetAssetLimitsBundleRequest
 */
export const GetERC20SetAssetLimitsBundleRequest = proto3.makeMessageType(
  "datanode.api.v2.GetERC20SetAssetLimitsBundleRequest",
  () => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response for the signature bundle to update the token limits (maxLifetimeDeposit and withdrawThreshold) for a given ERC20 token (already allowlisted) in the collateral bridge
 *
 * @generated from message datanode.api.v2.GetERC20SetAssetLimitsBundleResponse
 */
export const GetERC20SetAssetLimitsBundleResponse = proto3.makeMessageType(
  "datanode.api.v2.GetERC20SetAssetLimitsBundleResponse",
  () => [
    { no: 1, name: "asset_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vega_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lifetime_limit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "signatures", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The request to get all information required to bundle the call to finalise the withdrawal on the erc20 bridge
 *
 * @generated from message datanode.api.v2.GetERC20WithdrawalApprovalRequest
 */
export const GetERC20WithdrawalApprovalRequest = proto3.makeMessageType(
  "datanode.api.v2.GetERC20WithdrawalApprovalRequest",
  () => [
    { no: 1, name: "withdrawal_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The response with all information required to bundle the call to finalise the withdrawal on the erc20 bridge
 * function withdraw_asset(address asset_source, uint256 asset_id, uint256 amount, uint256 expiry, uint256 nonce, bytes memory signatures)
 *
 * @generated from message datanode.api.v2.GetERC20WithdrawalApprovalResponse
 */
export const GetERC20WithdrawalApprovalResponse = proto3.makeMessageType(
  "datanode.api.v2.GetERC20WithdrawalApprovalResponse",
  () => [
    { no: 1, name: "asset_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signatures", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "target_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "creation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Request for the latest trade that occurred on Vega for a given market
 *
 * @generated from message datanode.api.v2.GetLastTradeRequest
 */
export const GetLastTradeRequest = proto3.makeMessageType(
  "datanode.api.v2.GetLastTradeRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response for the latest trade that occurred on Vega for a given market
 *
 * @generated from message datanode.api.v2.GetLastTradeResponse
 */
export const GetLastTradeResponse = proto3.makeMessageType(
  "datanode.api.v2.GetLastTradeResponse",
  () => [
    { no: 1, name: "trade", kind: "message", T: Trade },
  ],
);

/**
 * Request to list trades
 *
 * @generated from message datanode.api.v2.ListTradesRequest
 */
export const ListTradesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListTradesRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 5, name: "date_range", kind: "message", T: DateRange, opt: true },
  ],
);

/**
 * Response from listing trades
 *
 * @generated from message datanode.api.v2.ListTradesResponse
 */
export const ListTradesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListTradesResponse",
  () => [
    { no: 1, name: "trades", kind: "message", T: TradeConnection },
  ],
);

/**
 * List of trades with the corresponding list page information
 *
 * @generated from message datanode.api.v2.TradeConnection
 */
export const TradeConnection = proto3.makeMessageType(
  "datanode.api.v2.TradeConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: TradeEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * List of trades
 *
 * @generated from message datanode.api.v2.TradeEdge
 */
export const TradeEdge = proto3.makeMessageType(
  "datanode.api.v2.TradeEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Trade },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request to subscribe to a stream of trades
 *
 * The fields for market ID and party ID are optional filters:
 * If omitted all trades, for all parties on all markets will be returned on the stream
 * If market identifier is given, trades from that market will be returned on the stream
 * If party identifier is given, trades from that party will be returned on the stream
 * Both filters can be combined
 *
 * @generated from message datanode.api.v2.ObserveTradesRequest
 */
export const ObserveTradesRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveTradesRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * A stream of trades
 *
 * @generated from message datanode.api.v2.ObserveTradesResponse
 */
export const ObserveTradesResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveTradesResponse",
  () => [
    { no: 1, name: "trades", kind: "message", T: Trade, repeated: true },
  ],
);

/**
 * The request to get a specific oracle spec by its ID
 *
 * @generated from message datanode.api.v2.GetOracleSpecRequest
 */
export const GetOracleSpecRequest = proto3.makeMessageType(
  "datanode.api.v2.GetOracleSpecRequest",
  () => [
    { no: 1, name: "oracle_spec_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The response for a oracle spec
 *
 * @generated from message datanode.api.v2.GetOracleSpecResponse
 */
export const GetOracleSpecResponse = proto3.makeMessageType(
  "datanode.api.v2.GetOracleSpecResponse",
  () => [
    { no: 1, name: "oracle_spec", kind: "message", T: OracleSpec },
  ],
);

/**
 * The request to get all active oracle specs
 *
 * @generated from message datanode.api.v2.ListOracleSpecsRequest
 */
export const ListOracleSpecsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListOracleSpecsRequest",
  () => [
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * The response to get all active oracle specs
 *
 * @generated from message datanode.api.v2.ListOracleSpecsResponse
 */
export const ListOracleSpecsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListOracleSpecsResponse",
  () => [
    { no: 1, name: "oracle_specs", kind: "message", T: OracleSpecsConnection },
  ],
);

/**
 * The request to get all seen oracle data
 *
 * @generated from message datanode.api.v2.ListOracleDataRequest
 */
export const ListOracleDataRequest = proto3.makeMessageType(
  "datanode.api.v2.ListOracleDataRequest",
  () => [
    { no: 1, name: "oracle_spec_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * The response to get all seen oracle data
 *
 * @generated from message datanode.api.v2.ListOracleDataResponse
 */
export const ListOracleDataResponse = proto3.makeMessageType(
  "datanode.api.v2.ListOracleDataResponse",
  () => [
    { no: 1, name: "oracle_data", kind: "message", T: OracleDataConnection },
  ],
);

/**
 * Oracle specs with cursor
 *
 * @generated from message datanode.api.v2.OracleSpecEdge
 */
export const OracleSpecEdge = proto3.makeMessageType(
  "datanode.api.v2.OracleSpecEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: OracleSpec },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Oracle specs with corresponding list page information
 *
 * @generated from message datanode.api.v2.OracleSpecsConnection
 */
export const OracleSpecsConnection = proto3.makeMessageType(
  "datanode.api.v2.OracleSpecsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: OracleSpecEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Oracle data with corresponding cursor
 *
 * @generated from message datanode.api.v2.OracleDataEdge
 */
export const OracleDataEdge = proto3.makeMessageType(
  "datanode.api.v2.OracleDataEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: OracleData },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Oracle data with page info
 *
 * @generated from message datanode.api.v2.OracleDataConnection
 */
export const OracleDataConnection = proto3.makeMessageType(
  "datanode.api.v2.OracleDataConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: OracleDataEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request for getting a market by ID
 *
 * @generated from message datanode.api.v2.GetMarketRequest
 */
export const GetMarketRequest = proto3.makeMessageType(
  "datanode.api.v2.GetMarketRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response from getting a market by ID
 *
 * @generated from message datanode.api.v2.GetMarketResponse
 */
export const GetMarketResponse = proto3.makeMessageType(
  "datanode.api.v2.GetMarketResponse",
  () => [
    { no: 1, name: "market", kind: "message", T: Market },
  ],
);

/**
 * Request for listing markets
 *
 * @generated from message datanode.api.v2.ListMarketsRequest
 */
export const ListMarketsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListMarketsRequest",
  () => [
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 3, name: "include_settled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ],
);

/**
 * Response from listing markets
 *
 * @generated from message datanode.api.v2.ListMarketsResponse
 */
export const ListMarketsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListMarketsResponse",
  () => [
    { no: 1, name: "markets", kind: "message", T: MarketConnection },
  ],
);

/**
 * Market data with corresponding cursor
 *
 * @generated from message datanode.api.v2.MarketEdge
 */
export const MarketEdge = proto3.makeMessageType(
  "datanode.api.v2.MarketEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Market },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Market data list with corresponding list page information
 *
 * @generated from message datanode.api.v2.MarketConnection
 */
export const MarketConnection = proto3.makeMessageType(
  "datanode.api.v2.MarketConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: MarketEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request to get party by ID
 *
 * @generated from message datanode.api.v2.GetPartyRequest
 */
export const GetPartyRequest = proto3.makeMessageType(
  "datanode.api.v2.GetPartyRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response from getting party by ID
 *
 * @generated from message datanode.api.v2.GetPartyResponse
 */
export const GetPartyResponse = proto3.makeMessageType(
  "datanode.api.v2.GetPartyResponse",
  () => [
    { no: 1, name: "party", kind: "message", T: Party },
  ],
);

/**
 * Request to list parties by ID
 *
 * @generated from message datanode.api.v2.ListPartiesRequest
 */
export const ListPartiesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListPartiesRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ],
);

/**
 * Response from listing parties
 *
 * @generated from message datanode.api.v2.ListPartiesResponse
 */
export const ListPartiesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListPartiesResponse",
  () => [
    { no: 1, name: "parties", kind: "message", T: PartyConnection },
  ],
);

/**
 * Party data with corresponding cursors
 *
 * @generated from message datanode.api.v2.PartyEdge
 */
export const PartyEdge = proto3.makeMessageType(
  "datanode.api.v2.PartyEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Party },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List of parties data with page info
 *
 * @generated from message datanode.api.v2.PartyConnection
 */
export const PartyConnection = proto3.makeMessageType(
  "datanode.api.v2.PartyConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: PartyEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Order data with corresponding cursor
 *
 * @generated from message datanode.api.v2.OrderEdge
 */
export const OrderEdge = proto3.makeMessageType(
  "datanode.api.v2.OrderEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Order },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request for listing margin levels
 *
 * @generated from message datanode.api.v2.ListMarginLevelsRequest
 */
export const ListMarginLevelsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListMarginLevelsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ],
);

/**
 * Response from listing margin levels
 *
 * @generated from message datanode.api.v2.ListMarginLevelsResponse
 */
export const ListMarginLevelsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListMarginLevelsResponse",
  () => [
    { no: 1, name: "margin_levels", kind: "message", T: MarginConnection },
  ],
);

/**
 * Request to subscribe to a stream of MarginLevels data matching the given party identifier
 * Optionally, the list can be additionally filtered by market
 *
 * @generated from message datanode.api.v2.ObserveMarginLevelsRequest
 */
export const ObserveMarginLevelsRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveMarginLevelsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Response from subscribing to margin levels data
 *
 * @generated from message datanode.api.v2.ObserveMarginLevelsResponse
 */
export const ObserveMarginLevelsResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveMarginLevelsResponse",
  () => [
    { no: 1, name: "margin_levels", kind: "message", T: MarginLevels },
  ],
);

/**
 * List of orders data with corresponding page information
 *
 * @generated from message datanode.api.v2.OrderConnection
 */
export const OrderConnection = proto3.makeMessageType(
  "datanode.api.v2.OrderConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: OrderEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Margin data with corresponding cursors
 *
 * @generated from message datanode.api.v2.MarginEdge
 */
export const MarginEdge = proto3.makeMessageType(
  "datanode.api.v2.MarginEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: MarginLevels },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List of margins data with corresponding page information
 *
 * @generated from message datanode.api.v2.MarginConnection
 */
export const MarginConnection = proto3.makeMessageType(
  "datanode.api.v2.MarginConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: MarginEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * A request to get reward details for a party
 *
 * @generated from message datanode.api.v2.ListRewardsRequest
 */
export const ListRewardsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListRewardsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 4, name: "from_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "to_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ],
);

/**
 * The response for listing reward details for a single party
 *
 * @generated from message datanode.api.v2.ListRewardsResponse
 */
export const ListRewardsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListRewardsResponse",
  () => [
    { no: 1, name: "rewards", kind: "message", T: RewardsConnection },
  ],
);

/**
 * Rewards data with corresponding cursor
 *
 * @generated from message datanode.api.v2.RewardEdge
 */
export const RewardEdge = proto3.makeMessageType(
  "datanode.api.v2.RewardEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Reward },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Paged rewards data with corresponding page information
 *
 * @generated from message datanode.api.v2.RewardsConnection
 */
export const RewardsConnection = proto3.makeMessageType(
  "datanode.api.v2.RewardsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: RewardEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * A request to get reward details for a party
 *
 * @generated from message datanode.api.v2.ListRewardSummariesRequest
 */
export const ListRewardSummariesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListRewardSummariesRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * The response from listing reward details in for a single party
 *
 * @generated from message datanode.api.v2.ListRewardSummariesResponse
 */
export const ListRewardSummariesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListRewardSummariesResponse",
  () => [
    { no: 1, name: "summaries", kind: "message", T: RewardSummary, repeated: true },
  ],
);

/**
 * A filter to restrict the results returned by the ListEpochRewardSummaries
 *
 * @generated from message datanode.api.v2.RewardSummaryFilter
 */
export const RewardSummaryFilter = proto3.makeMessageType(
  "datanode.api.v2.RewardSummaryFilter",
  () => [
    { no: 1, name: "asset_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "from_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "to_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ],
);

/**
 * A request to get summary of reward per epoch for a given range of epochs
 *
 * @generated from message datanode.api.v2.ListEpochRewardSummariesRequest
 */
export const ListEpochRewardSummariesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListEpochRewardSummariesRequest",
  () => [
    { no: 1, name: "filter", kind: "message", T: RewardSummaryFilter },
    { no: 4, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * The return message with reward details in for a single party
 *
 * @generated from message datanode.api.v2.ListEpochRewardSummariesResponse
 */
export const ListEpochRewardSummariesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListEpochRewardSummariesResponse",
  () => [
    { no: 1, name: "summaries", kind: "message", T: EpochRewardSummaryConnection },
  ],
);

/**
 * Paged rewards summary data for epoch with corresponding page information
 *
 * @generated from message datanode.api.v2.EpochRewardSummaryConnection
 */
export const EpochRewardSummaryConnection = proto3.makeMessageType(
  "datanode.api.v2.EpochRewardSummaryConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: EpochRewardSummaryEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Rewards summary data for epoch with corresponding cursors
 *
 * @generated from message datanode.api.v2.EpochRewardSummaryEdge
 */
export const EpochRewardSummaryEdge = proto3.makeMessageType(
  "datanode.api.v2.EpochRewardSummaryEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: EpochRewardSummary },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request sent for subscribing to rewards
 *
 * @generated from message datanode.api.v2.ObserveRewardsRequest
 */
export const ObserveRewardsRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveRewardsRequest",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Response that is received from subscribing to rewards data
 *
 * @generated from message datanode.api.v2.ObserveRewardsResponse
 */
export const ObserveRewardsResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveRewardsResponse",
  () => [
    { no: 1, name: "reward", kind: "message", T: Reward },
  ],
);

/**
 * A request to get data about a specific deposit by ID
 *
 * @generated from message datanode.api.v2.GetDepositRequest
 */
export const GetDepositRequest = proto3.makeMessageType(
  "datanode.api.v2.GetDepositRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A response that is received from getting deposit data
 *
 * @generated from message datanode.api.v2.GetDepositResponse
 */
export const GetDepositResponse = proto3.makeMessageType(
  "datanode.api.v2.GetDepositResponse",
  () => [
    { no: 1, name: "deposit", kind: "message", T: Deposit },
  ],
);

/**
 * A request to list all deposits for a given party
 *
 * @generated from message datanode.api.v2.ListDepositsRequest
 */
export const ListDepositsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListDepositsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 3, name: "date_range", kind: "message", T: DateRange, opt: true },
  ],
);

/**
 * Response from listing deposits
 *
 * @generated from message datanode.api.v2.ListDepositsResponse
 */
export const ListDepositsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListDepositsResponse",
  () => [
    { no: 1, name: "deposits", kind: "message", T: DepositsConnection },
  ],
);

/**
 * Deposits data with corresponding cursor
 *
 * @generated from message datanode.api.v2.DepositEdge
 */
export const DepositEdge = proto3.makeMessageType(
  "datanode.api.v2.DepositEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Deposit },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Paged deposits data received with the corresponding page information
 *
 * @generated from message datanode.api.v2.DepositsConnection
 */
export const DepositsConnection = proto3.makeMessageType(
  "datanode.api.v2.DepositsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: DepositEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * A request to get a specific withdrawal by identifier
 *
 * @generated from message datanode.api.v2.GetWithdrawalRequest
 */
export const GetWithdrawalRequest = proto3.makeMessageType(
  "datanode.api.v2.GetWithdrawalRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A response for a withdrawal request
 *
 * @generated from message datanode.api.v2.GetWithdrawalResponse
 */
export const GetWithdrawalResponse = proto3.makeMessageType(
  "datanode.api.v2.GetWithdrawalResponse",
  () => [
    { no: 1, name: "withdrawal", kind: "message", T: Withdrawal },
  ],
);

/**
 * List all withdrawals for a given party
 *
 * @generated from message datanode.api.v2.ListWithdrawalsRequest
 */
export const ListWithdrawalsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListWithdrawalsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
    { no: 3, name: "date_range", kind: "message", T: DateRange, opt: true },
  ],
);

/**
 * Response from listing withdrawals data
 *
 * @generated from message datanode.api.v2.ListWithdrawalsResponse
 */
export const ListWithdrawalsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListWithdrawalsResponse",
  () => [
    { no: 1, name: "withdrawals", kind: "message", T: WithdrawalsConnection },
  ],
);

/**
 * Withdrawals data with corresponding cursor
 *
 * @generated from message datanode.api.v2.WithdrawalEdge
 */
export const WithdrawalEdge = proto3.makeMessageType(
  "datanode.api.v2.WithdrawalEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Withdrawal },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List of withdrawals data with corresponding page information
 *
 * @generated from message datanode.api.v2.WithdrawalsConnection
 */
export const WithdrawalsConnection = proto3.makeMessageType(
  "datanode.api.v2.WithdrawalsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: WithdrawalEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request for obtaining asset
 *
 * @generated from message datanode.api.v2.GetAssetRequest
 */
export const GetAssetRequest = proto3.makeMessageType(
  "datanode.api.v2.GetAssetRequest",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response from getting an asset
 *
 * @generated from message datanode.api.v2.GetAssetResponse
 */
export const GetAssetResponse = proto3.makeMessageType(
  "datanode.api.v2.GetAssetResponse",
  () => [
    { no: 1, name: "asset", kind: "message", T: Asset },
  ],
);

/**
 * Request for listing assets data
 *
 * @generated from message datanode.api.v2.ListAssetsRequest
 */
export const ListAssetsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListAssetsRequest",
  () => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response from listing assets
 *
 * @generated from message datanode.api.v2.ListAssetsResponse
 */
export const ListAssetsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListAssetsResponse",
  () => [
    { no: 1, name: "assets", kind: "message", T: AssetsConnection },
  ],
);

/**
 * Assets data with corresponding cursor data
 *
 * @generated from message datanode.api.v2.AssetEdge
 */
export const AssetEdge = proto3.makeMessageType(
  "datanode.api.v2.AssetEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Asset },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Paged list of asset data with corresponding page information
 *
 * @generated from message datanode.api.v2.AssetsConnection
 */
export const AssetsConnection = proto3.makeMessageType(
  "datanode.api.v2.AssetsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: AssetEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request for listing liquidity provisions
 *
 * @generated from message datanode.api.v2.ListLiquidityProvisionsRequest
 */
export const ListLiquidityProvisionsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListLiquidityProvisionsRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "live", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response from listing liquidity provisions
 *
 * @generated from message datanode.api.v2.ListLiquidityProvisionsResponse
 */
export const ListLiquidityProvisionsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListLiquidityProvisionsResponse",
  () => [
    { no: 1, name: "liquidity_provisions", kind: "message", T: LiquidityProvisionsConnection },
  ],
);

/**
 * Paged liquidity provision data with corresponding cursor
 *
 * @generated from message datanode.api.v2.LiquidityProvisionsEdge
 */
export const LiquidityProvisionsEdge = proto3.makeMessageType(
  "datanode.api.v2.LiquidityProvisionsEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: LiquidityProvision },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List of liquidity provisions data chunks with corresponding page information
 *
 * @generated from message datanode.api.v2.LiquidityProvisionsConnection
 */
export const LiquidityProvisionsConnection = proto3.makeMessageType(
  "datanode.api.v2.LiquidityProvisionsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: LiquidityProvisionsEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request sent to subscribe to liquidity provisions
 *
 * @generated from message datanode.api.v2.ObserveLiquidityProvisionsRequest
 */
export const ObserveLiquidityProvisionsRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveLiquidityProvisionsRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Response from liquidity provisions subscription
 *
 * @generated from message datanode.api.v2.ObserveLiquidityProvisionsResponse
 */
export const ObserveLiquidityProvisionsResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveLiquidityProvisionsResponse",
  () => [
    { no: 1, name: "liquidity_provisions", kind: "message", T: LiquidityProvision, repeated: true },
  ],
);

/**
 * Request to get governance data
 *
 * @generated from message datanode.api.v2.GetGovernanceDataRequest
 */
export const GetGovernanceDataRequest = proto3.makeMessageType(
  "datanode.api.v2.GetGovernanceDataRequest",
  () => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Response from getting governance data
 *
 * @generated from message datanode.api.v2.GetGovernanceDataResponse
 */
export const GetGovernanceDataResponse = proto3.makeMessageType(
  "datanode.api.v2.GetGovernanceDataResponse",
  () => [
    { no: 1, name: "data", kind: "message", T: GovernanceData },
  ],
);

/**
 * Request to list governance data
 *
 * @generated from message datanode.api.v2.ListGovernanceDataRequest
 */
export const ListGovernanceDataRequest = proto3.makeMessageType(
  "datanode.api.v2.ListGovernanceDataRequest",
  () => [
    { no: 1, name: "proposal_state", kind: "enum", T: proto3.getEnumType(Proposal_State), opt: true },
    { no: 2, name: "proposal_type", kind: "enum", T: proto3.getEnumType(ListGovernanceDataRequest_Type), opt: true },
    { no: 3, name: "proposer_party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "proposal_reference", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Filter for the type(s) of governance proposals to view
 *
 * @generated from enum datanode.api.v2.ListGovernanceDataRequest.Type
 */
export const ListGovernanceDataRequest_Type = proto3.makeEnum(
  "datanode.api.v2.ListGovernanceDataRequest.Type",
  [
    {no: 0, name: "TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "TYPE_ALL", localName: "ALL"},
    {no: 2, name: "TYPE_NEW_MARKET", localName: "NEW_MARKET"},
    {no: 3, name: "TYPE_UPDATE_MARKET", localName: "UPDATE_MARKET"},
    {no: 4, name: "TYPE_NETWORK_PARAMETERS", localName: "NETWORK_PARAMETERS"},
    {no: 5, name: "TYPE_NEW_ASSET", localName: "NEW_ASSET"},
    {no: 6, name: "TYPE_NEW_FREE_FORM", localName: "NEW_FREE_FORM"},
    {no: 7, name: "TYPE_UPDATE_ASSET", localName: "UPDATE_ASSET"},
  ],
);

/**
 * Response from listing governance data
 *
 * @generated from message datanode.api.v2.ListGovernanceDataResponse
 */
export const ListGovernanceDataResponse = proto3.makeMessageType(
  "datanode.api.v2.ListGovernanceDataResponse",
  () => [
    { no: 1, name: "connection", kind: "message", T: GovernanceDataConnection },
  ],
);

/**
 * Governance data with corresponding cursor
 *
 * @generated from message datanode.api.v2.GovernanceDataEdge
 */
export const GovernanceDataEdge = proto3.makeMessageType(
  "datanode.api.v2.GovernanceDataEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: GovernanceData },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Paged list of governance data with corresponding page information
 *
 * @generated from message datanode.api.v2.GovernanceDataConnection
 */
export const GovernanceDataConnection = proto3.makeMessageType(
  "datanode.api.v2.GovernanceDataConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: GovernanceDataEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request for governance subscription
 *
 * @generated from message datanode.api.v2.ObserveGovernanceRequest
 */
export const ObserveGovernanceRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveGovernanceRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Response from governance subscription
 *
 * @generated from message datanode.api.v2.ObserveGovernanceResponse
 */
export const ObserveGovernanceResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveGovernanceResponse",
  () => [
    { no: 1, name: "data", kind: "message", T: GovernanceData },
  ],
);

/**
 * Request for listing delegations
 *
 * @generated from message datanode.api.v2.ListDelegationsRequest
 */
export const ListDelegationsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListDelegationsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "epoch_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response from listing delegations
 *
 * @generated from message datanode.api.v2.ListDelegationsResponse
 */
export const ListDelegationsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListDelegationsResponse",
  () => [
    { no: 1, name: "delegations", kind: "message", T: DelegationsConnection },
  ],
);

/**
 * Delegation data with corresponding cursors
 *
 * @generated from message datanode.api.v2.DelegationEdge
 */
export const DelegationEdge = proto3.makeMessageType(
  "datanode.api.v2.DelegationEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Delegation },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List of delegations data with corresponding page information
 *
 * @generated from message datanode.api.v2.DelegationsConnection
 */
export const DelegationsConnection = proto3.makeMessageType(
  "datanode.api.v2.DelegationsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: DelegationEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request to subscribe to all event related to delegations, with the given filters
 *
 * @generated from message datanode.api.v2.ObserveDelegationsRequest
 */
export const ObserveDelegationsRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveDelegationsRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * Response with all events related to delegations, with the given filters
 *
 * @generated from message datanode.api.v2.ObserveDelegationsResponse
 */
export const ObserveDelegationsResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveDelegationsResponse",
  () => [
    { no: 1, name: "delegation", kind: "message", T: Delegation },
  ],
);

/**
 * Request to get network data
 *
 * @generated from message datanode.api.v2.GetNetworkDataRequest
 */
export const GetNetworkDataRequest = proto3.makeMessageType(
  "datanode.api.v2.GetNetworkDataRequest",
  [],
);

/**
 * Response from getting network data
 *
 * @generated from message datanode.api.v2.GetNetworkDataResponse
 */
export const GetNetworkDataResponse = proto3.makeMessageType(
  "datanode.api.v2.GetNetworkDataResponse",
  () => [
    { no: 1, name: "node_data", kind: "message", T: NodeData },
  ],
);

/**
 * Request to get node data
 *
 * @generated from message datanode.api.v2.GetNodeRequest
 */
export const GetNodeRequest = proto3.makeMessageType(
  "datanode.api.v2.GetNodeRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response from getting node
 *
 * @generated from message datanode.api.v2.GetNodeResponse
 */
export const GetNodeResponse = proto3.makeMessageType(
  "datanode.api.v2.GetNodeResponse",
  () => [
    { no: 1, name: "node", kind: "message", T: Node },
  ],
);

/**
 * Request to list nodes
 *
 * @generated from message datanode.api.v2.ListNodesRequest
 */
export const ListNodesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListNodesRequest",
  () => [
    { no: 1, name: "epoch_seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response from listing nodes
 *
 * @generated from message datanode.api.v2.ListNodesResponse
 */
export const ListNodesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListNodesResponse",
  () => [
    { no: 1, name: "nodes", kind: "message", T: NodesConnection },
  ],
);

/**
 * Node data with corresponding cursor
 *
 * @generated from message datanode.api.v2.NodeEdge
 */
export const NodeEdge = proto3.makeMessageType(
  "datanode.api.v2.NodeEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Node },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Paged list of nodes data with corresponding page information
 *
 * @generated from message datanode.api.v2.NodesConnection
 */
export const NodesConnection = proto3.makeMessageType(
  "datanode.api.v2.NodesConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: NodeEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request to specify the identifier of the resource to retrieve aggregated signatures for
 *
 * @generated from message datanode.api.v2.ListNodeSignaturesRequest
 */
export const ListNodeSignaturesRequest = proto3.makeMessageType(
  "datanode.api.v2.ListNodeSignaturesRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response to specify the identifier of the resource to retrieve aggregated signatures for
 *
 * @generated from message datanode.api.v2.ListNodeSignaturesResponse
 */
export const ListNodeSignaturesResponse = proto3.makeMessageType(
  "datanode.api.v2.ListNodeSignaturesResponse",
  () => [
    { no: 1, name: "signatures", kind: "message", T: NodeSignaturesConnection },
  ],
);

/**
 * Nodes signature edge with corresponding cursor
 *
 * @generated from message datanode.api.v2.NodeSignatureEdge
 */
export const NodeSignatureEdge = proto3.makeMessageType(
  "datanode.api.v2.NodeSignatureEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: NodeSignature },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List of nodes signatures with corresponding page info
 *
 * @generated from message datanode.api.v2.NodeSignaturesConnection
 */
export const NodeSignaturesConnection = proto3.makeMessageType(
  "datanode.api.v2.NodeSignaturesConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: NodeSignatureEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request to fetch epoch data
 *
 * @generated from message datanode.api.v2.GetEpochRequest
 */
export const GetEpochRequest = proto3.makeMessageType(
  "datanode.api.v2.GetEpochRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ],
);

/**
 * Response from getting epoch
 *
 * @generated from message datanode.api.v2.GetEpochResponse
 */
export const GetEpochResponse = proto3.makeMessageType(
  "datanode.api.v2.GetEpochResponse",
  () => [
    { no: 1, name: "epoch", kind: "message", T: Epoch },
  ],
);

/**
 * Request to fetch the estimated fee if an order were to trade immediately
 *
 * @generated from message datanode.api.v2.EstimateFeeRequest
 */
export const EstimateFeeRequest = proto3.makeMessageType(
  "datanode.api.v2.EstimateFeeRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Response that is received from EstimateFeeRequest, contains the estimated fees for a given order
 *
 * @generated from message datanode.api.v2.EstimateFeeResponse
 */
export const EstimateFeeResponse = proto3.makeMessageType(
  "datanode.api.v2.EstimateFeeResponse",
  () => [
    { no: 2, name: "fee", kind: "message", T: Fee },
  ],
);

/**
 * Request to fetch the estimated MarginLevels if an order were to trade immediately
 *
 * @generated from message datanode.api.v2.EstimateMarginRequest
 */
export const EstimateMarginRequest = proto3.makeMessageType(
  "datanode.api.v2.EstimateMarginRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "side", kind: "enum", T: proto3.getEnumType(Side) },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(Order_Type) },
    { no: 5, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response to an estimate margin request, containing the estimated margin levels for a given order
 *
 * @generated from message datanode.api.v2.EstimateMarginResponse
 */
export const EstimateMarginResponse = proto3.makeMessageType(
  "datanode.api.v2.EstimateMarginResponse",
  () => [
    { no: 2, name: "margin_levels", kind: "message", T: MarginLevels },
  ],
);

/**
 * A message requesting for the list of all network parameters
 *
 * @generated from message datanode.api.v2.ListNetworkParametersRequest
 */
export const ListNetworkParametersRequest = proto3.makeMessageType(
  "datanode.api.v2.ListNetworkParametersRequest",
  () => [
    { no: 1, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * A response containing all of the vega network parameters
 *
 * @generated from message datanode.api.v2.ListNetworkParametersResponse
 */
export const ListNetworkParametersResponse = proto3.makeMessageType(
  "datanode.api.v2.ListNetworkParametersResponse",
  () => [
    { no: 1, name: "network_parameters", kind: "message", T: NetworkParameterConnection },
  ],
);

/**
 * A message requesting a single network parameter
 *
 * @generated from message datanode.api.v2.GetNetworkParameterRequest
 */
export const GetNetworkParameterRequest = proto3.makeMessageType(
  "datanode.api.v2.GetNetworkParameterRequest",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response that is received when getting a network parameter
 *
 * @generated from message datanode.api.v2.GetNetworkParameterResponse
 */
export const GetNetworkParameterResponse = proto3.makeMessageType(
  "datanode.api.v2.GetNetworkParameterResponse",
  () => [
    { no: 1, name: "network_parameter", kind: "message", T: NetworkParameter },
  ],
);

/**
 * Network parameter with corresponding cursor
 *
 * @generated from message datanode.api.v2.NetworkParameterEdge
 */
export const NetworkParameterEdge = proto3.makeMessageType(
  "datanode.api.v2.NetworkParameterEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: NetworkParameter },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List of network parameters with corresponding page information
 *
 * @generated from message datanode.api.v2.NetworkParameterConnection
 */
export const NetworkParameterConnection = proto3.makeMessageType(
  "datanode.api.v2.NetworkParameterConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: NetworkParameterEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * The actual data regarding a checkpoint
 *
 * @generated from message datanode.api.v2.Checkpoint
 */
export const Checkpoint = proto3.makeMessageType(
  "datanode.api.v2.Checkpoint",
  () => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "at_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Request to get all checkpoints. Currently no fields, probably will be expanded to allow filtering data
 *
 * @generated from message datanode.api.v2.ListCheckpointsRequest
 */
export const ListCheckpointsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListCheckpointsRequest",
  () => [
    { no: 1, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response message containing all checkpoints requested
 *
 * @generated from message datanode.api.v2.ListCheckpointsResponse
 */
export const ListCheckpointsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListCheckpointsResponse",
  () => [
    { no: 1, name: "checkpoints", kind: "message", T: CheckpointsConnection },
  ],
);

/**
 * Checkpoint data with corresponding cursor
 *
 * @generated from message datanode.api.v2.CheckpointEdge
 */
export const CheckpointEdge = proto3.makeMessageType(
  "datanode.api.v2.CheckpointEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: Checkpoint },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List of checkpoints data with corresponding page information
 *
 * @generated from message datanode.api.v2.CheckpointsConnection
 */
export const CheckpointsConnection = proto3.makeMessageType(
  "datanode.api.v2.CheckpointsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: CheckpointEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request to get stake
 *
 * @generated from message datanode.api.v2.GetStakeRequest
 */
export const GetStakeRequest = proto3.makeMessageType(
  "datanode.api.v2.GetStakeRequest",
  () => [
    { no: 1, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response that is received from requesting stake information
 *
 * @generated from message datanode.api.v2.GetStakeResponse
 */
export const GetStakeResponse = proto3.makeMessageType(
  "datanode.api.v2.GetStakeResponse",
  () => [
    { no: 1, name: "current_stake_available", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stake_linkings", kind: "message", T: StakesConnection },
  ],
);

/**
 * Stake linking data with corresponding cursor
 *
 * @generated from message datanode.api.v2.StakeLinkingEdge
 */
export const StakeLinkingEdge = proto3.makeMessageType(
  "datanode.api.v2.StakeLinkingEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: StakeLinking },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Paged list of stake data with corresponding page info
 *
 * @generated from message datanode.api.v2.StakesConnection
 */
export const StakesConnection = proto3.makeMessageType(
  "datanode.api.v2.StakesConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: StakeLinkingEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request to get risk factor
 *
 * @generated from message datanode.api.v2.GetRiskFactorsRequest
 */
export const GetRiskFactorsRequest = proto3.makeMessageType(
  "datanode.api.v2.GetRiskFactorsRequest",
  () => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response that is received from getting a risk factor
 *
 * @generated from message datanode.api.v2.GetRiskFactorsResponse
 */
export const GetRiskFactorsResponse = proto3.makeMessageType(
  "datanode.api.v2.GetRiskFactorsResponse",
  () => [
    { no: 1, name: "risk_factor", kind: "message", T: RiskFactor },
  ],
);

/**
 * Request to subscribe to a stream of one or more event types from the Vega event bus
 *
 * @generated from message datanode.api.v2.ObserveEventBusRequest
 */
export const ObserveEventBusRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveEventBusRequest",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(BusEventType), repeated: true },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "batch_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Response to a subscribed stream of events from the Vega event bus
 *
 * @generated from message datanode.api.v2.ObserveEventBusResponse
 */
export const ObserveEventBusResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveEventBusResponse",
  () => [
    { no: 1, name: "events", kind: "message", T: BusEvent, repeated: true },
  ],
);

/**
 * Request to subscribe to ledger movements
 *
 * @generated from message datanode.api.v2.ObserveLedgerMovementsRequest
 */
export const ObserveLedgerMovementsRequest = proto3.makeMessageType(
  "datanode.api.v2.ObserveLedgerMovementsRequest",
  [],
);

/**
 * Response from ledger movements subscription
 *
 * @generated from message datanode.api.v2.ObserveLedgerMovementsResponse
 */
export const ObserveLedgerMovementsResponse = proto3.makeMessageType(
  "datanode.api.v2.ObserveLedgerMovementsResponse",
  () => [
    { no: 1, name: "ledger_movement", kind: "message", T: LedgerMovement },
  ],
);

/**
 * Request to list all key rotations
 *
 * @generated from message datanode.api.v2.ListKeyRotationsRequest
 */
export const ListKeyRotationsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListKeyRotationsRequest",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response that is received from requesting key rotations
 *
 * @generated from message datanode.api.v2.ListKeyRotationsResponse
 */
export const ListKeyRotationsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListKeyRotationsResponse",
  () => [
    { no: 1, name: "rotations", kind: "message", T: KeyRotationConnection },
  ],
);

/**
 * Key rotation data with corresponding cursor
 *
 * @generated from message datanode.api.v2.KeyRotationEdge
 */
export const KeyRotationEdge = proto3.makeMessageType(
  "datanode.api.v2.KeyRotationEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: KeyRotation },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Key rotations data with corresponding page information
 *
 * @generated from message datanode.api.v2.KeyRotationConnection
 */
export const KeyRotationConnection = proto3.makeMessageType(
  "datanode.api.v2.KeyRotationConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: KeyRotationEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Request to list ethereum key rotations for nodes, optionally filtered by node
 *
 * @generated from message datanode.api.v2.ListEthereumKeyRotationsRequest
 */
export const ListEthereumKeyRotationsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListEthereumKeyRotationsRequest",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response message containing all checkpoints requested
 *
 * @generated from message datanode.api.v2.ListEthereumKeyRotationsResponse
 */
export const ListEthereumKeyRotationsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListEthereumKeyRotationsResponse",
  () => [
    { no: 1, name: "key_rotations", kind: "message", T: EthereumKeyRotationsConnection },
  ],
);

/**
 * List of Ethereum key rotations data with corresponding page information
 *
 * @generated from message datanode.api.v2.EthereumKeyRotationsConnection
 */
export const EthereumKeyRotationsConnection = proto3.makeMessageType(
  "datanode.api.v2.EthereumKeyRotationsConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: EthereumKeyRotationEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Ethereum key rotation data with corresponding cursor
 *
 * @generated from message datanode.api.v2.EthereumKeyRotationEdge
 */
export const EthereumKeyRotationEdge = proto3.makeMessageType(
  "datanode.api.v2.EthereumKeyRotationEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: EthereumKeyRotation },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request to get the current time of the Vega network
 *
 * @generated from message datanode.api.v2.GetVegaTimeRequest
 */
export const GetVegaTimeRequest = proto3.makeMessageType(
  "datanode.api.v2.GetVegaTimeRequest",
  [],
);

/**
 * Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
 *
 * @generated from message datanode.api.v2.GetVegaTimeResponse
 */
export const GetVegaTimeResponse = proto3.makeMessageType(
  "datanode.api.v2.GetVegaTimeResponse",
  () => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * A date range for queries that can return historical data
 * If only the start_timestamp is provided, results from the given start up to the most current timestamp should be returned.
 * If only the end_timestamp is provided, results up to the given end should be returned (exclusive).
 * If both the start_timestamp and end_timestamp are provided, results from within the date range should be returned (exclusive).
 *
 * @generated from message datanode.api.v2.DateRange
 */
export const DateRange = proto3.makeMessageType(
  "datanode.api.v2.DateRange",
  () => [
    { no: 1, name: "start_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: "end_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ],
);

/**
 * Request to get protocol upgrade status
 *
 * @generated from message datanode.api.v2.GetProtocolUpgradeStatusRequest
 */
export const GetProtocolUpgradeStatusRequest = proto3.makeMessageType(
  "datanode.api.v2.GetProtocolUpgradeStatusRequest",
  [],
);

/**
 * Response from getting protocol upgrade status
 *
 * @generated from message datanode.api.v2.GetProtocolUpgradeStatusResponse
 */
export const GetProtocolUpgradeStatusResponse = proto3.makeMessageType(
  "datanode.api.v2.GetProtocolUpgradeStatusResponse",
  () => [
    { no: 1, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Request type for ListProtocolUpgradeProposals; fetches a paginated list of protocol upgrade proposals
 *
 * @generated from message datanode.api.v2.ListProtocolUpgradeProposalsRequest
 */
export const ListProtocolUpgradeProposalsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListProtocolUpgradeProposalsRequest",
  () => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ProtocolUpgradeProposalStatus), opt: true },
    { no: 2, name: "approved_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response type from a ListProtocolUpgradeProposals RPC call; a paginated list of protocol upgrade proposals
 *
 * @generated from message datanode.api.v2.ListProtocolUpgradeProposalsResponse
 */
export const ListProtocolUpgradeProposalsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListProtocolUpgradeProposalsResponse",
  () => [
    { no: 1, name: "protocol_upgrade_proposals", kind: "message", T: ProtocolUpgradeProposalConnection },
  ],
);

/**
 * A page of protocol upgrade proposals, with page information
 *
 * @generated from message datanode.api.v2.ProtocolUpgradeProposalConnection
 */
export const ProtocolUpgradeProposalConnection = proto3.makeMessageType(
  "datanode.api.v2.ProtocolUpgradeProposalConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: ProtocolUpgradeProposalEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * A protocol upgrade proposal data with a corresponding cursor
 *
 * @generated from message datanode.api.v2.ProtocolUpgradeProposalEdge
 */
export const ProtocolUpgradeProposalEdge = proto3.makeMessageType(
  "datanode.api.v2.ProtocolUpgradeProposalEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: ProtocolUpgradeEvent },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request type for ListCoreSnapshots; fetches a paginated list of the core snapshots.
 *
 * @generated from message datanode.api.v2.ListCoreSnapshotsRequest
 */
export const ListCoreSnapshotsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListCoreSnapshotsRequest",
  () => [
    { no: 1, name: "pagination", kind: "message", T: Pagination, opt: true },
  ],
);

/**
 * Response from a ListCoreSnapshots RPC call; a paginated list of the core snapshots.
 *
 * @generated from message datanode.api.v2.ListCoreSnapshotsResponse
 */
export const ListCoreSnapshotsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListCoreSnapshotsResponse",
  () => [
    { no: 1, name: "core_snapshots", kind: "message", T: CoreSnapshotConnection },
  ],
);

/**
 * A page of core snapshot data, with page information
 *
 * @generated from message datanode.api.v2.CoreSnapshotConnection
 */
export const CoreSnapshotConnection = proto3.makeMessageType(
  "datanode.api.v2.CoreSnapshotConnection",
  () => [
    { no: 1, name: "edges", kind: "message", T: CoreSnapshotEdge, repeated: true },
    { no: 2, name: "page_info", kind: "message", T: PageInfo },
  ],
);

/**
 * Core snapshot data with a corresponding cursor
 *
 * @generated from message datanode.api.v2.CoreSnapshotEdge
 */
export const CoreSnapshotEdge = proto3.makeMessageType(
  "datanode.api.v2.CoreSnapshotEdge",
  () => [
    { no: 1, name: "node", kind: "message", T: CoreSnapshotData },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Describes a network history segment
 *
 * @generated from message datanode.api.v2.HistorySegment
 */
export const HistorySegment = proto3.makeMessageType(
  "datanode.api.v2.HistorySegment",
  () => [
    { no: 1, name: "from_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "to_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "history_segment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "previous_history_segment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request to get the most recent history segment
 *
 * @generated from message datanode.api.v2.GetMostRecentNetworkHistorySegmentRequest
 */
export const GetMostRecentNetworkHistorySegmentRequest = proto3.makeMessageType(
  "datanode.api.v2.GetMostRecentNetworkHistorySegmentRequest",
  [],
);

/**
 * Response from getting most recent history segment
 *
 * @generated from message datanode.api.v2.GetMostRecentNetworkHistorySegmentResponse
 */
export const GetMostRecentNetworkHistorySegmentResponse = proto3.makeMessageType(
  "datanode.api.v2.GetMostRecentNetworkHistorySegmentResponse",
  () => [
    { no: 1, name: "segment", kind: "message", T: HistorySegment },
    { no: 2, name: "swarm_key_seed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request to list all the nodes history segments
 *
 * @generated from message datanode.api.v2.ListAllNetworkHistorySegmentsRequest
 */
export const ListAllNetworkHistorySegmentsRequest = proto3.makeMessageType(
  "datanode.api.v2.ListAllNetworkHistorySegmentsRequest",
  [],
);

/**
 * Response with a list of all the nodes history segments
 *
 * @generated from message datanode.api.v2.ListAllNetworkHistorySegmentsResponse
 */
export const ListAllNetworkHistorySegmentsResponse = proto3.makeMessageType(
  "datanode.api.v2.ListAllNetworkHistorySegmentsResponse",
  () => [
    { no: 1, name: "segments", kind: "message", T: HistorySegment, repeated: true },
  ],
);

/**
 * Request to get the addresses of active network history peers
 *
 * @generated from message datanode.api.v2.GetActiveNetworkHistoryPeerAddressesRequest
 */
export const GetActiveNetworkHistoryPeerAddressesRequest = proto3.makeMessageType(
  "datanode.api.v2.GetActiveNetworkHistoryPeerAddressesRequest",
  [],
);

/**
 * Response containing the addresses of active network history peers
 *
 * @generated from message datanode.api.v2.GetActiveNetworkHistoryPeerAddressesResponse
 */
export const GetActiveNetworkHistoryPeerAddressesResponse = proto3.makeMessageType(
  "datanode.api.v2.GetActiveNetworkHistoryPeerAddressesResponse",
  () => [
    { no: 1, name: "ip_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Request to get the status of network history
 *
 * @generated from message datanode.api.v2.NetworkHistoryStatusRequest
 */
export const NetworkHistoryStatusRequest = proto3.makeMessageType(
  "datanode.api.v2.NetworkHistoryStatusRequest",
  [],
);

/**
 * Response containing the status of network history
 *
 * @generated from message datanode.api.v2.NetworkHistoryStatusResponse
 */
export const NetworkHistoryStatusResponse = proto3.makeMessageType(
  "datanode.api.v2.NetworkHistoryStatusResponse",
  () => [
    { no: 1, name: "ipfs_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "swarm_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "swarm_key_seed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connected_peers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Request to get the nodes network history bootstrap peers
 *
 * @generated from message datanode.api.v2.NetworkHistoryBootstrapPeersRequest
 */
export const NetworkHistoryBootstrapPeersRequest = proto3.makeMessageType(
  "datanode.api.v2.NetworkHistoryBootstrapPeersRequest",
  [],
);

/**
 * Response containing the nodes network history bootstrap peers
 *
 * @generated from message datanode.api.v2.NetworkHistoryBootstrapPeersResponse
 */
export const NetworkHistoryBootstrapPeersResponse = proto3.makeMessageType(
  "datanode.api.v2.NetworkHistoryBootstrapPeersResponse",
  () => [
    { no: 1, name: "bootstrap_peers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Request to ping the data node
 *
 * @generated from message datanode.api.v2.PingRequest
 */
export const PingRequest = proto3.makeMessageType(
  "datanode.api.v2.PingRequest",
  [],
);

/**
 * Ping response from the data node
 *
 * @generated from message datanode.api.v2.PingResponse
 */
export const PingResponse = proto3.makeMessageType(
  "datanode.api.v2.PingResponse",
  [],
);

