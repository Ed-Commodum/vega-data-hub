apiVersion: v1
kind: Service
metadata:
  labels:
    app: timescaledb-service-mainnet
  name: timescaledb-service-mainnet
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: timescaledb-mainnet
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: timescaledb-mainnet
  name: timescaledb-mainnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: timescaledb-mainnet
  template:
    metadata:
      labels:
        app: timescaledb-mainnet
    spec:
      volumes:
      - name: timescaledb-pv-storage-mainnet
        persistentVolumeClaim:
          claimName: timescaledb-pv-claim-mainnet
      containers:
      - name: timescaledb-mainnet
        # image: timescale/timescaledb:latest-pg14
        image: timescale/timescaledb-ha:pg14-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
        resources:
          limits:
            cpu: 2200m
            memory: 6Gi
          requests:
            cpu: 2200m
            memory: 6Gi
        volumeMounts:
          - mountPath: /home/pgdata/
            name: timescaledb-pv-storage-mainnet
        securityContext:
          runAsUser: 1000
        env:
        - name: POSTGRES_PASSWORD
          value: ilovetimescaledb
        - name: PGDATA
          value: /home/pgdata
        args:
          - '-cmax_connections=75'
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: timescaledb-pv-volume-mainnet
  annotations:
    pv.beta.kubernetes.io/gid: "1000"
spec:
  storageClassName: ""
  capacity:
    storage: 150Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/timescaledb-data-mainnet"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: timescaledb-pv-claim-mainnet
spec:
  storageClassName: ""
  volumeName: timescaledb-pv-volume-mainnet
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 149Gi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service-mainnet
  labels:
    app: zookeeper-mainnet
spec:
  ports:
  - port: 2181
  selector:
    app: zookeeper-mainnet
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment-mainnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper-mainnet
  template:
    metadata:
      labels:
        app: zookeeper-mainnet
    spec:
      containers:
      - name: zookeeper-mainnet
        image: ubuntu/zookeeper:edge
        ports:
        - containerPort: 2181
          name: zookeeper-m
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service-mainnet
  labels:
    app: kafka-pod-mainnet
spec:
  ports:
    - port: 9092
      targetPort: 9093
  selector:
    app: kafka-pod-mainnet
---
apiVersion: v1
kind: Pod
metadata:
  name: kafka-pod-mainnet
  labels:
    app: kafka-pod-mainnet
spec:
  volumes:
  - name: kafka-pv-storage
    persistentVolumeClaim:
      claimName: kafka-pv-claim-mainnet
  restartPolicy: Never
  containers:
  - name: kafka-mainnet
    image: ubuntu/kafka:latest
    resources:
      limits:
        cpu: 600m
        memory: 1600Mi
      requests:
        cpu: 600m
        memory: 1600Mi
    env:
    - name: ZOOKEEPER_HOST
      value: zookeeper-service-mainnet
    args: [ "/etc/kafka/server.properties", "--override", "advertised.listeners=INTERNAL://127.0.0.1:9092,EXTERNAL://kafka-service-mainnet:9092", "--override", "listeners=INTERNAL://127.0.0.1:9092,EXTERNAL://0.0.0.0:9093", "--override", "listener.security.protocol.map=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT", "--override", "inter.broker.listener.name=INTERNAL", "--override", "message.max.bytes=2097152" ]
    ports:
    - containerPort: 9092
      name: kafka-mainnet
      protocol: TCP
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv-volume-mainnet
spec:
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/kafka-data-mainnet"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-pv-claim-mainnet
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: api-service-mainnet
  name: api-service-mainnet
spec:
  ports:
    - name: api
      port: 8080
      targetPort: 8080
    - name: block-notifications
      port: 1337
      targetPort: 1337
  selector:
    app: api-mainnet
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api-mainnet
  name: api-mainnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-mainnet
  template:
    metadata:
      labels:
        app: api-mainnet
    spec:
      containers:
      - name: api-mainnet
        image: data-hub/api-mainnet
        imagePullPolicy: Never 
        ports:
        - containerPort: 8080
        env:
        - name: TIMESCALEDB_HOST
          value: timescaledb-service-mainnet
        - name: TIMESCALEDB_PORT
          value: "5432"
        - name: KAFKA_BROKERS
          value: "$(KAFKA_SERVICE_MAINNET_SERVICE_HOST):9092"
---
apiVersion: v1
kind: Service
metadata:
  name: vega-node-service-mainnet
  labels:
    app: vega-node-service-mainnet
spec:
  ports:
    - port: 3003
      targetPort: 3003
  selector:
    app: vega-node-pod-mainnet
---
apiVersion: v1
kind: Pod
metadata:
  name: vega-node-pod-mainnet
  labels:
    app: vega-node-pod-mainnet
spec:
  volumes:
  - name: vega-node-pv-storage-mainnet
    persistentVolumeClaim:
      claimName: vega-node-pv-claim-mainnet
  restartPolicy: Never
  initContainers:
  - name: init-vega-node-mainnet
    image: data-hub/vega-node-mainnet
    imagePullPolicy: Never
    command: [ "/bin/bash", "-c", "id && ls -al /home/ian && ls -al /mnt/vega-data-mainnet && cp -r /home/ian/. /mnt/vega-data-mainnet/" ]
    volumeMounts:
    - name: vega-node-pv-storage-mainnet
      mountPath: /mnt/vega-data-mainnet
  containers:
  - name: vega-node-mainnet
    image: data-hub/vega-node-mainnet
    imagePullPolicy: Never
    resources:
      limits:
        cpu: 2000m
      requests:
        cpu: 2000m
    volumeMounts:
      - mountPath: /home/ian
        name: vega-node-pv-storage-mainnet
    securityContext:
      runAsUser: 1000
    command: [ "/bin/bash" ]
    args: [ "-c", 'id && pwd && ls -al . && ls -al .. && sed -i ''/Broker\.Socket/,+7{/Broker\.Socket/,+6{b};s/.*/    Address = ''"\"$BROKER_SERVICE_MAINNET_SERVICE_HOST\""''/}'' .config/vega/node/config.toml; /bin/visor run --home=/home/ian/.visor' ] # /bin/vega start --snapshot.load-from-block-height=1275900' ]
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: vega-node-pv-volume-mainnet
  annotations:
    pv.beta.kubernetes.io/gid: "1000"
spec:
  storageClassName: ""
  capacity:
    storage: 80Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/vega-node-data-mainnet"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vega-node-pv-claim-mainnet
spec:
  storageClassName: ""
  volumeName: vega-node-pv-volume-mainnet
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 75Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: broker-service-mainnet
  name: broker-service-mainnet
spec:
  ports:
    - port: 3005
      targetPort: 3005
  selector:
    app: broker-go-pod-mainnet
---
apiVersion: v1
kind: Pod
metadata:
  name: broker-go-pod-mainnet
  labels:
    app: broker-go-pod-mainnet
spec:
  restartPolicy: Never
  containers:
  - name: broker-go-mainnet
    image: data-hub/broker-go-mainnet
    imagePullPolicy: Never
    resources:
      limits:
        cpu: 1750m
      requests:
        cpu: 1750m
    env:
    - name: KAFKA_BROKERS
      value: "$(KAFKA_SERVICE_MAINNET_SERVICE_HOST):9092"
    - name: VEGA_NODE_REST_API
      value: "$(VEGA_NODE_SERVICE_MAINNET_SERVICE_HOST):3003"
    - name: DB_URL
      value: "postgres://postgres:ilovetimescaledb@$(TIMESCALEDB_SERVICE_MAINNET_SERVICE_HOST):5432/postgres"
---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: socials-bots-pod-mainnet
#   labels:
#     app: socials-bots-pod-mainnet
# spec:
#   restartPolicy: Never
#   containers:
#   - name: socials-bots-mainnet
#     image: data-hub/socials-bots-mainnet
#     imagePullPolicy: Never
#     env:
#     # - name: DISCORD_TOKEN
#     #   valueFrom:
#     #     secretKeyRef:
#     #       name: discord-token
#     #       key: token
#     - name: DISCORD_TOKENS
#       valueFrom:
#         secretKeyRef:
#           name: discord-tokens
#           key: tokens
#---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: frontend-service-mainnet
  name: frontend-service-mainnet
spec:
  ports:
    - port: 8888
      targetPort: 8888
  selector:
    app: frontend-pod-mainnet
---
apiVersion: v1
kind: Pod
metadata:
  name: frontend-pod-mainnet
  labels:
    app: frontend-pod-mainnet
spec:
  restartPolicy: Never
  containers:
  - name: frontend-mainnet
    image: data-hub/frontend-mainnet
    imagePullPolicy: Never
# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: data-access
# spec:
#   containers:
#   - name: alpine
#     image: alpine:latest
#     command: ['sleep', 'infinity']
#     volumeMounts:
#     - name: vega-node-pv-storage
#       mountPath: /data
#   volumes:
#   - name: vega-node-pv-storage
#     persistentVolumeClaim:
#       claimName: vega-node-pv-claim