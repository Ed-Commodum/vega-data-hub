// source: vega/markets.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vega_data_source_pb = require('../vega/data_source_pb.js');
goog.object.extend(proto, vega_data_source_pb);
goog.exportSymbol('proto.vega.AuctionDuration', null, global);
goog.exportSymbol('proto.vega.DataSourceSpecToFutureBinding', null, global);
goog.exportSymbol('proto.vega.FeeFactors', null, global);
goog.exportSymbol('proto.vega.Fees', null, global);
goog.exportSymbol('proto.vega.Future', null, global);
goog.exportSymbol('proto.vega.Instrument', null, global);
goog.exportSymbol('proto.vega.Instrument.ProductCase', null, global);
goog.exportSymbol('proto.vega.InstrumentMetadata', null, global);
goog.exportSymbol('proto.vega.LiquidityMonitoringParameters', null, global);
goog.exportSymbol('proto.vega.LogNormalModelParams', null, global);
goog.exportSymbol('proto.vega.LogNormalRiskModel', null, global);
goog.exportSymbol('proto.vega.MarginCalculator', null, global);
goog.exportSymbol('proto.vega.Market', null, global);
goog.exportSymbol('proto.vega.Market.State', null, global);
goog.exportSymbol('proto.vega.Market.TradingMode', null, global);
goog.exportSymbol('proto.vega.MarketTimestamps', null, global);
goog.exportSymbol('proto.vega.PriceMonitoringParameters', null, global);
goog.exportSymbol('proto.vega.PriceMonitoringSettings', null, global);
goog.exportSymbol('proto.vega.PriceMonitoringTrigger', null, global);
goog.exportSymbol('proto.vega.ScalingFactors', null, global);
goog.exportSymbol('proto.vega.SimpleModelParams', null, global);
goog.exportSymbol('proto.vega.SimpleRiskModel', null, global);
goog.exportSymbol('proto.vega.TargetStakeParameters', null, global);
goog.exportSymbol('proto.vega.TradableInstrument', null, global);
goog.exportSymbol('proto.vega.TradableInstrument.RiskModelCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.AuctionDuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.AuctionDuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.AuctionDuration.displayName = 'proto.vega.AuctionDuration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Future = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.Future, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Future.displayName = 'proto.vega.Future';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.DataSourceSpecToFutureBinding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.DataSourceSpecToFutureBinding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.DataSourceSpecToFutureBinding.displayName = 'proto.vega.DataSourceSpecToFutureBinding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.InstrumentMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.InstrumentMetadata.repeatedFields_, null);
};
goog.inherits(proto.vega.InstrumentMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.InstrumentMetadata.displayName = 'proto.vega.InstrumentMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Instrument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.Instrument.oneofGroups_);
};
goog.inherits(proto.vega.Instrument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Instrument.displayName = 'proto.vega.Instrument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.LogNormalRiskModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.LogNormalRiskModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.LogNormalRiskModel.displayName = 'proto.vega.LogNormalRiskModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.LogNormalModelParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.LogNormalModelParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.LogNormalModelParams.displayName = 'proto.vega.LogNormalModelParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.SimpleRiskModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.SimpleRiskModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.SimpleRiskModel.displayName = 'proto.vega.SimpleRiskModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.SimpleModelParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.SimpleModelParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.SimpleModelParams.displayName = 'proto.vega.SimpleModelParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ScalingFactors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ScalingFactors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ScalingFactors.displayName = 'proto.vega.ScalingFactors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.MarginCalculator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.MarginCalculator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.MarginCalculator.displayName = 'proto.vega.MarginCalculator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.TradableInstrument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.TradableInstrument.oneofGroups_);
};
goog.inherits(proto.vega.TradableInstrument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.TradableInstrument.displayName = 'proto.vega.TradableInstrument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.FeeFactors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.FeeFactors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.FeeFactors.displayName = 'proto.vega.FeeFactors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Fees = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.Fees, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Fees.displayName = 'proto.vega.Fees';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.PriceMonitoringTrigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.PriceMonitoringTrigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.PriceMonitoringTrigger.displayName = 'proto.vega.PriceMonitoringTrigger';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.PriceMonitoringParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.PriceMonitoringParameters.repeatedFields_, null);
};
goog.inherits(proto.vega.PriceMonitoringParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.PriceMonitoringParameters.displayName = 'proto.vega.PriceMonitoringParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.PriceMonitoringSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.PriceMonitoringSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.PriceMonitoringSettings.displayName = 'proto.vega.PriceMonitoringSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.LiquidityMonitoringParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.LiquidityMonitoringParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.LiquidityMonitoringParameters.displayName = 'proto.vega.LiquidityMonitoringParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.TargetStakeParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.TargetStakeParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.TargetStakeParameters.displayName = 'proto.vega.TargetStakeParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Market = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.Market, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Market.displayName = 'proto.vega.Market';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.MarketTimestamps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.MarketTimestamps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.MarketTimestamps.displayName = 'proto.vega.MarketTimestamps';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.AuctionDuration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.AuctionDuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.AuctionDuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.AuctionDuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.AuctionDuration}
 */
proto.vega.AuctionDuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.AuctionDuration;
  return proto.vega.AuctionDuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.AuctionDuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.AuctionDuration}
 */
proto.vega.AuctionDuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.AuctionDuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.AuctionDuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.AuctionDuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.AuctionDuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional int64 duration = 1;
 * @return {number}
 */
proto.vega.AuctionDuration.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.AuctionDuration} returns this
 */
proto.vega.AuctionDuration.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 volume = 2;
 * @return {number}
 */
proto.vega.AuctionDuration.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.AuctionDuration} returns this
 */
proto.vega.AuctionDuration.prototype.setVolume = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Future.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Future.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Future} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Future.toObject = function(includeInstance, msg) {
  var f, obj = {
    settlementAsset: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quoteName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataSourceSpecForSettlementData: (f = msg.getDataSourceSpecForSettlementData()) && vega_data_source_pb.DataSourceSpec.toObject(includeInstance, f),
    dataSourceSpecForTradingTermination: (f = msg.getDataSourceSpecForTradingTermination()) && vega_data_source_pb.DataSourceSpec.toObject(includeInstance, f),
    dataSourceSpecBinding: (f = msg.getDataSourceSpecBinding()) && proto.vega.DataSourceSpecToFutureBinding.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Future}
 */
proto.vega.Future.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Future;
  return proto.vega.Future.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Future} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Future}
 */
proto.vega.Future.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlementAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteName(value);
      break;
    case 3:
      var value = new vega_data_source_pb.DataSourceSpec;
      reader.readMessage(value,vega_data_source_pb.DataSourceSpec.deserializeBinaryFromReader);
      msg.setDataSourceSpecForSettlementData(value);
      break;
    case 4:
      var value = new vega_data_source_pb.DataSourceSpec;
      reader.readMessage(value,vega_data_source_pb.DataSourceSpec.deserializeBinaryFromReader);
      msg.setDataSourceSpecForTradingTermination(value);
      break;
    case 5:
      var value = new proto.vega.DataSourceSpecToFutureBinding;
      reader.readMessage(value,proto.vega.DataSourceSpecToFutureBinding.deserializeBinaryFromReader);
      msg.setDataSourceSpecBinding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Future.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Future.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Future} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Future.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettlementAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuoteName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataSourceSpecForSettlementData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vega_data_source_pb.DataSourceSpec.serializeBinaryToWriter
    );
  }
  f = message.getDataSourceSpecForTradingTermination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vega_data_source_pb.DataSourceSpec.serializeBinaryToWriter
    );
  }
  f = message.getDataSourceSpecBinding();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.vega.DataSourceSpecToFutureBinding.serializeBinaryToWriter
    );
  }
};


/**
 * optional string settlement_asset = 1;
 * @return {string}
 */
proto.vega.Future.prototype.getSettlementAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Future} returns this
 */
proto.vega.Future.prototype.setSettlementAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quote_name = 2;
 * @return {string}
 */
proto.vega.Future.prototype.getQuoteName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Future} returns this
 */
proto.vega.Future.prototype.setQuoteName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DataSourceSpec data_source_spec_for_settlement_data = 3;
 * @return {?proto.vega.DataSourceSpec}
 */
proto.vega.Future.prototype.getDataSourceSpecForSettlementData = function() {
  return /** @type{?proto.vega.DataSourceSpec} */ (
    jspb.Message.getWrapperField(this, vega_data_source_pb.DataSourceSpec, 3));
};


/**
 * @param {?proto.vega.DataSourceSpec|undefined} value
 * @return {!proto.vega.Future} returns this
*/
proto.vega.Future.prototype.setDataSourceSpecForSettlementData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Future} returns this
 */
proto.vega.Future.prototype.clearDataSourceSpecForSettlementData = function() {
  return this.setDataSourceSpecForSettlementData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Future.prototype.hasDataSourceSpecForSettlementData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataSourceSpec data_source_spec_for_trading_termination = 4;
 * @return {?proto.vega.DataSourceSpec}
 */
proto.vega.Future.prototype.getDataSourceSpecForTradingTermination = function() {
  return /** @type{?proto.vega.DataSourceSpec} */ (
    jspb.Message.getWrapperField(this, vega_data_source_pb.DataSourceSpec, 4));
};


/**
 * @param {?proto.vega.DataSourceSpec|undefined} value
 * @return {!proto.vega.Future} returns this
*/
proto.vega.Future.prototype.setDataSourceSpecForTradingTermination = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Future} returns this
 */
proto.vega.Future.prototype.clearDataSourceSpecForTradingTermination = function() {
  return this.setDataSourceSpecForTradingTermination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Future.prototype.hasDataSourceSpecForTradingTermination = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DataSourceSpecToFutureBinding data_source_spec_binding = 5;
 * @return {?proto.vega.DataSourceSpecToFutureBinding}
 */
proto.vega.Future.prototype.getDataSourceSpecBinding = function() {
  return /** @type{?proto.vega.DataSourceSpecToFutureBinding} */ (
    jspb.Message.getWrapperField(this, proto.vega.DataSourceSpecToFutureBinding, 5));
};


/**
 * @param {?proto.vega.DataSourceSpecToFutureBinding|undefined} value
 * @return {!proto.vega.Future} returns this
*/
proto.vega.Future.prototype.setDataSourceSpecBinding = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Future} returns this
 */
proto.vega.Future.prototype.clearDataSourceSpecBinding = function() {
  return this.setDataSourceSpecBinding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Future.prototype.hasDataSourceSpecBinding = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.DataSourceSpecToFutureBinding.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.DataSourceSpecToFutureBinding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.DataSourceSpecToFutureBinding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceSpecToFutureBinding.toObject = function(includeInstance, msg) {
  var f, obj = {
    settlementDataProperty: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tradingTerminationProperty: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.DataSourceSpecToFutureBinding}
 */
proto.vega.DataSourceSpecToFutureBinding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.DataSourceSpecToFutureBinding;
  return proto.vega.DataSourceSpecToFutureBinding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.DataSourceSpecToFutureBinding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.DataSourceSpecToFutureBinding}
 */
proto.vega.DataSourceSpecToFutureBinding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlementDataProperty(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradingTerminationProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.DataSourceSpecToFutureBinding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.DataSourceSpecToFutureBinding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.DataSourceSpecToFutureBinding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DataSourceSpecToFutureBinding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettlementDataProperty();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTradingTerminationProperty();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string settlement_data_property = 1;
 * @return {string}
 */
proto.vega.DataSourceSpecToFutureBinding.prototype.getSettlementDataProperty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.DataSourceSpecToFutureBinding} returns this
 */
proto.vega.DataSourceSpecToFutureBinding.prototype.setSettlementDataProperty = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trading_termination_property = 2;
 * @return {string}
 */
proto.vega.DataSourceSpecToFutureBinding.prototype.getTradingTerminationProperty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.DataSourceSpecToFutureBinding} returns this
 */
proto.vega.DataSourceSpecToFutureBinding.prototype.setTradingTerminationProperty = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.InstrumentMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.InstrumentMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.InstrumentMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.InstrumentMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.InstrumentMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.InstrumentMetadata}
 */
proto.vega.InstrumentMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.InstrumentMetadata;
  return proto.vega.InstrumentMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.InstrumentMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.InstrumentMetadata}
 */
proto.vega.InstrumentMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.InstrumentMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.InstrumentMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.InstrumentMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.InstrumentMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string tags = 1;
 * @return {!Array<string>}
 */
proto.vega.InstrumentMetadata.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vega.InstrumentMetadata} returns this
 */
proto.vega.InstrumentMetadata.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vega.InstrumentMetadata} returns this
 */
proto.vega.InstrumentMetadata.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.InstrumentMetadata} returns this
 */
proto.vega.InstrumentMetadata.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.Instrument.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.vega.Instrument.ProductCase = {
  PRODUCT_NOT_SET: 0,
  FUTURE: 100
};

/**
 * @return {proto.vega.Instrument.ProductCase}
 */
proto.vega.Instrument.prototype.getProductCase = function() {
  return /** @type {proto.vega.Instrument.ProductCase} */(jspb.Message.computeOneofCase(this, proto.vega.Instrument.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Instrument.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Instrument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Instrument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Instrument.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metadata: (f = msg.getMetadata()) && proto.vega.InstrumentMetadata.toObject(includeInstance, f),
    future: (f = msg.getFuture()) && proto.vega.Future.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Instrument}
 */
proto.vega.Instrument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Instrument;
  return proto.vega.Instrument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Instrument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Instrument}
 */
proto.vega.Instrument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.vega.InstrumentMetadata;
      reader.readMessage(value,proto.vega.InstrumentMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 100:
      var value = new proto.vega.Future;
      reader.readMessage(value,proto.vega.Future.deserializeBinaryFromReader);
      msg.setFuture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Instrument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Instrument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Instrument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Instrument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vega.InstrumentMetadata.serializeBinaryToWriter
    );
  }
  f = message.getFuture();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.Future.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.Instrument.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Instrument} returns this
 */
proto.vega.Instrument.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.vega.Instrument.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Instrument} returns this
 */
proto.vega.Instrument.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.vega.Instrument.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Instrument} returns this
 */
proto.vega.Instrument.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional InstrumentMetadata metadata = 4;
 * @return {?proto.vega.InstrumentMetadata}
 */
proto.vega.Instrument.prototype.getMetadata = function() {
  return /** @type{?proto.vega.InstrumentMetadata} */ (
    jspb.Message.getWrapperField(this, proto.vega.InstrumentMetadata, 4));
};


/**
 * @param {?proto.vega.InstrumentMetadata|undefined} value
 * @return {!proto.vega.Instrument} returns this
*/
proto.vega.Instrument.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Instrument} returns this
 */
proto.vega.Instrument.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Instrument.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Future future = 100;
 * @return {?proto.vega.Future}
 */
proto.vega.Instrument.prototype.getFuture = function() {
  return /** @type{?proto.vega.Future} */ (
    jspb.Message.getWrapperField(this, proto.vega.Future, 100));
};


/**
 * @param {?proto.vega.Future|undefined} value
 * @return {!proto.vega.Instrument} returns this
*/
proto.vega.Instrument.prototype.setFuture = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.vega.Instrument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Instrument} returns this
 */
proto.vega.Instrument.prototype.clearFuture = function() {
  return this.setFuture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Instrument.prototype.hasFuture = function() {
  return jspb.Message.getField(this, 100) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.LogNormalRiskModel.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.LogNormalRiskModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.LogNormalRiskModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LogNormalRiskModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    riskAversionParameter: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    tau: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    params: (f = msg.getParams()) && proto.vega.LogNormalModelParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.LogNormalRiskModel}
 */
proto.vega.LogNormalRiskModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.LogNormalRiskModel;
  return proto.vega.LogNormalRiskModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.LogNormalRiskModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.LogNormalRiskModel}
 */
proto.vega.LogNormalRiskModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRiskAversionParameter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTau(value);
      break;
    case 3:
      var value = new proto.vega.LogNormalModelParams;
      reader.readMessage(value,proto.vega.LogNormalModelParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.LogNormalRiskModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.LogNormalRiskModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.LogNormalRiskModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LogNormalRiskModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRiskAversionParameter();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTau();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vega.LogNormalModelParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional double risk_aversion_parameter = 1;
 * @return {number}
 */
proto.vega.LogNormalRiskModel.prototype.getRiskAversionParameter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.LogNormalRiskModel} returns this
 */
proto.vega.LogNormalRiskModel.prototype.setRiskAversionParameter = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double tau = 2;
 * @return {number}
 */
proto.vega.LogNormalRiskModel.prototype.getTau = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.LogNormalRiskModel} returns this
 */
proto.vega.LogNormalRiskModel.prototype.setTau = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional LogNormalModelParams params = 3;
 * @return {?proto.vega.LogNormalModelParams}
 */
proto.vega.LogNormalRiskModel.prototype.getParams = function() {
  return /** @type{?proto.vega.LogNormalModelParams} */ (
    jspb.Message.getWrapperField(this, proto.vega.LogNormalModelParams, 3));
};


/**
 * @param {?proto.vega.LogNormalModelParams|undefined} value
 * @return {!proto.vega.LogNormalRiskModel} returns this
*/
proto.vega.LogNormalRiskModel.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.LogNormalRiskModel} returns this
 */
proto.vega.LogNormalRiskModel.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.LogNormalRiskModel.prototype.hasParams = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.LogNormalModelParams.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.LogNormalModelParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.LogNormalModelParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LogNormalModelParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    mu: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    r: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    sigma: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.LogNormalModelParams}
 */
proto.vega.LogNormalModelParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.LogNormalModelParams;
  return proto.vega.LogNormalModelParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.LogNormalModelParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.LogNormalModelParams}
 */
proto.vega.LogNormalModelParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMu(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setR(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSigma(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.LogNormalModelParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.LogNormalModelParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.LogNormalModelParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LogNormalModelParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMu();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getR();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSigma();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double mu = 1;
 * @return {number}
 */
proto.vega.LogNormalModelParams.prototype.getMu = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.LogNormalModelParams} returns this
 */
proto.vega.LogNormalModelParams.prototype.setMu = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double r = 2;
 * @return {number}
 */
proto.vega.LogNormalModelParams.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.LogNormalModelParams} returns this
 */
proto.vega.LogNormalModelParams.prototype.setR = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double sigma = 3;
 * @return {number}
 */
proto.vega.LogNormalModelParams.prototype.getSigma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.LogNormalModelParams} returns this
 */
proto.vega.LogNormalModelParams.prototype.setSigma = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.SimpleRiskModel.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.SimpleRiskModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.SimpleRiskModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.SimpleRiskModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && proto.vega.SimpleModelParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.SimpleRiskModel}
 */
proto.vega.SimpleRiskModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.SimpleRiskModel;
  return proto.vega.SimpleRiskModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.SimpleRiskModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.SimpleRiskModel}
 */
proto.vega.SimpleRiskModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.SimpleModelParams;
      reader.readMessage(value,proto.vega.SimpleModelParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.SimpleRiskModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.SimpleRiskModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.SimpleRiskModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.SimpleRiskModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.SimpleModelParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleModelParams params = 1;
 * @return {?proto.vega.SimpleModelParams}
 */
proto.vega.SimpleRiskModel.prototype.getParams = function() {
  return /** @type{?proto.vega.SimpleModelParams} */ (
    jspb.Message.getWrapperField(this, proto.vega.SimpleModelParams, 1));
};


/**
 * @param {?proto.vega.SimpleModelParams|undefined} value
 * @return {!proto.vega.SimpleRiskModel} returns this
*/
proto.vega.SimpleRiskModel.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.SimpleRiskModel} returns this
 */
proto.vega.SimpleRiskModel.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.SimpleRiskModel.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.SimpleModelParams.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.SimpleModelParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.SimpleModelParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.SimpleModelParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    factorLong: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    factorShort: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    maxMoveUp: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    minMoveDown: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    probabilityOfTrading: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.SimpleModelParams}
 */
proto.vega.SimpleModelParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.SimpleModelParams;
  return proto.vega.SimpleModelParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.SimpleModelParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.SimpleModelParams}
 */
proto.vega.SimpleModelParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFactorLong(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFactorShort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxMoveUp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinMoveDown(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbabilityOfTrading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.SimpleModelParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.SimpleModelParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.SimpleModelParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.SimpleModelParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFactorLong();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFactorShort();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMaxMoveUp();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMinMoveDown();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getProbabilityOfTrading();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double factor_long = 1;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getFactorLong = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.SimpleModelParams} returns this
 */
proto.vega.SimpleModelParams.prototype.setFactorLong = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double factor_short = 2;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getFactorShort = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.SimpleModelParams} returns this
 */
proto.vega.SimpleModelParams.prototype.setFactorShort = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double max_move_up = 3;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getMaxMoveUp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.SimpleModelParams} returns this
 */
proto.vega.SimpleModelParams.prototype.setMaxMoveUp = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double min_move_down = 4;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getMinMoveDown = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.SimpleModelParams} returns this
 */
proto.vega.SimpleModelParams.prototype.setMinMoveDown = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double probability_of_trading = 5;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getProbabilityOfTrading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.SimpleModelParams} returns this
 */
proto.vega.SimpleModelParams.prototype.setProbabilityOfTrading = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ScalingFactors.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ScalingFactors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ScalingFactors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ScalingFactors.toObject = function(includeInstance, msg) {
  var f, obj = {
    searchLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    initialMargin: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    collateralRelease: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ScalingFactors}
 */
proto.vega.ScalingFactors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ScalingFactors;
  return proto.vega.ScalingFactors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ScalingFactors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ScalingFactors}
 */
proto.vega.ScalingFactors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSearchLevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInitialMargin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCollateralRelease(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ScalingFactors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ScalingFactors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ScalingFactors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ScalingFactors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearchLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getInitialMargin();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getCollateralRelease();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double search_level = 1;
 * @return {number}
 */
proto.vega.ScalingFactors.prototype.getSearchLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ScalingFactors} returns this
 */
proto.vega.ScalingFactors.prototype.setSearchLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double initial_margin = 2;
 * @return {number}
 */
proto.vega.ScalingFactors.prototype.getInitialMargin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ScalingFactors} returns this
 */
proto.vega.ScalingFactors.prototype.setInitialMargin = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double collateral_release = 3;
 * @return {number}
 */
proto.vega.ScalingFactors.prototype.getCollateralRelease = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ScalingFactors} returns this
 */
proto.vega.ScalingFactors.prototype.setCollateralRelease = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.MarginCalculator.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.MarginCalculator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.MarginCalculator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.MarginCalculator.toObject = function(includeInstance, msg) {
  var f, obj = {
    scalingFactors: (f = msg.getScalingFactors()) && proto.vega.ScalingFactors.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.MarginCalculator}
 */
proto.vega.MarginCalculator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.MarginCalculator;
  return proto.vega.MarginCalculator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.MarginCalculator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.MarginCalculator}
 */
proto.vega.MarginCalculator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.ScalingFactors;
      reader.readMessage(value,proto.vega.ScalingFactors.deserializeBinaryFromReader);
      msg.setScalingFactors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.MarginCalculator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.MarginCalculator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.MarginCalculator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.MarginCalculator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScalingFactors();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.ScalingFactors.serializeBinaryToWriter
    );
  }
};


/**
 * optional ScalingFactors scaling_factors = 1;
 * @return {?proto.vega.ScalingFactors}
 */
proto.vega.MarginCalculator.prototype.getScalingFactors = function() {
  return /** @type{?proto.vega.ScalingFactors} */ (
    jspb.Message.getWrapperField(this, proto.vega.ScalingFactors, 1));
};


/**
 * @param {?proto.vega.ScalingFactors|undefined} value
 * @return {!proto.vega.MarginCalculator} returns this
*/
proto.vega.MarginCalculator.prototype.setScalingFactors = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.MarginCalculator} returns this
 */
proto.vega.MarginCalculator.prototype.clearScalingFactors = function() {
  return this.setScalingFactors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.MarginCalculator.prototype.hasScalingFactors = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.TradableInstrument.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.vega.TradableInstrument.RiskModelCase = {
  RISK_MODEL_NOT_SET: 0,
  LOG_NORMAL_RISK_MODEL: 100,
  SIMPLE_RISK_MODEL: 101
};

/**
 * @return {proto.vega.TradableInstrument.RiskModelCase}
 */
proto.vega.TradableInstrument.prototype.getRiskModelCase = function() {
  return /** @type {proto.vega.TradableInstrument.RiskModelCase} */(jspb.Message.computeOneofCase(this, proto.vega.TradableInstrument.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.TradableInstrument.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.TradableInstrument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.TradableInstrument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.TradableInstrument.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: (f = msg.getInstrument()) && proto.vega.Instrument.toObject(includeInstance, f),
    marginCalculator: (f = msg.getMarginCalculator()) && proto.vega.MarginCalculator.toObject(includeInstance, f),
    logNormalRiskModel: (f = msg.getLogNormalRiskModel()) && proto.vega.LogNormalRiskModel.toObject(includeInstance, f),
    simpleRiskModel: (f = msg.getSimpleRiskModel()) && proto.vega.SimpleRiskModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.TradableInstrument}
 */
proto.vega.TradableInstrument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.TradableInstrument;
  return proto.vega.TradableInstrument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.TradableInstrument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.TradableInstrument}
 */
proto.vega.TradableInstrument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.Instrument;
      reader.readMessage(value,proto.vega.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 2:
      var value = new proto.vega.MarginCalculator;
      reader.readMessage(value,proto.vega.MarginCalculator.deserializeBinaryFromReader);
      msg.setMarginCalculator(value);
      break;
    case 100:
      var value = new proto.vega.LogNormalRiskModel;
      reader.readMessage(value,proto.vega.LogNormalRiskModel.deserializeBinaryFromReader);
      msg.setLogNormalRiskModel(value);
      break;
    case 101:
      var value = new proto.vega.SimpleRiskModel;
      reader.readMessage(value,proto.vega.SimpleRiskModel.deserializeBinaryFromReader);
      msg.setSimpleRiskModel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.TradableInstrument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.TradableInstrument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.TradableInstrument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.TradableInstrument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getMarginCalculator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vega.MarginCalculator.serializeBinaryToWriter
    );
  }
  f = message.getLogNormalRiskModel();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.LogNormalRiskModel.serializeBinaryToWriter
    );
  }
  f = message.getSimpleRiskModel();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.vega.SimpleRiskModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instrument instrument = 1;
 * @return {?proto.vega.Instrument}
 */
proto.vega.TradableInstrument.prototype.getInstrument = function() {
  return /** @type{?proto.vega.Instrument} */ (
    jspb.Message.getWrapperField(this, proto.vega.Instrument, 1));
};


/**
 * @param {?proto.vega.Instrument|undefined} value
 * @return {!proto.vega.TradableInstrument} returns this
*/
proto.vega.TradableInstrument.prototype.setInstrument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.TradableInstrument} returns this
 */
proto.vega.TradableInstrument.prototype.clearInstrument = function() {
  return this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.TradableInstrument.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MarginCalculator margin_calculator = 2;
 * @return {?proto.vega.MarginCalculator}
 */
proto.vega.TradableInstrument.prototype.getMarginCalculator = function() {
  return /** @type{?proto.vega.MarginCalculator} */ (
    jspb.Message.getWrapperField(this, proto.vega.MarginCalculator, 2));
};


/**
 * @param {?proto.vega.MarginCalculator|undefined} value
 * @return {!proto.vega.TradableInstrument} returns this
*/
proto.vega.TradableInstrument.prototype.setMarginCalculator = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.TradableInstrument} returns this
 */
proto.vega.TradableInstrument.prototype.clearMarginCalculator = function() {
  return this.setMarginCalculator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.TradableInstrument.prototype.hasMarginCalculator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LogNormalRiskModel log_normal_risk_model = 100;
 * @return {?proto.vega.LogNormalRiskModel}
 */
proto.vega.TradableInstrument.prototype.getLogNormalRiskModel = function() {
  return /** @type{?proto.vega.LogNormalRiskModel} */ (
    jspb.Message.getWrapperField(this, proto.vega.LogNormalRiskModel, 100));
};


/**
 * @param {?proto.vega.LogNormalRiskModel|undefined} value
 * @return {!proto.vega.TradableInstrument} returns this
*/
proto.vega.TradableInstrument.prototype.setLogNormalRiskModel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.vega.TradableInstrument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.TradableInstrument} returns this
 */
proto.vega.TradableInstrument.prototype.clearLogNormalRiskModel = function() {
  return this.setLogNormalRiskModel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.TradableInstrument.prototype.hasLogNormalRiskModel = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional SimpleRiskModel simple_risk_model = 101;
 * @return {?proto.vega.SimpleRiskModel}
 */
proto.vega.TradableInstrument.prototype.getSimpleRiskModel = function() {
  return /** @type{?proto.vega.SimpleRiskModel} */ (
    jspb.Message.getWrapperField(this, proto.vega.SimpleRiskModel, 101));
};


/**
 * @param {?proto.vega.SimpleRiskModel|undefined} value
 * @return {!proto.vega.TradableInstrument} returns this
*/
proto.vega.TradableInstrument.prototype.setSimpleRiskModel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.vega.TradableInstrument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.TradableInstrument} returns this
 */
proto.vega.TradableInstrument.prototype.clearSimpleRiskModel = function() {
  return this.setSimpleRiskModel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.TradableInstrument.prototype.hasSimpleRiskModel = function() {
  return jspb.Message.getField(this, 101) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.FeeFactors.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.FeeFactors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.FeeFactors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FeeFactors.toObject = function(includeInstance, msg) {
  var f, obj = {
    makerFee: jspb.Message.getFieldWithDefault(msg, 1, ""),
    infrastructureFee: jspb.Message.getFieldWithDefault(msg, 2, ""),
    liquidityFee: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.FeeFactors}
 */
proto.vega.FeeFactors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.FeeFactors;
  return proto.vega.FeeFactors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.FeeFactors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.FeeFactors}
 */
proto.vega.FeeFactors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerFee(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfrastructureFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiquidityFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.FeeFactors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.FeeFactors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.FeeFactors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FeeFactors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakerFee();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfrastructureFee();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLiquidityFee();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string maker_fee = 1;
 * @return {string}
 */
proto.vega.FeeFactors.prototype.getMakerFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.FeeFactors} returns this
 */
proto.vega.FeeFactors.prototype.setMakerFee = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string infrastructure_fee = 2;
 * @return {string}
 */
proto.vega.FeeFactors.prototype.getInfrastructureFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.FeeFactors} returns this
 */
proto.vega.FeeFactors.prototype.setInfrastructureFee = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string liquidity_fee = 3;
 * @return {string}
 */
proto.vega.FeeFactors.prototype.getLiquidityFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.FeeFactors} returns this
 */
proto.vega.FeeFactors.prototype.setLiquidityFee = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Fees.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Fees.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Fees} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Fees.toObject = function(includeInstance, msg) {
  var f, obj = {
    factors: (f = msg.getFactors()) && proto.vega.FeeFactors.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Fees}
 */
proto.vega.Fees.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Fees;
  return proto.vega.Fees.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Fees} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Fees}
 */
proto.vega.Fees.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.FeeFactors;
      reader.readMessage(value,proto.vega.FeeFactors.deserializeBinaryFromReader);
      msg.setFactors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Fees.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Fees.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Fees} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Fees.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFactors();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.FeeFactors.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeeFactors factors = 1;
 * @return {?proto.vega.FeeFactors}
 */
proto.vega.Fees.prototype.getFactors = function() {
  return /** @type{?proto.vega.FeeFactors} */ (
    jspb.Message.getWrapperField(this, proto.vega.FeeFactors, 1));
};


/**
 * @param {?proto.vega.FeeFactors|undefined} value
 * @return {!proto.vega.Fees} returns this
*/
proto.vega.Fees.prototype.setFactors = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Fees} returns this
 */
proto.vega.Fees.prototype.clearFactors = function() {
  return this.setFactors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Fees.prototype.hasFactors = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.PriceMonitoringTrigger.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.PriceMonitoringTrigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.PriceMonitoringTrigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringTrigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    horizon: jspb.Message.getFieldWithDefault(msg, 1, 0),
    probability: jspb.Message.getFieldWithDefault(msg, 2, ""),
    auctionExtension: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.PriceMonitoringTrigger}
 */
proto.vega.PriceMonitoringTrigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.PriceMonitoringTrigger;
  return proto.vega.PriceMonitoringTrigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.PriceMonitoringTrigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.PriceMonitoringTrigger}
 */
proto.vega.PriceMonitoringTrigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHorizon(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProbability(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAuctionExtension(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.PriceMonitoringTrigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.PriceMonitoringTrigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.PriceMonitoringTrigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringTrigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHorizon();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getProbability();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuctionExtension();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 horizon = 1;
 * @return {number}
 */
proto.vega.PriceMonitoringTrigger.prototype.getHorizon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.PriceMonitoringTrigger} returns this
 */
proto.vega.PriceMonitoringTrigger.prototype.setHorizon = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string probability = 2;
 * @return {string}
 */
proto.vega.PriceMonitoringTrigger.prototype.getProbability = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.PriceMonitoringTrigger} returns this
 */
proto.vega.PriceMonitoringTrigger.prototype.setProbability = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 auction_extension = 3;
 * @return {number}
 */
proto.vega.PriceMonitoringTrigger.prototype.getAuctionExtension = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.PriceMonitoringTrigger} returns this
 */
proto.vega.PriceMonitoringTrigger.prototype.setAuctionExtension = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.PriceMonitoringParameters.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.PriceMonitoringParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.PriceMonitoringParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.PriceMonitoringParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    triggersList: jspb.Message.toObjectList(msg.getTriggersList(),
    proto.vega.PriceMonitoringTrigger.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.PriceMonitoringParameters}
 */
proto.vega.PriceMonitoringParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.PriceMonitoringParameters;
  return proto.vega.PriceMonitoringParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.PriceMonitoringParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.PriceMonitoringParameters}
 */
proto.vega.PriceMonitoringParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.PriceMonitoringTrigger;
      reader.readMessage(value,proto.vega.PriceMonitoringTrigger.deserializeBinaryFromReader);
      msg.addTriggers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.PriceMonitoringParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.PriceMonitoringParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.PriceMonitoringParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTriggersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.PriceMonitoringTrigger.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PriceMonitoringTrigger triggers = 1;
 * @return {!Array<!proto.vega.PriceMonitoringTrigger>}
 */
proto.vega.PriceMonitoringParameters.prototype.getTriggersList = function() {
  return /** @type{!Array<!proto.vega.PriceMonitoringTrigger>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.PriceMonitoringTrigger, 1));
};


/**
 * @param {!Array<!proto.vega.PriceMonitoringTrigger>} value
 * @return {!proto.vega.PriceMonitoringParameters} returns this
*/
proto.vega.PriceMonitoringParameters.prototype.setTriggersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.PriceMonitoringTrigger=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.PriceMonitoringTrigger}
 */
proto.vega.PriceMonitoringParameters.prototype.addTriggers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.PriceMonitoringTrigger, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.PriceMonitoringParameters} returns this
 */
proto.vega.PriceMonitoringParameters.prototype.clearTriggersList = function() {
  return this.setTriggersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.PriceMonitoringSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.PriceMonitoringSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.PriceMonitoringSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameters: (f = msg.getParameters()) && proto.vega.PriceMonitoringParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.PriceMonitoringSettings}
 */
proto.vega.PriceMonitoringSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.PriceMonitoringSettings;
  return proto.vega.PriceMonitoringSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.PriceMonitoringSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.PriceMonitoringSettings}
 */
proto.vega.PriceMonitoringSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.PriceMonitoringParameters;
      reader.readMessage(value,proto.vega.PriceMonitoringParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.PriceMonitoringSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.PriceMonitoringSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.PriceMonitoringSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.PriceMonitoringParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional PriceMonitoringParameters parameters = 1;
 * @return {?proto.vega.PriceMonitoringParameters}
 */
proto.vega.PriceMonitoringSettings.prototype.getParameters = function() {
  return /** @type{?proto.vega.PriceMonitoringParameters} */ (
    jspb.Message.getWrapperField(this, proto.vega.PriceMonitoringParameters, 1));
};


/**
 * @param {?proto.vega.PriceMonitoringParameters|undefined} value
 * @return {!proto.vega.PriceMonitoringSettings} returns this
*/
proto.vega.PriceMonitoringSettings.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.PriceMonitoringSettings} returns this
 */
proto.vega.PriceMonitoringSettings.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.PriceMonitoringSettings.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.LiquidityMonitoringParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.LiquidityMonitoringParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.LiquidityMonitoringParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LiquidityMonitoringParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetStakeParameters: (f = msg.getTargetStakeParameters()) && proto.vega.TargetStakeParameters.toObject(includeInstance, f),
    triggeringRatio: jspb.Message.getFieldWithDefault(msg, 2, ""),
    auctionExtension: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.LiquidityMonitoringParameters}
 */
proto.vega.LiquidityMonitoringParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.LiquidityMonitoringParameters;
  return proto.vega.LiquidityMonitoringParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.LiquidityMonitoringParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.LiquidityMonitoringParameters}
 */
proto.vega.LiquidityMonitoringParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.TargetStakeParameters;
      reader.readMessage(value,proto.vega.TargetStakeParameters.deserializeBinaryFromReader);
      msg.setTargetStakeParameters(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggeringRatio(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAuctionExtension(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.LiquidityMonitoringParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.LiquidityMonitoringParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.LiquidityMonitoringParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LiquidityMonitoringParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetStakeParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.TargetStakeParameters.serializeBinaryToWriter
    );
  }
  f = message.getTriggeringRatio();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuctionExtension();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional TargetStakeParameters target_stake_parameters = 1;
 * @return {?proto.vega.TargetStakeParameters}
 */
proto.vega.LiquidityMonitoringParameters.prototype.getTargetStakeParameters = function() {
  return /** @type{?proto.vega.TargetStakeParameters} */ (
    jspb.Message.getWrapperField(this, proto.vega.TargetStakeParameters, 1));
};


/**
 * @param {?proto.vega.TargetStakeParameters|undefined} value
 * @return {!proto.vega.LiquidityMonitoringParameters} returns this
*/
proto.vega.LiquidityMonitoringParameters.prototype.setTargetStakeParameters = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.LiquidityMonitoringParameters} returns this
 */
proto.vega.LiquidityMonitoringParameters.prototype.clearTargetStakeParameters = function() {
  return this.setTargetStakeParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.LiquidityMonitoringParameters.prototype.hasTargetStakeParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string triggering_ratio = 2;
 * @return {string}
 */
proto.vega.LiquidityMonitoringParameters.prototype.getTriggeringRatio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.LiquidityMonitoringParameters} returns this
 */
proto.vega.LiquidityMonitoringParameters.prototype.setTriggeringRatio = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 auction_extension = 3;
 * @return {number}
 */
proto.vega.LiquidityMonitoringParameters.prototype.getAuctionExtension = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.LiquidityMonitoringParameters} returns this
 */
proto.vega.LiquidityMonitoringParameters.prototype.setAuctionExtension = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.TargetStakeParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.TargetStakeParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.TargetStakeParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.TargetStakeParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeWindow: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scalingFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.TargetStakeParameters}
 */
proto.vega.TargetStakeParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.TargetStakeParameters;
  return proto.vega.TargetStakeParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.TargetStakeParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.TargetStakeParameters}
 */
proto.vega.TargetStakeParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeWindow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setScalingFactor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.TargetStakeParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.TargetStakeParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.TargetStakeParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.TargetStakeParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeWindow();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getScalingFactor();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional int64 time_window = 1;
 * @return {number}
 */
proto.vega.TargetStakeParameters.prototype.getTimeWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.TargetStakeParameters} returns this
 */
proto.vega.TargetStakeParameters.prototype.setTimeWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double scaling_factor = 2;
 * @return {number}
 */
proto.vega.TargetStakeParameters.prototype.getScalingFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vega.TargetStakeParameters} returns this
 */
proto.vega.TargetStakeParameters.prototype.setScalingFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Market.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Market.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Market} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Market.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tradableInstrument: (f = msg.getTradableInstrument()) && proto.vega.TradableInstrument.toObject(includeInstance, f),
    decimalPlaces: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fees: (f = msg.getFees()) && proto.vega.Fees.toObject(includeInstance, f),
    openingAuction: (f = msg.getOpeningAuction()) && proto.vega.AuctionDuration.toObject(includeInstance, f),
    priceMonitoringSettings: (f = msg.getPriceMonitoringSettings()) && proto.vega.PriceMonitoringSettings.toObject(includeInstance, f),
    liquidityMonitoringParameters: (f = msg.getLiquidityMonitoringParameters()) && proto.vega.LiquidityMonitoringParameters.toObject(includeInstance, f),
    tradingMode: jspb.Message.getFieldWithDefault(msg, 8, 0),
    state: jspb.Message.getFieldWithDefault(msg, 9, 0),
    marketTimestamps: (f = msg.getMarketTimestamps()) && proto.vega.MarketTimestamps.toObject(includeInstance, f),
    positionDecimalPlaces: jspb.Message.getFieldWithDefault(msg, 11, 0),
    lpPriceRange: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Market}
 */
proto.vega.Market.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Market;
  return proto.vega.Market.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Market} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Market}
 */
proto.vega.Market.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.vega.TradableInstrument;
      reader.readMessage(value,proto.vega.TradableInstrument.deserializeBinaryFromReader);
      msg.setTradableInstrument(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDecimalPlaces(value);
      break;
    case 4:
      var value = new proto.vega.Fees;
      reader.readMessage(value,proto.vega.Fees.deserializeBinaryFromReader);
      msg.setFees(value);
      break;
    case 5:
      var value = new proto.vega.AuctionDuration;
      reader.readMessage(value,proto.vega.AuctionDuration.deserializeBinaryFromReader);
      msg.setOpeningAuction(value);
      break;
    case 6:
      var value = new proto.vega.PriceMonitoringSettings;
      reader.readMessage(value,proto.vega.PriceMonitoringSettings.deserializeBinaryFromReader);
      msg.setPriceMonitoringSettings(value);
      break;
    case 7:
      var value = new proto.vega.LiquidityMonitoringParameters;
      reader.readMessage(value,proto.vega.LiquidityMonitoringParameters.deserializeBinaryFromReader);
      msg.setLiquidityMonitoringParameters(value);
      break;
    case 8:
      var value = /** @type {!proto.vega.Market.TradingMode} */ (reader.readEnum());
      msg.setTradingMode(value);
      break;
    case 9:
      var value = /** @type {!proto.vega.Market.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 10:
      var value = new proto.vega.MarketTimestamps;
      reader.readMessage(value,proto.vega.MarketTimestamps.deserializeBinaryFromReader);
      msg.setMarketTimestamps(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPositionDecimalPlaces(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLpPriceRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Market.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Market.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Market} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Market.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTradableInstrument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vega.TradableInstrument.serializeBinaryToWriter
    );
  }
  f = message.getDecimalPlaces();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFees();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vega.Fees.serializeBinaryToWriter
    );
  }
  f = message.getOpeningAuction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.vega.AuctionDuration.serializeBinaryToWriter
    );
  }
  f = message.getPriceMonitoringSettings();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.vega.PriceMonitoringSettings.serializeBinaryToWriter
    );
  }
  f = message.getLiquidityMonitoringParameters();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.vega.LiquidityMonitoringParameters.serializeBinaryToWriter
    );
  }
  f = message.getTradingMode();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getMarketTimestamps();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.vega.MarketTimestamps.serializeBinaryToWriter
    );
  }
  f = message.getPositionDecimalPlaces();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getLpPriceRange();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vega.Market.State = {
  STATE_UNSPECIFIED: 0,
  STATE_PROPOSED: 1,
  STATE_REJECTED: 2,
  STATE_PENDING: 3,
  STATE_CANCELLED: 4,
  STATE_ACTIVE: 5,
  STATE_SUSPENDED: 6,
  STATE_CLOSED: 7,
  STATE_TRADING_TERMINATED: 8,
  STATE_SETTLED: 9
};

/**
 * @enum {number}
 */
proto.vega.Market.TradingMode = {
  TRADING_MODE_UNSPECIFIED: 0,
  TRADING_MODE_CONTINUOUS: 1,
  TRADING_MODE_BATCH_AUCTION: 2,
  TRADING_MODE_OPENING_AUCTION: 3,
  TRADING_MODE_MONITORING_AUCTION: 4,
  TRADING_MODE_NO_TRADING: 5
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.Market.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TradableInstrument tradable_instrument = 2;
 * @return {?proto.vega.TradableInstrument}
 */
proto.vega.Market.prototype.getTradableInstrument = function() {
  return /** @type{?proto.vega.TradableInstrument} */ (
    jspb.Message.getWrapperField(this, proto.vega.TradableInstrument, 2));
};


/**
 * @param {?proto.vega.TradableInstrument|undefined} value
 * @return {!proto.vega.Market} returns this
*/
proto.vega.Market.prototype.setTradableInstrument = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.clearTradableInstrument = function() {
  return this.setTradableInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasTradableInstrument = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 decimal_places = 3;
 * @return {number}
 */
proto.vega.Market.prototype.getDecimalPlaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.setDecimalPlaces = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Fees fees = 4;
 * @return {?proto.vega.Fees}
 */
proto.vega.Market.prototype.getFees = function() {
  return /** @type{?proto.vega.Fees} */ (
    jspb.Message.getWrapperField(this, proto.vega.Fees, 4));
};


/**
 * @param {?proto.vega.Fees|undefined} value
 * @return {!proto.vega.Market} returns this
*/
proto.vega.Market.prototype.setFees = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.clearFees = function() {
  return this.setFees(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasFees = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AuctionDuration opening_auction = 5;
 * @return {?proto.vega.AuctionDuration}
 */
proto.vega.Market.prototype.getOpeningAuction = function() {
  return /** @type{?proto.vega.AuctionDuration} */ (
    jspb.Message.getWrapperField(this, proto.vega.AuctionDuration, 5));
};


/**
 * @param {?proto.vega.AuctionDuration|undefined} value
 * @return {!proto.vega.Market} returns this
*/
proto.vega.Market.prototype.setOpeningAuction = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.clearOpeningAuction = function() {
  return this.setOpeningAuction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasOpeningAuction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PriceMonitoringSettings price_monitoring_settings = 6;
 * @return {?proto.vega.PriceMonitoringSettings}
 */
proto.vega.Market.prototype.getPriceMonitoringSettings = function() {
  return /** @type{?proto.vega.PriceMonitoringSettings} */ (
    jspb.Message.getWrapperField(this, proto.vega.PriceMonitoringSettings, 6));
};


/**
 * @param {?proto.vega.PriceMonitoringSettings|undefined} value
 * @return {!proto.vega.Market} returns this
*/
proto.vega.Market.prototype.setPriceMonitoringSettings = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.clearPriceMonitoringSettings = function() {
  return this.setPriceMonitoringSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasPriceMonitoringSettings = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LiquidityMonitoringParameters liquidity_monitoring_parameters = 7;
 * @return {?proto.vega.LiquidityMonitoringParameters}
 */
proto.vega.Market.prototype.getLiquidityMonitoringParameters = function() {
  return /** @type{?proto.vega.LiquidityMonitoringParameters} */ (
    jspb.Message.getWrapperField(this, proto.vega.LiquidityMonitoringParameters, 7));
};


/**
 * @param {?proto.vega.LiquidityMonitoringParameters|undefined} value
 * @return {!proto.vega.Market} returns this
*/
proto.vega.Market.prototype.setLiquidityMonitoringParameters = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.clearLiquidityMonitoringParameters = function() {
  return this.setLiquidityMonitoringParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasLiquidityMonitoringParameters = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TradingMode trading_mode = 8;
 * @return {!proto.vega.Market.TradingMode}
 */
proto.vega.Market.prototype.getTradingMode = function() {
  return /** @type {!proto.vega.Market.TradingMode} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.vega.Market.TradingMode} value
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.setTradingMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional State state = 9;
 * @return {!proto.vega.Market.State}
 */
proto.vega.Market.prototype.getState = function() {
  return /** @type {!proto.vega.Market.State} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.vega.Market.State} value
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional MarketTimestamps market_timestamps = 10;
 * @return {?proto.vega.MarketTimestamps}
 */
proto.vega.Market.prototype.getMarketTimestamps = function() {
  return /** @type{?proto.vega.MarketTimestamps} */ (
    jspb.Message.getWrapperField(this, proto.vega.MarketTimestamps, 10));
};


/**
 * @param {?proto.vega.MarketTimestamps|undefined} value
 * @return {!proto.vega.Market} returns this
*/
proto.vega.Market.prototype.setMarketTimestamps = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.clearMarketTimestamps = function() {
  return this.setMarketTimestamps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasMarketTimestamps = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 position_decimal_places = 11;
 * @return {number}
 */
proto.vega.Market.prototype.getPositionDecimalPlaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.setPositionDecimalPlaces = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string lp_price_range = 12;
 * @return {string}
 */
proto.vega.Market.prototype.getLpPriceRange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Market} returns this
 */
proto.vega.Market.prototype.setLpPriceRange = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.MarketTimestamps.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.MarketTimestamps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.MarketTimestamps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.MarketTimestamps.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pending: jspb.Message.getFieldWithDefault(msg, 2, 0),
    open: jspb.Message.getFieldWithDefault(msg, 3, 0),
    close: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.MarketTimestamps}
 */
proto.vega.MarketTimestamps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.MarketTimestamps;
  return proto.vega.MarketTimestamps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.MarketTimestamps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.MarketTimestamps}
 */
proto.vega.MarketTimestamps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProposed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPending(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpen(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.MarketTimestamps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.MarketTimestamps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.MarketTimestamps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.MarketTimestamps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposed();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPending();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getClose();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 proposed = 1;
 * @return {number}
 */
proto.vega.MarketTimestamps.prototype.getProposed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.MarketTimestamps} returns this
 */
proto.vega.MarketTimestamps.prototype.setProposed = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pending = 2;
 * @return {number}
 */
proto.vega.MarketTimestamps.prototype.getPending = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.MarketTimestamps} returns this
 */
proto.vega.MarketTimestamps.prototype.setPending = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 open = 3;
 * @return {number}
 */
proto.vega.MarketTimestamps.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.MarketTimestamps} returns this
 */
proto.vega.MarketTimestamps.prototype.setOpen = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 close = 4;
 * @return {number}
 */
proto.vega.MarketTimestamps.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.MarketTimestamps} returns this
 */
proto.vega.MarketTimestamps.prototype.setClose = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.vega);
