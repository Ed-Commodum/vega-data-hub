// source: vega/data/v1/data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vega.data.v1.Data', null, global);
goog.exportSymbol('proto.vega.data.v1.ETHAddress', null, global);
goog.exportSymbol('proto.vega.data.v1.ExternalData', null, global);
goog.exportSymbol('proto.vega.data.v1.Property', null, global);
goog.exportSymbol('proto.vega.data.v1.PubKey', null, global);
goog.exportSymbol('proto.vega.data.v1.Signer', null, global);
goog.exportSymbol('proto.vega.data.v1.Signer.SignerCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.data.v1.ETHAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.data.v1.ETHAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.data.v1.ETHAddress.displayName = 'proto.vega.data.v1.ETHAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.data.v1.PubKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.data.v1.PubKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.data.v1.PubKey.displayName = 'proto.vega.data.v1.PubKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.data.v1.Signer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.data.v1.Signer.oneofGroups_);
};
goog.inherits(proto.vega.data.v1.Signer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.data.v1.Signer.displayName = 'proto.vega.data.v1.Signer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.data.v1.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.data.v1.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.data.v1.Property.displayName = 'proto.vega.data.v1.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.data.v1.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.data.v1.Data.repeatedFields_, null);
};
goog.inherits(proto.vega.data.v1.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.data.v1.Data.displayName = 'proto.vega.data.v1.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.data.v1.ExternalData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.data.v1.ExternalData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.data.v1.ExternalData.displayName = 'proto.vega.data.v1.ExternalData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.data.v1.ETHAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.data.v1.ETHAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.data.v1.ETHAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.ETHAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.data.v1.ETHAddress}
 */
proto.vega.data.v1.ETHAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.data.v1.ETHAddress;
  return proto.vega.data.v1.ETHAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.data.v1.ETHAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.data.v1.ETHAddress}
 */
proto.vega.data.v1.ETHAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.data.v1.ETHAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.data.v1.ETHAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.data.v1.ETHAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.ETHAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.vega.data.v1.ETHAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.data.v1.ETHAddress} returns this
 */
proto.vega.data.v1.ETHAddress.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.data.v1.PubKey.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.data.v1.PubKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.data.v1.PubKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.PubKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.data.v1.PubKey}
 */
proto.vega.data.v1.PubKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.data.v1.PubKey;
  return proto.vega.data.v1.PubKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.data.v1.PubKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.data.v1.PubKey}
 */
proto.vega.data.v1.PubKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.data.v1.PubKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.data.v1.PubKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.data.v1.PubKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.PubKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.vega.data.v1.PubKey.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.data.v1.PubKey} returns this
 */
proto.vega.data.v1.PubKey.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.data.v1.Signer.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.vega.data.v1.Signer.SignerCase = {
  SIGNER_NOT_SET: 0,
  PUB_KEY: 1,
  ETH_ADDRESS: 2
};

/**
 * @return {proto.vega.data.v1.Signer.SignerCase}
 */
proto.vega.data.v1.Signer.prototype.getSignerCase = function() {
  return /** @type {proto.vega.data.v1.Signer.SignerCase} */(jspb.Message.computeOneofCase(this, proto.vega.data.v1.Signer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.data.v1.Signer.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.data.v1.Signer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.data.v1.Signer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.Signer.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubKey: (f = msg.getPubKey()) && proto.vega.data.v1.PubKey.toObject(includeInstance, f),
    ethAddress: (f = msg.getEthAddress()) && proto.vega.data.v1.ETHAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.data.v1.Signer}
 */
proto.vega.data.v1.Signer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.data.v1.Signer;
  return proto.vega.data.v1.Signer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.data.v1.Signer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.data.v1.Signer}
 */
proto.vega.data.v1.Signer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.data.v1.PubKey;
      reader.readMessage(value,proto.vega.data.v1.PubKey.deserializeBinaryFromReader);
      msg.setPubKey(value);
      break;
    case 2:
      var value = new proto.vega.data.v1.ETHAddress;
      reader.readMessage(value,proto.vega.data.v1.ETHAddress.deserializeBinaryFromReader);
      msg.setEthAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.data.v1.Signer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.data.v1.Signer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.data.v1.Signer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.Signer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.data.v1.PubKey.serializeBinaryToWriter
    );
  }
  f = message.getEthAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vega.data.v1.ETHAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional PubKey pub_key = 1;
 * @return {?proto.vega.data.v1.PubKey}
 */
proto.vega.data.v1.Signer.prototype.getPubKey = function() {
  return /** @type{?proto.vega.data.v1.PubKey} */ (
    jspb.Message.getWrapperField(this, proto.vega.data.v1.PubKey, 1));
};


/**
 * @param {?proto.vega.data.v1.PubKey|undefined} value
 * @return {!proto.vega.data.v1.Signer} returns this
*/
proto.vega.data.v1.Signer.prototype.setPubKey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.vega.data.v1.Signer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.data.v1.Signer} returns this
 */
proto.vega.data.v1.Signer.prototype.clearPubKey = function() {
  return this.setPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.data.v1.Signer.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ETHAddress eth_address = 2;
 * @return {?proto.vega.data.v1.ETHAddress}
 */
proto.vega.data.v1.Signer.prototype.getEthAddress = function() {
  return /** @type{?proto.vega.data.v1.ETHAddress} */ (
    jspb.Message.getWrapperField(this, proto.vega.data.v1.ETHAddress, 2));
};


/**
 * @param {?proto.vega.data.v1.ETHAddress|undefined} value
 * @return {!proto.vega.data.v1.Signer} returns this
*/
proto.vega.data.v1.Signer.prototype.setEthAddress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.vega.data.v1.Signer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.data.v1.Signer} returns this
 */
proto.vega.data.v1.Signer.prototype.clearEthAddress = function() {
  return this.setEthAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.data.v1.Signer.prototype.hasEthAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.data.v1.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.data.v1.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.data.v1.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    numberDecimalPlaces: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.data.v1.Property}
 */
proto.vega.data.v1.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.data.v1.Property;
  return proto.vega.data.v1.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.data.v1.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.data.v1.Property}
 */
proto.vega.data.v1.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumberDecimalPlaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.data.v1.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.data.v1.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.data.v1.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.vega.data.v1.Property.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.data.v1.Property} returns this
 */
proto.vega.data.v1.Property.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.vega.data.v1.Property.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.data.v1.Property} returns this
 */
proto.vega.data.v1.Property.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 number_decimal_places = 3;
 * @return {number}
 */
proto.vega.data.v1.Property.prototype.getNumberDecimalPlaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.data.v1.Property} returns this
 */
proto.vega.data.v1.Property.prototype.setNumberDecimalPlaces = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vega.data.v1.Property} returns this
 */
proto.vega.data.v1.Property.prototype.clearNumberDecimalPlaces = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.data.v1.Property.prototype.hasNumberDecimalPlaces = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.data.v1.Data.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.data.v1.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.data.v1.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.data.v1.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.vega.data.v1.Signer.toObject, includeInstance),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.vega.data.v1.Property.toObject, includeInstance),
    matchedSpecIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    broadcastAt: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.data.v1.Data}
 */
proto.vega.data.v1.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.data.v1.Data;
  return proto.vega.data.v1.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.data.v1.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.data.v1.Data}
 */
proto.vega.data.v1.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.data.v1.Signer;
      reader.readMessage(value,proto.vega.data.v1.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    case 2:
      var value = new proto.vega.data.v1.Property;
      reader.readMessage(value,proto.vega.data.v1.Property.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMatchedSpecIds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBroadcastAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.data.v1.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.data.v1.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.data.v1.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.data.v1.Signer.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vega.data.v1.Property.serializeBinaryToWriter
    );
  }
  f = message.getMatchedSpecIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getBroadcastAt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated Signer signers = 1;
 * @return {!Array<!proto.vega.data.v1.Signer>}
 */
proto.vega.data.v1.Data.prototype.getSignersList = function() {
  return /** @type{!Array<!proto.vega.data.v1.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.data.v1.Signer, 1));
};


/**
 * @param {!Array<!proto.vega.data.v1.Signer>} value
 * @return {!proto.vega.data.v1.Data} returns this
*/
proto.vega.data.v1.Data.prototype.setSignersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.data.v1.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.data.v1.Signer}
 */
proto.vega.data.v1.Data.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.data.v1.Signer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.data.v1.Data} returns this
 */
proto.vega.data.v1.Data.prototype.clearSignersList = function() {
  return this.setSignersList([]);
};


/**
 * repeated Property data = 2;
 * @return {!Array<!proto.vega.data.v1.Property>}
 */
proto.vega.data.v1.Data.prototype.getDataList = function() {
  return /** @type{!Array<!proto.vega.data.v1.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.data.v1.Property, 2));
};


/**
 * @param {!Array<!proto.vega.data.v1.Property>} value
 * @return {!proto.vega.data.v1.Data} returns this
*/
proto.vega.data.v1.Data.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vega.data.v1.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.data.v1.Property}
 */
proto.vega.data.v1.Data.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vega.data.v1.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.data.v1.Data} returns this
 */
proto.vega.data.v1.Data.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * repeated string matched_spec_ids = 3;
 * @return {!Array<string>}
 */
proto.vega.data.v1.Data.prototype.getMatchedSpecIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vega.data.v1.Data} returns this
 */
proto.vega.data.v1.Data.prototype.setMatchedSpecIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vega.data.v1.Data} returns this
 */
proto.vega.data.v1.Data.prototype.addMatchedSpecIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.data.v1.Data} returns this
 */
proto.vega.data.v1.Data.prototype.clearMatchedSpecIdsList = function() {
  return this.setMatchedSpecIdsList([]);
};


/**
 * optional int64 broadcast_at = 4;
 * @return {number}
 */
proto.vega.data.v1.Data.prototype.getBroadcastAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.data.v1.Data} returns this
 */
proto.vega.data.v1.Data.prototype.setBroadcastAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.data.v1.ExternalData.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.data.v1.ExternalData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.data.v1.ExternalData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.ExternalData.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.vega.data.v1.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.data.v1.ExternalData}
 */
proto.vega.data.v1.ExternalData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.data.v1.ExternalData;
  return proto.vega.data.v1.ExternalData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.data.v1.ExternalData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.data.v1.ExternalData}
 */
proto.vega.data.v1.ExternalData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.data.v1.Data;
      reader.readMessage(value,proto.vega.data.v1.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.data.v1.ExternalData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.data.v1.ExternalData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.data.v1.ExternalData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.data.v1.ExternalData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.data.v1.Data.serializeBinaryToWriter
    );
  }
};


/**
 * optional Data data = 1;
 * @return {?proto.vega.data.v1.Data}
 */
proto.vega.data.v1.ExternalData.prototype.getData = function() {
  return /** @type{?proto.vega.data.v1.Data} */ (
    jspb.Message.getWrapperField(this, proto.vega.data.v1.Data, 1));
};


/**
 * @param {?proto.vega.data.v1.Data|undefined} value
 * @return {!proto.vega.data.v1.ExternalData} returns this
*/
proto.vega.data.v1.ExternalData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.data.v1.ExternalData} returns this
 */
proto.vega.data.v1.ExternalData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.data.v1.ExternalData.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.vega.data.v1);
