// source: vega/governance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vega_markets_pb = require('../vega/markets_pb.js');
goog.object.extend(proto, vega_markets_pb);
var vega_vega_pb = require('../vega/vega_pb.js');
goog.object.extend(proto, vega_vega_pb);
var vega_assets_pb = require('../vega/assets_pb.js');
goog.object.extend(proto, vega_assets_pb);
var vega_data_source_pb = require('../vega/data_source_pb.js');
goog.object.extend(proto, vega_data_source_pb);
goog.exportSymbol('proto.vega.FutureProduct', null, global);
goog.exportSymbol('proto.vega.GovernanceData', null, global);
goog.exportSymbol('proto.vega.InstrumentConfiguration', null, global);
goog.exportSymbol('proto.vega.InstrumentConfiguration.ProductCase', null, global);
goog.exportSymbol('proto.vega.NewAsset', null, global);
goog.exportSymbol('proto.vega.NewFreeform', null, global);
goog.exportSymbol('proto.vega.NewMarket', null, global);
goog.exportSymbol('proto.vega.NewMarketConfiguration', null, global);
goog.exportSymbol('proto.vega.NewMarketConfiguration.RiskParametersCase', null, global);
goog.exportSymbol('proto.vega.Proposal', null, global);
goog.exportSymbol('proto.vega.Proposal.State', null, global);
goog.exportSymbol('proto.vega.ProposalError', null, global);
goog.exportSymbol('proto.vega.ProposalRationale', null, global);
goog.exportSymbol('proto.vega.ProposalTerms', null, global);
goog.exportSymbol('proto.vega.ProposalTerms.ChangeCase', null, global);
goog.exportSymbol('proto.vega.UpdateAsset', null, global);
goog.exportSymbol('proto.vega.UpdateFutureProduct', null, global);
goog.exportSymbol('proto.vega.UpdateInstrumentConfiguration', null, global);
goog.exportSymbol('proto.vega.UpdateInstrumentConfiguration.ProductCase', null, global);
goog.exportSymbol('proto.vega.UpdateMarket', null, global);
goog.exportSymbol('proto.vega.UpdateMarketConfiguration', null, global);
goog.exportSymbol('proto.vega.UpdateMarketConfiguration.RiskParametersCase', null, global);
goog.exportSymbol('proto.vega.UpdateNetworkParameter', null, global);
goog.exportSymbol('proto.vega.Vote', null, global);
goog.exportSymbol('proto.vega.Vote.Value', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.FutureProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.FutureProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.FutureProduct.displayName = 'proto.vega.FutureProduct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.InstrumentConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.InstrumentConfiguration.oneofGroups_);
};
goog.inherits(proto.vega.InstrumentConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.InstrumentConfiguration.displayName = 'proto.vega.InstrumentConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.NewMarketConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.NewMarketConfiguration.repeatedFields_, proto.vega.NewMarketConfiguration.oneofGroups_);
};
goog.inherits(proto.vega.NewMarketConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.NewMarketConfiguration.displayName = 'proto.vega.NewMarketConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.NewMarket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.NewMarket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.NewMarket.displayName = 'proto.vega.NewMarket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.UpdateMarket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.UpdateMarket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.UpdateMarket.displayName = 'proto.vega.UpdateMarket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.UpdateMarketConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.UpdateMarketConfiguration.repeatedFields_, proto.vega.UpdateMarketConfiguration.oneofGroups_);
};
goog.inherits(proto.vega.UpdateMarketConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.UpdateMarketConfiguration.displayName = 'proto.vega.UpdateMarketConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.UpdateInstrumentConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.UpdateInstrumentConfiguration.oneofGroups_);
};
goog.inherits(proto.vega.UpdateInstrumentConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.UpdateInstrumentConfiguration.displayName = 'proto.vega.UpdateInstrumentConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.UpdateFutureProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.UpdateFutureProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.UpdateFutureProduct.displayName = 'proto.vega.UpdateFutureProduct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.UpdateNetworkParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.UpdateNetworkParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.UpdateNetworkParameter.displayName = 'proto.vega.UpdateNetworkParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.NewAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.NewAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.NewAsset.displayName = 'proto.vega.NewAsset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.UpdateAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.UpdateAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.UpdateAsset.displayName = 'proto.vega.UpdateAsset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.NewFreeform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.NewFreeform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.NewFreeform.displayName = 'proto.vega.NewFreeform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ProposalTerms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.ProposalTerms.oneofGroups_);
};
goog.inherits(proto.vega.ProposalTerms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ProposalTerms.displayName = 'proto.vega.ProposalTerms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ProposalRationale = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ProposalRationale, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ProposalRationale.displayName = 'proto.vega.ProposalRationale';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.GovernanceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.GovernanceData.repeatedFields_, null);
};
goog.inherits(proto.vega.GovernanceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.GovernanceData.displayName = 'proto.vega.GovernanceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Proposal.displayName = 'proto.vega.Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Vote.displayName = 'proto.vega.Vote';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.FutureProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.FutureProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.FutureProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FutureProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    settlementAsset: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quoteName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataSourceSpecForSettlementData: (f = msg.getDataSourceSpecForSettlementData()) && vega_data_source_pb.DataSourceDefinition.toObject(includeInstance, f),
    dataSourceSpecForTradingTermination: (f = msg.getDataSourceSpecForTradingTermination()) && vega_data_source_pb.DataSourceDefinition.toObject(includeInstance, f),
    dataSourceSpecBinding: (f = msg.getDataSourceSpecBinding()) && vega_markets_pb.DataSourceSpecToFutureBinding.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.FutureProduct}
 */
proto.vega.FutureProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.FutureProduct;
  return proto.vega.FutureProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.FutureProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.FutureProduct}
 */
proto.vega.FutureProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlementAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteName(value);
      break;
    case 3:
      var value = new vega_data_source_pb.DataSourceDefinition;
      reader.readMessage(value,vega_data_source_pb.DataSourceDefinition.deserializeBinaryFromReader);
      msg.setDataSourceSpecForSettlementData(value);
      break;
    case 4:
      var value = new vega_data_source_pb.DataSourceDefinition;
      reader.readMessage(value,vega_data_source_pb.DataSourceDefinition.deserializeBinaryFromReader);
      msg.setDataSourceSpecForTradingTermination(value);
      break;
    case 5:
      var value = new vega_markets_pb.DataSourceSpecToFutureBinding;
      reader.readMessage(value,vega_markets_pb.DataSourceSpecToFutureBinding.deserializeBinaryFromReader);
      msg.setDataSourceSpecBinding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.FutureProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.FutureProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.FutureProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FutureProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettlementAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuoteName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataSourceSpecForSettlementData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vega_data_source_pb.DataSourceDefinition.serializeBinaryToWriter
    );
  }
  f = message.getDataSourceSpecForTradingTermination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vega_data_source_pb.DataSourceDefinition.serializeBinaryToWriter
    );
  }
  f = message.getDataSourceSpecBinding();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      vega_markets_pb.DataSourceSpecToFutureBinding.serializeBinaryToWriter
    );
  }
};


/**
 * optional string settlement_asset = 1;
 * @return {string}
 */
proto.vega.FutureProduct.prototype.getSettlementAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.FutureProduct} returns this
 */
proto.vega.FutureProduct.prototype.setSettlementAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quote_name = 2;
 * @return {string}
 */
proto.vega.FutureProduct.prototype.getQuoteName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.FutureProduct} returns this
 */
proto.vega.FutureProduct.prototype.setQuoteName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DataSourceDefinition data_source_spec_for_settlement_data = 3;
 * @return {?proto.vega.DataSourceDefinition}
 */
proto.vega.FutureProduct.prototype.getDataSourceSpecForSettlementData = function() {
  return /** @type{?proto.vega.DataSourceDefinition} */ (
    jspb.Message.getWrapperField(this, vega_data_source_pb.DataSourceDefinition, 3));
};


/**
 * @param {?proto.vega.DataSourceDefinition|undefined} value
 * @return {!proto.vega.FutureProduct} returns this
*/
proto.vega.FutureProduct.prototype.setDataSourceSpecForSettlementData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.FutureProduct} returns this
 */
proto.vega.FutureProduct.prototype.clearDataSourceSpecForSettlementData = function() {
  return this.setDataSourceSpecForSettlementData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.FutureProduct.prototype.hasDataSourceSpecForSettlementData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataSourceDefinition data_source_spec_for_trading_termination = 4;
 * @return {?proto.vega.DataSourceDefinition}
 */
proto.vega.FutureProduct.prototype.getDataSourceSpecForTradingTermination = function() {
  return /** @type{?proto.vega.DataSourceDefinition} */ (
    jspb.Message.getWrapperField(this, vega_data_source_pb.DataSourceDefinition, 4));
};


/**
 * @param {?proto.vega.DataSourceDefinition|undefined} value
 * @return {!proto.vega.FutureProduct} returns this
*/
proto.vega.FutureProduct.prototype.setDataSourceSpecForTradingTermination = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.FutureProduct} returns this
 */
proto.vega.FutureProduct.prototype.clearDataSourceSpecForTradingTermination = function() {
  return this.setDataSourceSpecForTradingTermination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.FutureProduct.prototype.hasDataSourceSpecForTradingTermination = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DataSourceSpecToFutureBinding data_source_spec_binding = 5;
 * @return {?proto.vega.DataSourceSpecToFutureBinding}
 */
proto.vega.FutureProduct.prototype.getDataSourceSpecBinding = function() {
  return /** @type{?proto.vega.DataSourceSpecToFutureBinding} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.DataSourceSpecToFutureBinding, 5));
};


/**
 * @param {?proto.vega.DataSourceSpecToFutureBinding|undefined} value
 * @return {!proto.vega.FutureProduct} returns this
*/
proto.vega.FutureProduct.prototype.setDataSourceSpecBinding = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.FutureProduct} returns this
 */
proto.vega.FutureProduct.prototype.clearDataSourceSpecBinding = function() {
  return this.setDataSourceSpecBinding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.FutureProduct.prototype.hasDataSourceSpecBinding = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.InstrumentConfiguration.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.vega.InstrumentConfiguration.ProductCase = {
  PRODUCT_NOT_SET: 0,
  FUTURE: 100
};

/**
 * @return {proto.vega.InstrumentConfiguration.ProductCase}
 */
proto.vega.InstrumentConfiguration.prototype.getProductCase = function() {
  return /** @type {proto.vega.InstrumentConfiguration.ProductCase} */(jspb.Message.computeOneofCase(this, proto.vega.InstrumentConfiguration.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.InstrumentConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.InstrumentConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.InstrumentConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.InstrumentConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    future: (f = msg.getFuture()) && proto.vega.FutureProduct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.InstrumentConfiguration}
 */
proto.vega.InstrumentConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.InstrumentConfiguration;
  return proto.vega.InstrumentConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.InstrumentConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.InstrumentConfiguration}
 */
proto.vega.InstrumentConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 100:
      var value = new proto.vega.FutureProduct;
      reader.readMessage(value,proto.vega.FutureProduct.deserializeBinaryFromReader);
      msg.setFuture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.InstrumentConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.InstrumentConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.InstrumentConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.InstrumentConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFuture();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.FutureProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.vega.InstrumentConfiguration.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.InstrumentConfiguration} returns this
 */
proto.vega.InstrumentConfiguration.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.vega.InstrumentConfiguration.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.InstrumentConfiguration} returns this
 */
proto.vega.InstrumentConfiguration.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FutureProduct future = 100;
 * @return {?proto.vega.FutureProduct}
 */
proto.vega.InstrumentConfiguration.prototype.getFuture = function() {
  return /** @type{?proto.vega.FutureProduct} */ (
    jspb.Message.getWrapperField(this, proto.vega.FutureProduct, 100));
};


/**
 * @param {?proto.vega.FutureProduct|undefined} value
 * @return {!proto.vega.InstrumentConfiguration} returns this
*/
proto.vega.InstrumentConfiguration.prototype.setFuture = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.vega.InstrumentConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.InstrumentConfiguration} returns this
 */
proto.vega.InstrumentConfiguration.prototype.clearFuture = function() {
  return this.setFuture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.InstrumentConfiguration.prototype.hasFuture = function() {
  return jspb.Message.getField(this, 100) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.NewMarketConfiguration.repeatedFields_ = [3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.NewMarketConfiguration.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.vega.NewMarketConfiguration.RiskParametersCase = {
  RISK_PARAMETERS_NOT_SET: 0,
  SIMPLE: 100,
  LOG_NORMAL: 101
};

/**
 * @return {proto.vega.NewMarketConfiguration.RiskParametersCase}
 */
proto.vega.NewMarketConfiguration.prototype.getRiskParametersCase = function() {
  return /** @type {proto.vega.NewMarketConfiguration.RiskParametersCase} */(jspb.Message.computeOneofCase(this, proto.vega.NewMarketConfiguration.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.NewMarketConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.NewMarketConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.NewMarketConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewMarketConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: (f = msg.getInstrument()) && proto.vega.InstrumentConfiguration.toObject(includeInstance, f),
    decimalPlaces: jspb.Message.getFieldWithDefault(msg, 2, 0),
    metadataList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    priceMonitoringParameters: (f = msg.getPriceMonitoringParameters()) && vega_markets_pb.PriceMonitoringParameters.toObject(includeInstance, f),
    liquidityMonitoringParameters: (f = msg.getLiquidityMonitoringParameters()) && vega_markets_pb.LiquidityMonitoringParameters.toObject(includeInstance, f),
    simple: (f = msg.getSimple()) && vega_markets_pb.SimpleModelParams.toObject(includeInstance, f),
    logNormal: (f = msg.getLogNormal()) && vega_markets_pb.LogNormalRiskModel.toObject(includeInstance, f),
    positionDecimalPlaces: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lpPriceRange: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.NewMarketConfiguration}
 */
proto.vega.NewMarketConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.NewMarketConfiguration;
  return proto.vega.NewMarketConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.NewMarketConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.NewMarketConfiguration}
 */
proto.vega.NewMarketConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.InstrumentConfiguration;
      reader.readMessage(value,proto.vega.InstrumentConfiguration.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDecimalPlaces(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMetadata(value);
      break;
    case 4:
      var value = new vega_markets_pb.PriceMonitoringParameters;
      reader.readMessage(value,vega_markets_pb.PriceMonitoringParameters.deserializeBinaryFromReader);
      msg.setPriceMonitoringParameters(value);
      break;
    case 5:
      var value = new vega_markets_pb.LiquidityMonitoringParameters;
      reader.readMessage(value,vega_markets_pb.LiquidityMonitoringParameters.deserializeBinaryFromReader);
      msg.setLiquidityMonitoringParameters(value);
      break;
    case 100:
      var value = new vega_markets_pb.SimpleModelParams;
      reader.readMessage(value,vega_markets_pb.SimpleModelParams.deserializeBinaryFromReader);
      msg.setSimple(value);
      break;
    case 101:
      var value = new vega_markets_pb.LogNormalRiskModel;
      reader.readMessage(value,vega_markets_pb.LogNormalRiskModel.deserializeBinaryFromReader);
      msg.setLogNormal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPositionDecimalPlaces(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLpPriceRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.NewMarketConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.NewMarketConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.NewMarketConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewMarketConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.InstrumentConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getDecimalPlaces();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPriceMonitoringParameters();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vega_markets_pb.PriceMonitoringParameters.serializeBinaryToWriter
    );
  }
  f = message.getLiquidityMonitoringParameters();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      vega_markets_pb.LiquidityMonitoringParameters.serializeBinaryToWriter
    );
  }
  f = message.getSimple();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      vega_markets_pb.SimpleModelParams.serializeBinaryToWriter
    );
  }
  f = message.getLogNormal();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      vega_markets_pb.LogNormalRiskModel.serializeBinaryToWriter
    );
  }
  f = message.getPositionDecimalPlaces();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLpPriceRange();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional InstrumentConfiguration instrument = 1;
 * @return {?proto.vega.InstrumentConfiguration}
 */
proto.vega.NewMarketConfiguration.prototype.getInstrument = function() {
  return /** @type{?proto.vega.InstrumentConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.InstrumentConfiguration, 1));
};


/**
 * @param {?proto.vega.InstrumentConfiguration|undefined} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
*/
proto.vega.NewMarketConfiguration.prototype.setInstrument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.clearInstrument = function() {
  return this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 decimal_places = 2;
 * @return {number}
 */
proto.vega.NewMarketConfiguration.prototype.getDecimalPlaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.setDecimalPlaces = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string metadata = 3;
 * @return {!Array<string>}
 */
proto.vega.NewMarketConfiguration.prototype.getMetadataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.setMetadataList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.addMetadata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.clearMetadataList = function() {
  return this.setMetadataList([]);
};


/**
 * optional PriceMonitoringParameters price_monitoring_parameters = 4;
 * @return {?proto.vega.PriceMonitoringParameters}
 */
proto.vega.NewMarketConfiguration.prototype.getPriceMonitoringParameters = function() {
  return /** @type{?proto.vega.PriceMonitoringParameters} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.PriceMonitoringParameters, 4));
};


/**
 * @param {?proto.vega.PriceMonitoringParameters|undefined} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
*/
proto.vega.NewMarketConfiguration.prototype.setPriceMonitoringParameters = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.clearPriceMonitoringParameters = function() {
  return this.setPriceMonitoringParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasPriceMonitoringParameters = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LiquidityMonitoringParameters liquidity_monitoring_parameters = 5;
 * @return {?proto.vega.LiquidityMonitoringParameters}
 */
proto.vega.NewMarketConfiguration.prototype.getLiquidityMonitoringParameters = function() {
  return /** @type{?proto.vega.LiquidityMonitoringParameters} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.LiquidityMonitoringParameters, 5));
};


/**
 * @param {?proto.vega.LiquidityMonitoringParameters|undefined} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
*/
proto.vega.NewMarketConfiguration.prototype.setLiquidityMonitoringParameters = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.clearLiquidityMonitoringParameters = function() {
  return this.setLiquidityMonitoringParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasLiquidityMonitoringParameters = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SimpleModelParams simple = 100;
 * @return {?proto.vega.SimpleModelParams}
 */
proto.vega.NewMarketConfiguration.prototype.getSimple = function() {
  return /** @type{?proto.vega.SimpleModelParams} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.SimpleModelParams, 100));
};


/**
 * @param {?proto.vega.SimpleModelParams|undefined} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
*/
proto.vega.NewMarketConfiguration.prototype.setSimple = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.vega.NewMarketConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.clearSimple = function() {
  return this.setSimple(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasSimple = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional LogNormalRiskModel log_normal = 101;
 * @return {?proto.vega.LogNormalRiskModel}
 */
proto.vega.NewMarketConfiguration.prototype.getLogNormal = function() {
  return /** @type{?proto.vega.LogNormalRiskModel} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.LogNormalRiskModel, 101));
};


/**
 * @param {?proto.vega.LogNormalRiskModel|undefined} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
*/
proto.vega.NewMarketConfiguration.prototype.setLogNormal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.vega.NewMarketConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.clearLogNormal = function() {
  return this.setLogNormal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasLogNormal = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional int64 position_decimal_places = 6;
 * @return {number}
 */
proto.vega.NewMarketConfiguration.prototype.getPositionDecimalPlaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.setPositionDecimalPlaces = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string lp_price_range = 8;
 * @return {string}
 */
proto.vega.NewMarketConfiguration.prototype.getLpPriceRange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.NewMarketConfiguration} returns this
 */
proto.vega.NewMarketConfiguration.prototype.setLpPriceRange = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.NewMarket.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.NewMarket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.NewMarket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewMarket.toObject = function(includeInstance, msg) {
  var f, obj = {
    changes: (f = msg.getChanges()) && proto.vega.NewMarketConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.NewMarket}
 */
proto.vega.NewMarket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.NewMarket;
  return proto.vega.NewMarket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.NewMarket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.NewMarket}
 */
proto.vega.NewMarket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.NewMarketConfiguration;
      reader.readMessage(value,proto.vega.NewMarketConfiguration.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.NewMarket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.NewMarket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.NewMarket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewMarket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.NewMarketConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewMarketConfiguration changes = 1;
 * @return {?proto.vega.NewMarketConfiguration}
 */
proto.vega.NewMarket.prototype.getChanges = function() {
  return /** @type{?proto.vega.NewMarketConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.NewMarketConfiguration, 1));
};


/**
 * @param {?proto.vega.NewMarketConfiguration|undefined} value
 * @return {!proto.vega.NewMarket} returns this
*/
proto.vega.NewMarket.prototype.setChanges = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.NewMarket} returns this
 */
proto.vega.NewMarket.prototype.clearChanges = function() {
  return this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarket.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.UpdateMarket.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.UpdateMarket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.UpdateMarket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateMarket.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changes: (f = msg.getChanges()) && proto.vega.UpdateMarketConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.UpdateMarket}
 */
proto.vega.UpdateMarket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.UpdateMarket;
  return proto.vega.UpdateMarket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.UpdateMarket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.UpdateMarket}
 */
proto.vega.UpdateMarket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = new proto.vega.UpdateMarketConfiguration;
      reader.readMessage(value,proto.vega.UpdateMarketConfiguration.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.UpdateMarket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.UpdateMarket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.UpdateMarket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateMarket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vega.UpdateMarketConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.vega.UpdateMarket.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.UpdateMarket} returns this
 */
proto.vega.UpdateMarket.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UpdateMarketConfiguration changes = 2;
 * @return {?proto.vega.UpdateMarketConfiguration}
 */
proto.vega.UpdateMarket.prototype.getChanges = function() {
  return /** @type{?proto.vega.UpdateMarketConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.UpdateMarketConfiguration, 2));
};


/**
 * @param {?proto.vega.UpdateMarketConfiguration|undefined} value
 * @return {!proto.vega.UpdateMarket} returns this
*/
proto.vega.UpdateMarket.prototype.setChanges = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateMarket} returns this
 */
proto.vega.UpdateMarket.prototype.clearChanges = function() {
  return this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateMarket.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.UpdateMarketConfiguration.repeatedFields_ = [2];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.UpdateMarketConfiguration.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.vega.UpdateMarketConfiguration.RiskParametersCase = {
  RISK_PARAMETERS_NOT_SET: 0,
  SIMPLE: 100,
  LOG_NORMAL: 101
};

/**
 * @return {proto.vega.UpdateMarketConfiguration.RiskParametersCase}
 */
proto.vega.UpdateMarketConfiguration.prototype.getRiskParametersCase = function() {
  return /** @type {proto.vega.UpdateMarketConfiguration.RiskParametersCase} */(jspb.Message.computeOneofCase(this, proto.vega.UpdateMarketConfiguration.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.UpdateMarketConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.UpdateMarketConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.UpdateMarketConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateMarketConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: (f = msg.getInstrument()) && proto.vega.UpdateInstrumentConfiguration.toObject(includeInstance, f),
    metadataList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    priceMonitoringParameters: (f = msg.getPriceMonitoringParameters()) && vega_markets_pb.PriceMonitoringParameters.toObject(includeInstance, f),
    liquidityMonitoringParameters: (f = msg.getLiquidityMonitoringParameters()) && vega_markets_pb.LiquidityMonitoringParameters.toObject(includeInstance, f),
    simple: (f = msg.getSimple()) && vega_markets_pb.SimpleModelParams.toObject(includeInstance, f),
    logNormal: (f = msg.getLogNormal()) && vega_markets_pb.LogNormalRiskModel.toObject(includeInstance, f),
    lpPriceRange: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.UpdateMarketConfiguration}
 */
proto.vega.UpdateMarketConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.UpdateMarketConfiguration;
  return proto.vega.UpdateMarketConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.UpdateMarketConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.UpdateMarketConfiguration}
 */
proto.vega.UpdateMarketConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.UpdateInstrumentConfiguration;
      reader.readMessage(value,proto.vega.UpdateInstrumentConfiguration.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMetadata(value);
      break;
    case 3:
      var value = new vega_markets_pb.PriceMonitoringParameters;
      reader.readMessage(value,vega_markets_pb.PriceMonitoringParameters.deserializeBinaryFromReader);
      msg.setPriceMonitoringParameters(value);
      break;
    case 4:
      var value = new vega_markets_pb.LiquidityMonitoringParameters;
      reader.readMessage(value,vega_markets_pb.LiquidityMonitoringParameters.deserializeBinaryFromReader);
      msg.setLiquidityMonitoringParameters(value);
      break;
    case 100:
      var value = new vega_markets_pb.SimpleModelParams;
      reader.readMessage(value,vega_markets_pb.SimpleModelParams.deserializeBinaryFromReader);
      msg.setSimple(value);
      break;
    case 101:
      var value = new vega_markets_pb.LogNormalRiskModel;
      reader.readMessage(value,vega_markets_pb.LogNormalRiskModel.deserializeBinaryFromReader);
      msg.setLogNormal(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLpPriceRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.UpdateMarketConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.UpdateMarketConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.UpdateMarketConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateMarketConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.UpdateInstrumentConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPriceMonitoringParameters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vega_markets_pb.PriceMonitoringParameters.serializeBinaryToWriter
    );
  }
  f = message.getLiquidityMonitoringParameters();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vega_markets_pb.LiquidityMonitoringParameters.serializeBinaryToWriter
    );
  }
  f = message.getSimple();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      vega_markets_pb.SimpleModelParams.serializeBinaryToWriter
    );
  }
  f = message.getLogNormal();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      vega_markets_pb.LogNormalRiskModel.serializeBinaryToWriter
    );
  }
  f = message.getLpPriceRange();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional UpdateInstrumentConfiguration instrument = 1;
 * @return {?proto.vega.UpdateInstrumentConfiguration}
 */
proto.vega.UpdateMarketConfiguration.prototype.getInstrument = function() {
  return /** @type{?proto.vega.UpdateInstrumentConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.UpdateInstrumentConfiguration, 1));
};


/**
 * @param {?proto.vega.UpdateInstrumentConfiguration|undefined} value
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
*/
proto.vega.UpdateMarketConfiguration.prototype.setInstrument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.clearInstrument = function() {
  return this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateMarketConfiguration.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string metadata = 2;
 * @return {!Array<string>}
 */
proto.vega.UpdateMarketConfiguration.prototype.getMetadataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.setMetadataList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.addMetadata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.clearMetadataList = function() {
  return this.setMetadataList([]);
};


/**
 * optional PriceMonitoringParameters price_monitoring_parameters = 3;
 * @return {?proto.vega.PriceMonitoringParameters}
 */
proto.vega.UpdateMarketConfiguration.prototype.getPriceMonitoringParameters = function() {
  return /** @type{?proto.vega.PriceMonitoringParameters} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.PriceMonitoringParameters, 3));
};


/**
 * @param {?proto.vega.PriceMonitoringParameters|undefined} value
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
*/
proto.vega.UpdateMarketConfiguration.prototype.setPriceMonitoringParameters = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.clearPriceMonitoringParameters = function() {
  return this.setPriceMonitoringParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateMarketConfiguration.prototype.hasPriceMonitoringParameters = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LiquidityMonitoringParameters liquidity_monitoring_parameters = 4;
 * @return {?proto.vega.LiquidityMonitoringParameters}
 */
proto.vega.UpdateMarketConfiguration.prototype.getLiquidityMonitoringParameters = function() {
  return /** @type{?proto.vega.LiquidityMonitoringParameters} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.LiquidityMonitoringParameters, 4));
};


/**
 * @param {?proto.vega.LiquidityMonitoringParameters|undefined} value
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
*/
proto.vega.UpdateMarketConfiguration.prototype.setLiquidityMonitoringParameters = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.clearLiquidityMonitoringParameters = function() {
  return this.setLiquidityMonitoringParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateMarketConfiguration.prototype.hasLiquidityMonitoringParameters = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SimpleModelParams simple = 100;
 * @return {?proto.vega.SimpleModelParams}
 */
proto.vega.UpdateMarketConfiguration.prototype.getSimple = function() {
  return /** @type{?proto.vega.SimpleModelParams} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.SimpleModelParams, 100));
};


/**
 * @param {?proto.vega.SimpleModelParams|undefined} value
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
*/
proto.vega.UpdateMarketConfiguration.prototype.setSimple = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.vega.UpdateMarketConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.clearSimple = function() {
  return this.setSimple(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateMarketConfiguration.prototype.hasSimple = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional LogNormalRiskModel log_normal = 101;
 * @return {?proto.vega.LogNormalRiskModel}
 */
proto.vega.UpdateMarketConfiguration.prototype.getLogNormal = function() {
  return /** @type{?proto.vega.LogNormalRiskModel} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.LogNormalRiskModel, 101));
};


/**
 * @param {?proto.vega.LogNormalRiskModel|undefined} value
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
*/
proto.vega.UpdateMarketConfiguration.prototype.setLogNormal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.vega.UpdateMarketConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.clearLogNormal = function() {
  return this.setLogNormal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateMarketConfiguration.prototype.hasLogNormal = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional string lp_price_range = 5;
 * @return {string}
 */
proto.vega.UpdateMarketConfiguration.prototype.getLpPriceRange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.UpdateMarketConfiguration} returns this
 */
proto.vega.UpdateMarketConfiguration.prototype.setLpPriceRange = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.UpdateInstrumentConfiguration.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.vega.UpdateInstrumentConfiguration.ProductCase = {
  PRODUCT_NOT_SET: 0,
  FUTURE: 100
};

/**
 * @return {proto.vega.UpdateInstrumentConfiguration.ProductCase}
 */
proto.vega.UpdateInstrumentConfiguration.prototype.getProductCase = function() {
  return /** @type {proto.vega.UpdateInstrumentConfiguration.ProductCase} */(jspb.Message.computeOneofCase(this, proto.vega.UpdateInstrumentConfiguration.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.UpdateInstrumentConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.UpdateInstrumentConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.UpdateInstrumentConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateInstrumentConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    future: (f = msg.getFuture()) && proto.vega.UpdateFutureProduct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.UpdateInstrumentConfiguration}
 */
proto.vega.UpdateInstrumentConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.UpdateInstrumentConfiguration;
  return proto.vega.UpdateInstrumentConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.UpdateInstrumentConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.UpdateInstrumentConfiguration}
 */
proto.vega.UpdateInstrumentConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 100:
      var value = new proto.vega.UpdateFutureProduct;
      reader.readMessage(value,proto.vega.UpdateFutureProduct.deserializeBinaryFromReader);
      msg.setFuture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.UpdateInstrumentConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.UpdateInstrumentConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.UpdateInstrumentConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateInstrumentConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFuture();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.UpdateFutureProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.vega.UpdateInstrumentConfiguration.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.UpdateInstrumentConfiguration} returns this
 */
proto.vega.UpdateInstrumentConfiguration.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UpdateFutureProduct future = 100;
 * @return {?proto.vega.UpdateFutureProduct}
 */
proto.vega.UpdateInstrumentConfiguration.prototype.getFuture = function() {
  return /** @type{?proto.vega.UpdateFutureProduct} */ (
    jspb.Message.getWrapperField(this, proto.vega.UpdateFutureProduct, 100));
};


/**
 * @param {?proto.vega.UpdateFutureProduct|undefined} value
 * @return {!proto.vega.UpdateInstrumentConfiguration} returns this
*/
proto.vega.UpdateInstrumentConfiguration.prototype.setFuture = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.vega.UpdateInstrumentConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateInstrumentConfiguration} returns this
 */
proto.vega.UpdateInstrumentConfiguration.prototype.clearFuture = function() {
  return this.setFuture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateInstrumentConfiguration.prototype.hasFuture = function() {
  return jspb.Message.getField(this, 100) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.UpdateFutureProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.UpdateFutureProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.UpdateFutureProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateFutureProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    quoteName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataSourceSpecForSettlementData: (f = msg.getDataSourceSpecForSettlementData()) && vega_data_source_pb.DataSourceDefinition.toObject(includeInstance, f),
    dataSourceSpecForTradingTermination: (f = msg.getDataSourceSpecForTradingTermination()) && vega_data_source_pb.DataSourceDefinition.toObject(includeInstance, f),
    dataSourceSpecBinding: (f = msg.getDataSourceSpecBinding()) && vega_markets_pb.DataSourceSpecToFutureBinding.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.UpdateFutureProduct}
 */
proto.vega.UpdateFutureProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.UpdateFutureProduct;
  return proto.vega.UpdateFutureProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.UpdateFutureProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.UpdateFutureProduct}
 */
proto.vega.UpdateFutureProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteName(value);
      break;
    case 2:
      var value = new vega_data_source_pb.DataSourceDefinition;
      reader.readMessage(value,vega_data_source_pb.DataSourceDefinition.deserializeBinaryFromReader);
      msg.setDataSourceSpecForSettlementData(value);
      break;
    case 3:
      var value = new vega_data_source_pb.DataSourceDefinition;
      reader.readMessage(value,vega_data_source_pb.DataSourceDefinition.deserializeBinaryFromReader);
      msg.setDataSourceSpecForTradingTermination(value);
      break;
    case 4:
      var value = new vega_markets_pb.DataSourceSpecToFutureBinding;
      reader.readMessage(value,vega_markets_pb.DataSourceSpecToFutureBinding.deserializeBinaryFromReader);
      msg.setDataSourceSpecBinding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.UpdateFutureProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.UpdateFutureProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.UpdateFutureProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateFutureProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuoteName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataSourceSpecForSettlementData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vega_data_source_pb.DataSourceDefinition.serializeBinaryToWriter
    );
  }
  f = message.getDataSourceSpecForTradingTermination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vega_data_source_pb.DataSourceDefinition.serializeBinaryToWriter
    );
  }
  f = message.getDataSourceSpecBinding();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vega_markets_pb.DataSourceSpecToFutureBinding.serializeBinaryToWriter
    );
  }
};


/**
 * optional string quote_name = 1;
 * @return {string}
 */
proto.vega.UpdateFutureProduct.prototype.getQuoteName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.UpdateFutureProduct} returns this
 */
proto.vega.UpdateFutureProduct.prototype.setQuoteName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DataSourceDefinition data_source_spec_for_settlement_data = 2;
 * @return {?proto.vega.DataSourceDefinition}
 */
proto.vega.UpdateFutureProduct.prototype.getDataSourceSpecForSettlementData = function() {
  return /** @type{?proto.vega.DataSourceDefinition} */ (
    jspb.Message.getWrapperField(this, vega_data_source_pb.DataSourceDefinition, 2));
};


/**
 * @param {?proto.vega.DataSourceDefinition|undefined} value
 * @return {!proto.vega.UpdateFutureProduct} returns this
*/
proto.vega.UpdateFutureProduct.prototype.setDataSourceSpecForSettlementData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateFutureProduct} returns this
 */
proto.vega.UpdateFutureProduct.prototype.clearDataSourceSpecForSettlementData = function() {
  return this.setDataSourceSpecForSettlementData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateFutureProduct.prototype.hasDataSourceSpecForSettlementData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DataSourceDefinition data_source_spec_for_trading_termination = 3;
 * @return {?proto.vega.DataSourceDefinition}
 */
proto.vega.UpdateFutureProduct.prototype.getDataSourceSpecForTradingTermination = function() {
  return /** @type{?proto.vega.DataSourceDefinition} */ (
    jspb.Message.getWrapperField(this, vega_data_source_pb.DataSourceDefinition, 3));
};


/**
 * @param {?proto.vega.DataSourceDefinition|undefined} value
 * @return {!proto.vega.UpdateFutureProduct} returns this
*/
proto.vega.UpdateFutureProduct.prototype.setDataSourceSpecForTradingTermination = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateFutureProduct} returns this
 */
proto.vega.UpdateFutureProduct.prototype.clearDataSourceSpecForTradingTermination = function() {
  return this.setDataSourceSpecForTradingTermination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateFutureProduct.prototype.hasDataSourceSpecForTradingTermination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataSourceSpecToFutureBinding data_source_spec_binding = 4;
 * @return {?proto.vega.DataSourceSpecToFutureBinding}
 */
proto.vega.UpdateFutureProduct.prototype.getDataSourceSpecBinding = function() {
  return /** @type{?proto.vega.DataSourceSpecToFutureBinding} */ (
    jspb.Message.getWrapperField(this, vega_markets_pb.DataSourceSpecToFutureBinding, 4));
};


/**
 * @param {?proto.vega.DataSourceSpecToFutureBinding|undefined} value
 * @return {!proto.vega.UpdateFutureProduct} returns this
*/
proto.vega.UpdateFutureProduct.prototype.setDataSourceSpecBinding = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateFutureProduct} returns this
 */
proto.vega.UpdateFutureProduct.prototype.clearDataSourceSpecBinding = function() {
  return this.setDataSourceSpecBinding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateFutureProduct.prototype.hasDataSourceSpecBinding = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.UpdateNetworkParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.UpdateNetworkParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.UpdateNetworkParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateNetworkParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    changes: (f = msg.getChanges()) && vega_vega_pb.NetworkParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.UpdateNetworkParameter}
 */
proto.vega.UpdateNetworkParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.UpdateNetworkParameter;
  return proto.vega.UpdateNetworkParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.UpdateNetworkParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.UpdateNetworkParameter}
 */
proto.vega.UpdateNetworkParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vega_vega_pb.NetworkParameter;
      reader.readMessage(value,vega_vega_pb.NetworkParameter.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.UpdateNetworkParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.UpdateNetworkParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.UpdateNetworkParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateNetworkParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vega_vega_pb.NetworkParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional NetworkParameter changes = 1;
 * @return {?proto.vega.NetworkParameter}
 */
proto.vega.UpdateNetworkParameter.prototype.getChanges = function() {
  return /** @type{?proto.vega.NetworkParameter} */ (
    jspb.Message.getWrapperField(this, vega_vega_pb.NetworkParameter, 1));
};


/**
 * @param {?proto.vega.NetworkParameter|undefined} value
 * @return {!proto.vega.UpdateNetworkParameter} returns this
*/
proto.vega.UpdateNetworkParameter.prototype.setChanges = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateNetworkParameter} returns this
 */
proto.vega.UpdateNetworkParameter.prototype.clearChanges = function() {
  return this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateNetworkParameter.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.NewAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.NewAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.NewAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    changes: (f = msg.getChanges()) && vega_assets_pb.AssetDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.NewAsset}
 */
proto.vega.NewAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.NewAsset;
  return proto.vega.NewAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.NewAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.NewAsset}
 */
proto.vega.NewAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vega_assets_pb.AssetDetails;
      reader.readMessage(value,vega_assets_pb.AssetDetails.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.NewAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.NewAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.NewAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vega_assets_pb.AssetDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssetDetails changes = 1;
 * @return {?proto.vega.AssetDetails}
 */
proto.vega.NewAsset.prototype.getChanges = function() {
  return /** @type{?proto.vega.AssetDetails} */ (
    jspb.Message.getWrapperField(this, vega_assets_pb.AssetDetails, 1));
};


/**
 * @param {?proto.vega.AssetDetails|undefined} value
 * @return {!proto.vega.NewAsset} returns this
*/
proto.vega.NewAsset.prototype.setChanges = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.NewAsset} returns this
 */
proto.vega.NewAsset.prototype.clearChanges = function() {
  return this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewAsset.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.UpdateAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.UpdateAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.UpdateAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changes: (f = msg.getChanges()) && vega_assets_pb.AssetDetailsUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.UpdateAsset}
 */
proto.vega.UpdateAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.UpdateAsset;
  return proto.vega.UpdateAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.UpdateAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.UpdateAsset}
 */
proto.vega.UpdateAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 2:
      var value = new vega_assets_pb.AssetDetailsUpdate;
      reader.readMessage(value,vega_assets_pb.AssetDetailsUpdate.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.UpdateAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.UpdateAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.UpdateAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vega_assets_pb.AssetDetailsUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string asset_id = 1;
 * @return {string}
 */
proto.vega.UpdateAsset.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.UpdateAsset} returns this
 */
proto.vega.UpdateAsset.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AssetDetailsUpdate changes = 2;
 * @return {?proto.vega.AssetDetailsUpdate}
 */
proto.vega.UpdateAsset.prototype.getChanges = function() {
  return /** @type{?proto.vega.AssetDetailsUpdate} */ (
    jspb.Message.getWrapperField(this, vega_assets_pb.AssetDetailsUpdate, 2));
};


/**
 * @param {?proto.vega.AssetDetailsUpdate|undefined} value
 * @return {!proto.vega.UpdateAsset} returns this
*/
proto.vega.UpdateAsset.prototype.setChanges = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.UpdateAsset} returns this
 */
proto.vega.UpdateAsset.prototype.clearChanges = function() {
  return this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateAsset.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.NewFreeform.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.NewFreeform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.NewFreeform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewFreeform.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.NewFreeform}
 */
proto.vega.NewFreeform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.NewFreeform;
  return proto.vega.NewFreeform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.NewFreeform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.NewFreeform}
 */
proto.vega.NewFreeform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.NewFreeform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.NewFreeform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.NewFreeform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewFreeform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.ProposalTerms.oneofGroups_ = [[101,102,103,104,105,106]];

/**
 * @enum {number}
 */
proto.vega.ProposalTerms.ChangeCase = {
  CHANGE_NOT_SET: 0,
  UPDATE_MARKET: 101,
  NEW_MARKET: 102,
  UPDATE_NETWORK_PARAMETER: 103,
  NEW_ASSET: 104,
  NEW_FREEFORM: 105,
  UPDATE_ASSET: 106
};

/**
 * @return {proto.vega.ProposalTerms.ChangeCase}
 */
proto.vega.ProposalTerms.prototype.getChangeCase = function() {
  return /** @type {proto.vega.ProposalTerms.ChangeCase} */(jspb.Message.computeOneofCase(this, proto.vega.ProposalTerms.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ProposalTerms.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ProposalTerms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ProposalTerms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ProposalTerms.toObject = function(includeInstance, msg) {
  var f, obj = {
    closingTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enactmentTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    validationTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    updateMarket: (f = msg.getUpdateMarket()) && proto.vega.UpdateMarket.toObject(includeInstance, f),
    newMarket: (f = msg.getNewMarket()) && proto.vega.NewMarket.toObject(includeInstance, f),
    updateNetworkParameter: (f = msg.getUpdateNetworkParameter()) && proto.vega.UpdateNetworkParameter.toObject(includeInstance, f),
    newAsset: (f = msg.getNewAsset()) && proto.vega.NewAsset.toObject(includeInstance, f),
    newFreeform: (f = msg.getNewFreeform()) && proto.vega.NewFreeform.toObject(includeInstance, f),
    updateAsset: (f = msg.getUpdateAsset()) && proto.vega.UpdateAsset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ProposalTerms}
 */
proto.vega.ProposalTerms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ProposalTerms;
  return proto.vega.ProposalTerms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ProposalTerms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ProposalTerms}
 */
proto.vega.ProposalTerms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClosingTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEnactmentTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidationTimestamp(value);
      break;
    case 101:
      var value = new proto.vega.UpdateMarket;
      reader.readMessage(value,proto.vega.UpdateMarket.deserializeBinaryFromReader);
      msg.setUpdateMarket(value);
      break;
    case 102:
      var value = new proto.vega.NewMarket;
      reader.readMessage(value,proto.vega.NewMarket.deserializeBinaryFromReader);
      msg.setNewMarket(value);
      break;
    case 103:
      var value = new proto.vega.UpdateNetworkParameter;
      reader.readMessage(value,proto.vega.UpdateNetworkParameter.deserializeBinaryFromReader);
      msg.setUpdateNetworkParameter(value);
      break;
    case 104:
      var value = new proto.vega.NewAsset;
      reader.readMessage(value,proto.vega.NewAsset.deserializeBinaryFromReader);
      msg.setNewAsset(value);
      break;
    case 105:
      var value = new proto.vega.NewFreeform;
      reader.readMessage(value,proto.vega.NewFreeform.deserializeBinaryFromReader);
      msg.setNewFreeform(value);
      break;
    case 106:
      var value = new proto.vega.UpdateAsset;
      reader.readMessage(value,proto.vega.UpdateAsset.deserializeBinaryFromReader);
      msg.setUpdateAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ProposalTerms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ProposalTerms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ProposalTerms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ProposalTerms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClosingTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEnactmentTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getValidationTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUpdateMarket();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.vega.UpdateMarket.serializeBinaryToWriter
    );
  }
  f = message.getNewMarket();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.vega.NewMarket.serializeBinaryToWriter
    );
  }
  f = message.getUpdateNetworkParameter();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.vega.UpdateNetworkParameter.serializeBinaryToWriter
    );
  }
  f = message.getNewAsset();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.vega.NewAsset.serializeBinaryToWriter
    );
  }
  f = message.getNewFreeform();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.vega.NewFreeform.serializeBinaryToWriter
    );
  }
  f = message.getUpdateAsset();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.vega.UpdateAsset.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 closing_timestamp = 1;
 * @return {number}
 */
proto.vega.ProposalTerms.prototype.getClosingTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.setClosingTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 enactment_timestamp = 2;
 * @return {number}
 */
proto.vega.ProposalTerms.prototype.getEnactmentTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.setEnactmentTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 validation_timestamp = 3;
 * @return {number}
 */
proto.vega.ProposalTerms.prototype.getValidationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.setValidationTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional UpdateMarket update_market = 101;
 * @return {?proto.vega.UpdateMarket}
 */
proto.vega.ProposalTerms.prototype.getUpdateMarket = function() {
  return /** @type{?proto.vega.UpdateMarket} */ (
    jspb.Message.getWrapperField(this, proto.vega.UpdateMarket, 101));
};


/**
 * @param {?proto.vega.UpdateMarket|undefined} value
 * @return {!proto.vega.ProposalTerms} returns this
*/
proto.vega.ProposalTerms.prototype.setUpdateMarket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.clearUpdateMarket = function() {
  return this.setUpdateMarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasUpdateMarket = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional NewMarket new_market = 102;
 * @return {?proto.vega.NewMarket}
 */
proto.vega.ProposalTerms.prototype.getNewMarket = function() {
  return /** @type{?proto.vega.NewMarket} */ (
    jspb.Message.getWrapperField(this, proto.vega.NewMarket, 102));
};


/**
 * @param {?proto.vega.NewMarket|undefined} value
 * @return {!proto.vega.ProposalTerms} returns this
*/
proto.vega.ProposalTerms.prototype.setNewMarket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.clearNewMarket = function() {
  return this.setNewMarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasNewMarket = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional UpdateNetworkParameter update_network_parameter = 103;
 * @return {?proto.vega.UpdateNetworkParameter}
 */
proto.vega.ProposalTerms.prototype.getUpdateNetworkParameter = function() {
  return /** @type{?proto.vega.UpdateNetworkParameter} */ (
    jspb.Message.getWrapperField(this, proto.vega.UpdateNetworkParameter, 103));
};


/**
 * @param {?proto.vega.UpdateNetworkParameter|undefined} value
 * @return {!proto.vega.ProposalTerms} returns this
*/
proto.vega.ProposalTerms.prototype.setUpdateNetworkParameter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.clearUpdateNetworkParameter = function() {
  return this.setUpdateNetworkParameter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasUpdateNetworkParameter = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional NewAsset new_asset = 104;
 * @return {?proto.vega.NewAsset}
 */
proto.vega.ProposalTerms.prototype.getNewAsset = function() {
  return /** @type{?proto.vega.NewAsset} */ (
    jspb.Message.getWrapperField(this, proto.vega.NewAsset, 104));
};


/**
 * @param {?proto.vega.NewAsset|undefined} value
 * @return {!proto.vega.ProposalTerms} returns this
*/
proto.vega.ProposalTerms.prototype.setNewAsset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.clearNewAsset = function() {
  return this.setNewAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasNewAsset = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional NewFreeform new_freeform = 105;
 * @return {?proto.vega.NewFreeform}
 */
proto.vega.ProposalTerms.prototype.getNewFreeform = function() {
  return /** @type{?proto.vega.NewFreeform} */ (
    jspb.Message.getWrapperField(this, proto.vega.NewFreeform, 105));
};


/**
 * @param {?proto.vega.NewFreeform|undefined} value
 * @return {!proto.vega.ProposalTerms} returns this
*/
proto.vega.ProposalTerms.prototype.setNewFreeform = function(value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.clearNewFreeform = function() {
  return this.setNewFreeform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasNewFreeform = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional UpdateAsset update_asset = 106;
 * @return {?proto.vega.UpdateAsset}
 */
proto.vega.ProposalTerms.prototype.getUpdateAsset = function() {
  return /** @type{?proto.vega.UpdateAsset} */ (
    jspb.Message.getWrapperField(this, proto.vega.UpdateAsset, 106));
};


/**
 * @param {?proto.vega.UpdateAsset|undefined} value
 * @return {!proto.vega.ProposalTerms} returns this
*/
proto.vega.ProposalTerms.prototype.setUpdateAsset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 106, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.ProposalTerms} returns this
 */
proto.vega.ProposalTerms.prototype.clearUpdateAsset = function() {
  return this.setUpdateAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasUpdateAsset = function() {
  return jspb.Message.getField(this, 106) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ProposalRationale.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ProposalRationale.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ProposalRationale} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ProposalRationale.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ProposalRationale}
 */
proto.vega.ProposalRationale.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ProposalRationale;
  return proto.vega.ProposalRationale.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ProposalRationale} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ProposalRationale}
 */
proto.vega.ProposalRationale.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ProposalRationale.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ProposalRationale.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ProposalRationale} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ProposalRationale.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.vega.ProposalRationale.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ProposalRationale} returns this
 */
proto.vega.ProposalRationale.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.vega.ProposalRationale.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.ProposalRationale} returns this
 */
proto.vega.ProposalRationale.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.GovernanceData.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.GovernanceData.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.GovernanceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.GovernanceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.GovernanceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && proto.vega.Proposal.toObject(includeInstance, f),
    yesList: jspb.Message.toObjectList(msg.getYesList(),
    proto.vega.Vote.toObject, includeInstance),
    noList: jspb.Message.toObjectList(msg.getNoList(),
    proto.vega.Vote.toObject, includeInstance),
    yesPartyMap: (f = msg.getYesPartyMap()) ? f.toObject(includeInstance, proto.vega.Vote.toObject) : [],
    noPartyMap: (f = msg.getNoPartyMap()) ? f.toObject(includeInstance, proto.vega.Vote.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.GovernanceData}
 */
proto.vega.GovernanceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.GovernanceData;
  return proto.vega.GovernanceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.GovernanceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.GovernanceData}
 */
proto.vega.GovernanceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.Proposal;
      reader.readMessage(value,proto.vega.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 2:
      var value = new proto.vega.Vote;
      reader.readMessage(value,proto.vega.Vote.deserializeBinaryFromReader);
      msg.addYes(value);
      break;
    case 3:
      var value = new proto.vega.Vote;
      reader.readMessage(value,proto.vega.Vote.deserializeBinaryFromReader);
      msg.addNo(value);
      break;
    case 4:
      var value = msg.getYesPartyMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vega.Vote.deserializeBinaryFromReader, "", new proto.vega.Vote());
         });
      break;
    case 5:
      var value = msg.getNoPartyMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vega.Vote.deserializeBinaryFromReader, "", new proto.vega.Vote());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.GovernanceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.GovernanceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.GovernanceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.GovernanceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getYesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vega.Vote.serializeBinaryToWriter
    );
  }
  f = message.getNoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.vega.Vote.serializeBinaryToWriter
    );
  }
  f = message.getYesPartyMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vega.Vote.serializeBinaryToWriter);
  }
  f = message.getNoPartyMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vega.Vote.serializeBinaryToWriter);
  }
};


/**
 * optional Proposal proposal = 1;
 * @return {?proto.vega.Proposal}
 */
proto.vega.GovernanceData.prototype.getProposal = function() {
  return /** @type{?proto.vega.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.vega.Proposal, 1));
};


/**
 * @param {?proto.vega.Proposal|undefined} value
 * @return {!proto.vega.GovernanceData} returns this
*/
proto.vega.GovernanceData.prototype.setProposal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.GovernanceData} returns this
 */
proto.vega.GovernanceData.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.GovernanceData.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Vote yes = 2;
 * @return {!Array<!proto.vega.Vote>}
 */
proto.vega.GovernanceData.prototype.getYesList = function() {
  return /** @type{!Array<!proto.vega.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.Vote, 2));
};


/**
 * @param {!Array<!proto.vega.Vote>} value
 * @return {!proto.vega.GovernanceData} returns this
*/
proto.vega.GovernanceData.prototype.setYesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vega.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.Vote}
 */
proto.vega.GovernanceData.prototype.addYes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vega.Vote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.GovernanceData} returns this
 */
proto.vega.GovernanceData.prototype.clearYesList = function() {
  return this.setYesList([]);
};


/**
 * repeated Vote no = 3;
 * @return {!Array<!proto.vega.Vote>}
 */
proto.vega.GovernanceData.prototype.getNoList = function() {
  return /** @type{!Array<!proto.vega.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.Vote, 3));
};


/**
 * @param {!Array<!proto.vega.Vote>} value
 * @return {!proto.vega.GovernanceData} returns this
*/
proto.vega.GovernanceData.prototype.setNoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.vega.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.Vote}
 */
proto.vega.GovernanceData.prototype.addNo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.vega.Vote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.GovernanceData} returns this
 */
proto.vega.GovernanceData.prototype.clearNoList = function() {
  return this.setNoList([]);
};


/**
 * map<string, Vote> yes_party = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vega.Vote>}
 */
proto.vega.GovernanceData.prototype.getYesPartyMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vega.Vote>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.vega.Vote));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vega.GovernanceData} returns this
 */
proto.vega.GovernanceData.prototype.clearYesPartyMap = function() {
  this.getYesPartyMap().clear();
  return this;};


/**
 * map<string, Vote> no_party = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vega.Vote>}
 */
proto.vega.GovernanceData.prototype.getNoPartyMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vega.Vote>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.vega.Vote));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vega.GovernanceData} returns this
 */
proto.vega.GovernanceData.prototype.clearNoPartyMap = function() {
  this.getNoPartyMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reference: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partyId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    terms: (f = msg.getTerms()) && proto.vega.ProposalTerms.toObject(includeInstance, f),
    reason: jspb.Message.getFieldWithDefault(msg, 7, 0),
    errorDetails: jspb.Message.getFieldWithDefault(msg, 8, ""),
    rationale: (f = msg.getRationale()) && proto.vega.ProposalRationale.toObject(includeInstance, f),
    requiredParticipation: jspb.Message.getFieldWithDefault(msg, 10, ""),
    requiredMajority: jspb.Message.getFieldWithDefault(msg, 11, ""),
    requiredLiquidityProviderParticipation: jspb.Message.getFieldWithDefault(msg, 12, ""),
    requiredLiquidityProviderMajority: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Proposal}
 */
proto.vega.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Proposal;
  return proto.vega.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Proposal}
 */
proto.vega.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReference(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartyId(value);
      break;
    case 4:
      var value = /** @type {!proto.vega.Proposal.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = new proto.vega.ProposalTerms;
      reader.readMessage(value,proto.vega.ProposalTerms.deserializeBinaryFromReader);
      msg.setTerms(value);
      break;
    case 7:
      var value = /** @type {!proto.vega.ProposalError} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDetails(value);
      break;
    case 9:
      var value = new proto.vega.ProposalRationale;
      reader.readMessage(value,proto.vega.ProposalRationale.deserializeBinaryFromReader);
      msg.setRationale(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequiredParticipation(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequiredMajority(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequiredLiquidityProviderParticipation(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequiredLiquidityProviderMajority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartyId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTerms();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.vega.ProposalTerms.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.vega.ProposalError} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRationale();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.vega.ProposalRationale.serializeBinaryToWriter
    );
  }
  f = message.getRequiredParticipation();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRequiredMajority();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vega.Proposal.State = {
  STATE_UNSPECIFIED: 0,
  STATE_FAILED: 1,
  STATE_OPEN: 2,
  STATE_PASSED: 3,
  STATE_REJECTED: 4,
  STATE_DECLINED: 5,
  STATE_ENACTED: 6,
  STATE_WAITING_FOR_NODE_VOTE: 7
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.Proposal.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reference = 2;
 * @return {string}
 */
proto.vega.Proposal.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setReference = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string party_id = 3;
 * @return {string}
 */
proto.vega.Proposal.prototype.getPartyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setPartyId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional State state = 4;
 * @return {!proto.vega.Proposal.State}
 */
proto.vega.Proposal.prototype.getState = function() {
  return /** @type {!proto.vega.Proposal.State} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.vega.Proposal.State} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.vega.Proposal.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ProposalTerms terms = 6;
 * @return {?proto.vega.ProposalTerms}
 */
proto.vega.Proposal.prototype.getTerms = function() {
  return /** @type{?proto.vega.ProposalTerms} */ (
    jspb.Message.getWrapperField(this, proto.vega.ProposalTerms, 6));
};


/**
 * @param {?proto.vega.ProposalTerms|undefined} value
 * @return {!proto.vega.Proposal} returns this
*/
proto.vega.Proposal.prototype.setTerms = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.clearTerms = function() {
  return this.setTerms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Proposal.prototype.hasTerms = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ProposalError reason = 7;
 * @return {!proto.vega.ProposalError}
 */
proto.vega.Proposal.prototype.getReason = function() {
  return /** @type {!proto.vega.ProposalError} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.vega.ProposalError} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.clearReason = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Proposal.prototype.hasReason = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string error_details = 8;
 * @return {string}
 */
proto.vega.Proposal.prototype.getErrorDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setErrorDetails = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.clearErrorDetails = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Proposal.prototype.hasErrorDetails = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ProposalRationale rationale = 9;
 * @return {?proto.vega.ProposalRationale}
 */
proto.vega.Proposal.prototype.getRationale = function() {
  return /** @type{?proto.vega.ProposalRationale} */ (
    jspb.Message.getWrapperField(this, proto.vega.ProposalRationale, 9));
};


/**
 * @param {?proto.vega.ProposalRationale|undefined} value
 * @return {!proto.vega.Proposal} returns this
*/
proto.vega.Proposal.prototype.setRationale = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.clearRationale = function() {
  return this.setRationale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Proposal.prototype.hasRationale = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string required_participation = 10;
 * @return {string}
 */
proto.vega.Proposal.prototype.getRequiredParticipation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setRequiredParticipation = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string required_majority = 11;
 * @return {string}
 */
proto.vega.Proposal.prototype.getRequiredMajority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setRequiredMajority = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string required_liquidity_provider_participation = 12;
 * @return {string}
 */
proto.vega.Proposal.prototype.getRequiredLiquidityProviderParticipation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setRequiredLiquidityProviderParticipation = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.clearRequiredLiquidityProviderParticipation = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Proposal.prototype.hasRequiredLiquidityProviderParticipation = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string required_liquidity_provider_majority = 13;
 * @return {string}
 */
proto.vega.Proposal.prototype.getRequiredLiquidityProviderMajority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.setRequiredLiquidityProviderMajority = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vega.Proposal} returns this
 */
proto.vega.Proposal.prototype.clearRequiredLiquidityProviderMajority = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Proposal.prototype.hasRequiredLiquidityProviderMajority = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    partyId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposalId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalGovernanceTokenBalance: jspb.Message.getFieldWithDefault(msg, 5, ""),
    totalGovernanceTokenWeight: jspb.Message.getFieldWithDefault(msg, 6, ""),
    totalEquityLikeShareWeight: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Vote}
 */
proto.vega.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Vote;
  return proto.vega.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Vote}
 */
proto.vega.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartyId(value);
      break;
    case 2:
      var value = /** @type {!proto.vega.Vote.Value} */ (reader.readEnum());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposalId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalGovernanceTokenBalance(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalGovernanceTokenWeight(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalEquityLikeShareWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProposalId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTotalGovernanceTokenBalance();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTotalGovernanceTokenWeight();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTotalEquityLikeShareWeight();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vega.Vote.Value = {
  VALUE_UNSPECIFIED: 0,
  VALUE_NO: 1,
  VALUE_YES: 2
};

/**
 * optional string party_id = 1;
 * @return {string}
 */
proto.vega.Vote.prototype.getPartyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Vote} returns this
 */
proto.vega.Vote.prototype.setPartyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {!proto.vega.Vote.Value}
 */
proto.vega.Vote.prototype.getValue = function() {
  return /** @type {!proto.vega.Vote.Value} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.vega.Vote.Value} value
 * @return {!proto.vega.Vote} returns this
 */
proto.vega.Vote.prototype.setValue = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string proposal_id = 3;
 * @return {string}
 */
proto.vega.Vote.prototype.getProposalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Vote} returns this
 */
proto.vega.Vote.prototype.setProposalId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.vega.Vote.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.Vote} returns this
 */
proto.vega.Vote.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string total_governance_token_balance = 5;
 * @return {string}
 */
proto.vega.Vote.prototype.getTotalGovernanceTokenBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Vote} returns this
 */
proto.vega.Vote.prototype.setTotalGovernanceTokenBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string total_governance_token_weight = 6;
 * @return {string}
 */
proto.vega.Vote.prototype.getTotalGovernanceTokenWeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Vote} returns this
 */
proto.vega.Vote.prototype.setTotalGovernanceTokenWeight = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string total_equity_like_share_weight = 7;
 * @return {string}
 */
proto.vega.Vote.prototype.getTotalEquityLikeShareWeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.Vote} returns this
 */
proto.vega.Vote.prototype.setTotalEquityLikeShareWeight = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.vega.ProposalError = {
  PROPOSAL_ERROR_UNSPECIFIED: 0,
  PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON: 1,
  PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE: 2,
  PROPOSAL_ERROR_ENACT_TIME_TOO_SOON: 3,
  PROPOSAL_ERROR_ENACT_TIME_TOO_LATE: 4,
  PROPOSAL_ERROR_INSUFFICIENT_TOKENS: 5,
  PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY: 6,
  PROPOSAL_ERROR_NO_PRODUCT: 7,
  PROPOSAL_ERROR_UNSUPPORTED_PRODUCT: 8,
  PROPOSAL_ERROR_NO_TRADING_MODE: 11,
  PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE: 12,
  PROPOSAL_ERROR_NODE_VALIDATION_FAILED: 13,
  PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD: 14,
  PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS: 15,
  PROPOSAL_ERROR_INVALID_ASSET: 16,
  PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS: 17,
  PROPOSAL_ERROR_NO_RISK_PARAMETERS: 18,
  PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY: 19,
  PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE: 20,
  PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED: 21,
  PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL: 22,
  PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE: 23,
  PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET: 25,
  PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT: 26,
  PROPOSAL_ERROR_INVALID_RISK_PARAMETER: 30,
  PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED: 31,
  PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED: 32,
  PROPOSAL_ERROR_INVALID_ASSET_DETAILS: 33,
  PROPOSAL_ERROR_UNKNOWN_TYPE: 34,
  PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE: 35,
  PROPOSAL_ERROR_INVALID_FREEFORM: 36,
  PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE: 37,
  PROPOSAL_ERROR_INVALID_MARKET: 38,
  PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES: 39,
  PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS: 40,
  PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE: 41,
  PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE: 42,
  PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE: 43
};

goog.object.extend(exports, proto.vega);
